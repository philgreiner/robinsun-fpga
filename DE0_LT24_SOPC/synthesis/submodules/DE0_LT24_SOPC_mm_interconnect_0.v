// DE0_LT24_SOPC_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module DE0_LT24_SOPC_mm_interconnect_0 (
		input  wire        ALT_PLL_c0_clk,                                            //                                          ALT_PLL_c0.clk
		input  wire        ALT_PLL_c2_clk,                                            //                                          ALT_PLL_c2.clk
		input  wire        CLK_50_clk_clk,                                            //                                          CLK_50_clk.clk
		input  wire        ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset, // ALT_PLL_inclk_interface_reset_reset_bridge_in_reset.reset
		input  wire        CPU_reset_reset_bridge_in_reset_reset,                     //                     CPU_reset_reset_bridge_in_reset.reset
		input  wire        LED_CTRL_reset_sink_reset_bridge_in_reset_reset,           //           LED_CTRL_reset_sink_reset_bridge_in_reset.reset
		input  wire        LT24_buffer_flag_reset_reset_bridge_in_reset_reset,        //        LT24_buffer_flag_reset_reset_bridge_in_reset.reset
		input  wire        signal_out_reset_reset_bridge_in_reset_reset,              //              signal_out_reset_reset_bridge_in_reset.reset
		input  wire [26:0] CPU_data_master_address,                                   //                                     CPU_data_master.address
		output wire        CPU_data_master_waitrequest,                               //                                                    .waitrequest
		input  wire [3:0]  CPU_data_master_byteenable,                                //                                                    .byteenable
		input  wire        CPU_data_master_read,                                      //                                                    .read
		output wire [31:0] CPU_data_master_readdata,                                  //                                                    .readdata
		output wire        CPU_data_master_readdatavalid,                             //                                                    .readdatavalid
		input  wire        CPU_data_master_write,                                     //                                                    .write
		input  wire [31:0] CPU_data_master_writedata,                                 //                                                    .writedata
		input  wire        CPU_data_master_debugaccess,                               //                                                    .debugaccess
		input  wire [26:0] CPU_instruction_master_address,                            //                              CPU_instruction_master.address
		output wire        CPU_instruction_master_waitrequest,                        //                                                    .waitrequest
		input  wire        CPU_instruction_master_read,                               //                                                    .read
		output wire [31:0] CPU_instruction_master_readdata,                           //                                                    .readdata
		output wire        CPU_instruction_master_readdatavalid,                      //                                                    .readdatavalid
		output wire [1:0]  ALT_PLL_pll_slave_address,                                 //                                   ALT_PLL_pll_slave.address
		output wire        ALT_PLL_pll_slave_write,                                   //                                                    .write
		output wire        ALT_PLL_pll_slave_read,                                    //                                                    .read
		input  wire [31:0] ALT_PLL_pll_slave_readdata,                                //                                                    .readdata
		output wire [31:0] ALT_PLL_pll_slave_writedata,                               //                                                    .writedata
		output wire [12:0] background_mem_s1_address,                                 //                                   background_mem_s1.address
		output wire        background_mem_s1_write,                                   //                                                    .write
		input  wire [15:0] background_mem_s1_readdata,                                //                                                    .readdata
		output wire [15:0] background_mem_s1_writedata,                               //                                                    .writedata
		output wire [1:0]  background_mem_s1_byteenable,                              //                                                    .byteenable
		output wire        background_mem_s1_chipselect,                              //                                                    .chipselect
		output wire        background_mem_s1_clken,                                   //                                                    .clken
		output wire [8:0]  CPU_debug_mem_slave_address,                               //                                 CPU_debug_mem_slave.address
		output wire        CPU_debug_mem_slave_write,                                 //                                                    .write
		output wire        CPU_debug_mem_slave_read,                                  //                                                    .read
		input  wire [31:0] CPU_debug_mem_slave_readdata,                              //                                                    .readdata
		output wire [31:0] CPU_debug_mem_slave_writedata,                             //                                                    .writedata
		output wire [3:0]  CPU_debug_mem_slave_byteenable,                            //                                                    .byteenable
		input  wire        CPU_debug_mem_slave_waitrequest,                           //                                                    .waitrequest
		output wire        CPU_debug_mem_slave_debugaccess,                           //                                                    .debugaccess
		output wire [8:0]  epcs_flash_controller_0_epcs_control_port_address,         //           epcs_flash_controller_0_epcs_control_port.address
		output wire        epcs_flash_controller_0_epcs_control_port_write,           //                                                    .write
		output wire        epcs_flash_controller_0_epcs_control_port_read,            //                                                    .read
		input  wire [31:0] epcs_flash_controller_0_epcs_control_port_readdata,        //                                                    .readdata
		output wire [31:0] epcs_flash_controller_0_epcs_control_port_writedata,       //                                                    .writedata
		output wire        epcs_flash_controller_0_epcs_control_port_chipselect,      //                                                    .chipselect
		output wire [0:0]  JTAG_UART_avalon_jtag_slave_address,                       //                         JTAG_UART_avalon_jtag_slave.address
		output wire        JTAG_UART_avalon_jtag_slave_write,                         //                                                    .write
		output wire        JTAG_UART_avalon_jtag_slave_read,                          //                                                    .read
		input  wire [31:0] JTAG_UART_avalon_jtag_slave_readdata,                      //                                                    .readdata
		output wire [31:0] JTAG_UART_avalon_jtag_slave_writedata,                     //                                                    .writedata
		input  wire        JTAG_UART_avalon_jtag_slave_waitrequest,                   //                                                    .waitrequest
		output wire        JTAG_UART_avalon_jtag_slave_chipselect,                    //                                                    .chipselect
		output wire [1:0]  KEY_s1_address,                                            //                                              KEY_s1.address
		input  wire [31:0] KEY_s1_readdata,                                           //                                                    .readdata
		output wire [7:0]  LED_CTRL_avalon_slave_0_address,                           //                             LED_CTRL_avalon_slave_0.address
		output wire        LED_CTRL_avalon_slave_0_write,                             //                                                    .write
		output wire        LED_CTRL_avalon_slave_0_read,                              //                                                    .read
		input  wire [31:0] LED_CTRL_avalon_slave_0_readdata,                          //                                                    .readdata
		output wire [31:0] LED_CTRL_avalon_slave_0_writedata,                         //                                                    .writedata
		output wire [1:0]  LT24_buffer_flag_s1_address,                               //                                 LT24_buffer_flag_s1.address
		output wire        LT24_buffer_flag_s1_write,                                 //                                                    .write
		input  wire [31:0] LT24_buffer_flag_s1_readdata,                              //                                                    .readdata
		output wire [31:0] LT24_buffer_flag_s1_writedata,                             //                                                    .writedata
		output wire        LT24_buffer_flag_s1_chipselect,                            //                                                    .chipselect
		output wire [0:0]  LT24_CTRL_avalon_slave_0_address,                          //                            LT24_CTRL_avalon_slave_0.address
		output wire        LT24_CTRL_avalon_slave_0_write,                            //                                                    .write
		output wire [31:0] LT24_CTRL_avalon_slave_0_writedata,                        //                                                    .writedata
		output wire        LT24_CTRL_avalon_slave_0_chipselect,                       //                                                    .chipselect
		output wire [1:0]  LT24_LCD_RSTN_s1_address,                                  //                                    LT24_LCD_RSTN_s1.address
		output wire        LT24_LCD_RSTN_s1_write,                                    //                                                    .write
		input  wire [31:0] LT24_LCD_RSTN_s1_readdata,                                 //                                                    .readdata
		output wire [31:0] LT24_LCD_RSTN_s1_writedata,                                //                                                    .writedata
		output wire        LT24_LCD_RSTN_s1_chipselect,                               //                                                    .chipselect
		output wire [1:0]  LT24_TOUCH_BUSY_s1_address,                                //                                  LT24_TOUCH_BUSY_s1.address
		input  wire [31:0] LT24_TOUCH_BUSY_s1_readdata,                               //                                                    .readdata
		output wire [1:0]  LT24_TOUCH_PENIRQ_N_s1_address,                            //                              LT24_TOUCH_PENIRQ_N_s1.address
		output wire        LT24_TOUCH_PENIRQ_N_s1_write,                              //                                                    .write
		input  wire [31:0] LT24_TOUCH_PENIRQ_N_s1_readdata,                           //                                                    .readdata
		output wire [31:0] LT24_TOUCH_PENIRQ_N_s1_writedata,                          //                                                    .writedata
		output wire        LT24_TOUCH_PENIRQ_N_s1_chipselect,                         //                                                    .chipselect
		output wire [2:0]  LT24_TOUCH_SPI_spi_control_port_address,                   //                     LT24_TOUCH_SPI_spi_control_port.address
		output wire        LT24_TOUCH_SPI_spi_control_port_write,                     //                                                    .write
		output wire        LT24_TOUCH_SPI_spi_control_port_read,                      //                                                    .read
		input  wire [15:0] LT24_TOUCH_SPI_spi_control_port_readdata,                  //                                                    .readdata
		output wire [15:0] LT24_TOUCH_SPI_spi_control_port_writedata,                 //                                                    .writedata
		output wire        LT24_TOUCH_SPI_spi_control_port_chipselect,                //                                                    .chipselect
		output wire [11:0] pic_mem_s1_address,                                        //                                          pic_mem_s1.address
		output wire        pic_mem_s1_write,                                          //                                                    .write
		input  wire [15:0] pic_mem_s1_readdata,                                       //                                                    .readdata
		output wire [15:0] pic_mem_s1_writedata,                                      //                                                    .writedata
		output wire [1:0]  pic_mem_s1_byteenable,                                     //                                                    .byteenable
		output wire        pic_mem_s1_chipselect,                                     //                                                    .chipselect
		output wire        pic_mem_s1_clken,                                          //                                                    .clken
		output wire [23:0] SDRAM_s1_address,                                          //                                            SDRAM_s1.address
		output wire        SDRAM_s1_write,                                            //                                                    .write
		output wire        SDRAM_s1_read,                                             //                                                    .read
		input  wire [15:0] SDRAM_s1_readdata,                                         //                                                    .readdata
		output wire [15:0] SDRAM_s1_writedata,                                        //                                                    .writedata
		output wire [1:0]  SDRAM_s1_byteenable,                                       //                                                    .byteenable
		input  wire        SDRAM_s1_readdatavalid,                                    //                                                    .readdatavalid
		input  wire        SDRAM_s1_waitrequest,                                      //                                                    .waitrequest
		output wire        SDRAM_s1_chipselect,                                       //                                                    .chipselect
		output wire [1:0]  signal_out_s1_address,                                     //                                       signal_out_s1.address
		output wire        signal_out_s1_write,                                       //                                                    .write
		input  wire [31:0] signal_out_s1_readdata,                                    //                                                    .readdata
		output wire [31:0] signal_out_s1_writedata,                                   //                                                    .writedata
		output wire        signal_out_s1_chipselect,                                  //                                                    .chipselect
		output wire [2:0]  TIMER_s1_address,                                          //                                            TIMER_s1.address
		output wire        TIMER_s1_write,                                            //                                                    .write
		input  wire [15:0] TIMER_s1_readdata,                                         //                                                    .readdata
		output wire [15:0] TIMER_s1_writedata,                                        //                                                    .writedata
		output wire        TIMER_s1_chipselect                                        //                                                    .chipselect
	);

	wire          cpu_data_master_translator_avalon_universal_master_0_waitrequest;           // CPU_data_master_agent:av_waitrequest -> CPU_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;              // CPU_data_master_agent:av_readdata -> CPU_data_master_translator:uav_readdata
	wire          cpu_data_master_translator_avalon_universal_master_0_debugaccess;           // CPU_data_master_translator:uav_debugaccess -> CPU_data_master_agent:av_debugaccess
	wire   [26:0] cpu_data_master_translator_avalon_universal_master_0_address;               // CPU_data_master_translator:uav_address -> CPU_data_master_agent:av_address
	wire          cpu_data_master_translator_avalon_universal_master_0_read;                  // CPU_data_master_translator:uav_read -> CPU_data_master_agent:av_read
	wire    [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;            // CPU_data_master_translator:uav_byteenable -> CPU_data_master_agent:av_byteenable
	wire          cpu_data_master_translator_avalon_universal_master_0_readdatavalid;         // CPU_data_master_agent:av_readdatavalid -> CPU_data_master_translator:uav_readdatavalid
	wire          cpu_data_master_translator_avalon_universal_master_0_lock;                  // CPU_data_master_translator:uav_lock -> CPU_data_master_agent:av_lock
	wire          cpu_data_master_translator_avalon_universal_master_0_write;                 // CPU_data_master_translator:uav_write -> CPU_data_master_agent:av_write
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;             // CPU_data_master_translator:uav_writedata -> CPU_data_master_agent:av_writedata
	wire    [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;            // CPU_data_master_translator:uav_burstcount -> CPU_data_master_agent:av_burstcount
	wire          cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;    // CPU_instruction_master_agent:av_waitrequest -> CPU_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;       // CPU_instruction_master_agent:av_readdata -> CPU_instruction_master_translator:uav_readdata
	wire          cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;    // CPU_instruction_master_translator:uav_debugaccess -> CPU_instruction_master_agent:av_debugaccess
	wire   [26:0] cpu_instruction_master_translator_avalon_universal_master_0_address;        // CPU_instruction_master_translator:uav_address -> CPU_instruction_master_agent:av_address
	wire          cpu_instruction_master_translator_avalon_universal_master_0_read;           // CPU_instruction_master_translator:uav_read -> CPU_instruction_master_agent:av_read
	wire    [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;     // CPU_instruction_master_translator:uav_byteenable -> CPU_instruction_master_agent:av_byteenable
	wire          cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid;  // CPU_instruction_master_agent:av_readdatavalid -> CPU_instruction_master_translator:uav_readdatavalid
	wire          cpu_instruction_master_translator_avalon_universal_master_0_lock;           // CPU_instruction_master_translator:uav_lock -> CPU_instruction_master_agent:av_lock
	wire          cpu_instruction_master_translator_avalon_universal_master_0_write;          // CPU_instruction_master_translator:uav_write -> CPU_instruction_master_agent:av_write
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;      // CPU_instruction_master_translator:uav_writedata -> CPU_instruction_master_agent:av_writedata
	wire    [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;     // CPU_instruction_master_translator:uav_burstcount -> CPU_instruction_master_agent:av_burstcount
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                              // JTAG_UART_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                           // JTAG_UART_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                           // JTAG_UART_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_avalon_jtag_slave_translator:uav_debugaccess
	wire   [26:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                               // JTAG_UART_avalon_jtag_slave_agent:m0_address -> JTAG_UART_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                            // JTAG_UART_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                  // JTAG_UART_avalon_jtag_slave_agent:m0_read -> JTAG_UART_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                         // JTAG_UART_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                  // JTAG_UART_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                             // JTAG_UART_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                 // JTAG_UART_avalon_jtag_slave_agent:m0_write -> JTAG_UART_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                            // JTAG_UART_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                          // JTAG_UART_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [107:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                           // JTAG_UART_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                          // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                  // JTAG_UART_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                    // JTAG_UART_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                       // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_valid
	wire  [107:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                        // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                       // JTAG_UART_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;               // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                 // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                          // cmd_mux:src_valid -> JTAG_UART_avalon_jtag_slave_agent:cp_valid
	wire  [106:0] cmd_mux_src_data;                                                           // cmd_mux:src_data -> JTAG_UART_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                          // JTAG_UART_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [16:0] cmd_mux_src_channel;                                                        // cmd_mux:src_channel -> JTAG_UART_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                  // cmd_mux:src_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                    // cmd_mux:src_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] led_ctrl_avalon_slave_0_agent_m0_readdata;                                  // LED_CTRL_avalon_slave_0_translator:uav_readdata -> LED_CTRL_avalon_slave_0_agent:m0_readdata
	wire          led_ctrl_avalon_slave_0_agent_m0_waitrequest;                               // LED_CTRL_avalon_slave_0_translator:uav_waitrequest -> LED_CTRL_avalon_slave_0_agent:m0_waitrequest
	wire          led_ctrl_avalon_slave_0_agent_m0_debugaccess;                               // LED_CTRL_avalon_slave_0_agent:m0_debugaccess -> LED_CTRL_avalon_slave_0_translator:uav_debugaccess
	wire   [26:0] led_ctrl_avalon_slave_0_agent_m0_address;                                   // LED_CTRL_avalon_slave_0_agent:m0_address -> LED_CTRL_avalon_slave_0_translator:uav_address
	wire    [3:0] led_ctrl_avalon_slave_0_agent_m0_byteenable;                                // LED_CTRL_avalon_slave_0_agent:m0_byteenable -> LED_CTRL_avalon_slave_0_translator:uav_byteenable
	wire          led_ctrl_avalon_slave_0_agent_m0_read;                                      // LED_CTRL_avalon_slave_0_agent:m0_read -> LED_CTRL_avalon_slave_0_translator:uav_read
	wire          led_ctrl_avalon_slave_0_agent_m0_readdatavalid;                             // LED_CTRL_avalon_slave_0_translator:uav_readdatavalid -> LED_CTRL_avalon_slave_0_agent:m0_readdatavalid
	wire          led_ctrl_avalon_slave_0_agent_m0_lock;                                      // LED_CTRL_avalon_slave_0_agent:m0_lock -> LED_CTRL_avalon_slave_0_translator:uav_lock
	wire   [31:0] led_ctrl_avalon_slave_0_agent_m0_writedata;                                 // LED_CTRL_avalon_slave_0_agent:m0_writedata -> LED_CTRL_avalon_slave_0_translator:uav_writedata
	wire          led_ctrl_avalon_slave_0_agent_m0_write;                                     // LED_CTRL_avalon_slave_0_agent:m0_write -> LED_CTRL_avalon_slave_0_translator:uav_write
	wire    [2:0] led_ctrl_avalon_slave_0_agent_m0_burstcount;                                // LED_CTRL_avalon_slave_0_agent:m0_burstcount -> LED_CTRL_avalon_slave_0_translator:uav_burstcount
	wire          led_ctrl_avalon_slave_0_agent_rf_source_valid;                              // LED_CTRL_avalon_slave_0_agent:rf_source_valid -> LED_CTRL_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [107:0] led_ctrl_avalon_slave_0_agent_rf_source_data;                               // LED_CTRL_avalon_slave_0_agent:rf_source_data -> LED_CTRL_avalon_slave_0_agent_rsp_fifo:in_data
	wire          led_ctrl_avalon_slave_0_agent_rf_source_ready;                              // LED_CTRL_avalon_slave_0_agent_rsp_fifo:in_ready -> LED_CTRL_avalon_slave_0_agent:rf_source_ready
	wire          led_ctrl_avalon_slave_0_agent_rf_source_startofpacket;                      // LED_CTRL_avalon_slave_0_agent:rf_source_startofpacket -> LED_CTRL_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          led_ctrl_avalon_slave_0_agent_rf_source_endofpacket;                        // LED_CTRL_avalon_slave_0_agent:rf_source_endofpacket -> LED_CTRL_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          led_ctrl_avalon_slave_0_agent_rsp_fifo_out_valid;                           // LED_CTRL_avalon_slave_0_agent_rsp_fifo:out_valid -> LED_CTRL_avalon_slave_0_agent:rf_sink_valid
	wire  [107:0] led_ctrl_avalon_slave_0_agent_rsp_fifo_out_data;                            // LED_CTRL_avalon_slave_0_agent_rsp_fifo:out_data -> LED_CTRL_avalon_slave_0_agent:rf_sink_data
	wire          led_ctrl_avalon_slave_0_agent_rsp_fifo_out_ready;                           // LED_CTRL_avalon_slave_0_agent:rf_sink_ready -> LED_CTRL_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          led_ctrl_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                   // LED_CTRL_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> LED_CTRL_avalon_slave_0_agent:rf_sink_startofpacket
	wire          led_ctrl_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                     // LED_CTRL_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> LED_CTRL_avalon_slave_0_agent:rf_sink_endofpacket
	wire          led_ctrl_avalon_slave_0_agent_rdata_fifo_src_valid;                         // LED_CTRL_avalon_slave_0_agent:rdata_fifo_src_valid -> LED_CTRL_avalon_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] led_ctrl_avalon_slave_0_agent_rdata_fifo_src_data;                          // LED_CTRL_avalon_slave_0_agent:rdata_fifo_src_data -> LED_CTRL_avalon_slave_0_agent_rdata_fifo:in_data
	wire          led_ctrl_avalon_slave_0_agent_rdata_fifo_src_ready;                         // LED_CTRL_avalon_slave_0_agent_rdata_fifo:in_ready -> LED_CTRL_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                      // cmd_mux_001:src_valid -> LED_CTRL_avalon_slave_0_agent:cp_valid
	wire  [106:0] cmd_mux_001_src_data;                                                       // cmd_mux_001:src_data -> LED_CTRL_avalon_slave_0_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                      // LED_CTRL_avalon_slave_0_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [16:0] cmd_mux_001_src_channel;                                                    // cmd_mux_001:src_channel -> LED_CTRL_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                              // cmd_mux_001:src_startofpacket -> LED_CTRL_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                // cmd_mux_001:src_endofpacket -> LED_CTRL_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] lt24_ctrl_avalon_slave_0_agent_m0_readdata;                                 // LT24_CTRL_avalon_slave_0_translator:uav_readdata -> LT24_CTRL_avalon_slave_0_agent:m0_readdata
	wire          lt24_ctrl_avalon_slave_0_agent_m0_waitrequest;                              // LT24_CTRL_avalon_slave_0_translator:uav_waitrequest -> LT24_CTRL_avalon_slave_0_agent:m0_waitrequest
	wire          lt24_ctrl_avalon_slave_0_agent_m0_debugaccess;                              // LT24_CTRL_avalon_slave_0_agent:m0_debugaccess -> LT24_CTRL_avalon_slave_0_translator:uav_debugaccess
	wire   [26:0] lt24_ctrl_avalon_slave_0_agent_m0_address;                                  // LT24_CTRL_avalon_slave_0_agent:m0_address -> LT24_CTRL_avalon_slave_0_translator:uav_address
	wire    [3:0] lt24_ctrl_avalon_slave_0_agent_m0_byteenable;                               // LT24_CTRL_avalon_slave_0_agent:m0_byteenable -> LT24_CTRL_avalon_slave_0_translator:uav_byteenable
	wire          lt24_ctrl_avalon_slave_0_agent_m0_read;                                     // LT24_CTRL_avalon_slave_0_agent:m0_read -> LT24_CTRL_avalon_slave_0_translator:uav_read
	wire          lt24_ctrl_avalon_slave_0_agent_m0_readdatavalid;                            // LT24_CTRL_avalon_slave_0_translator:uav_readdatavalid -> LT24_CTRL_avalon_slave_0_agent:m0_readdatavalid
	wire          lt24_ctrl_avalon_slave_0_agent_m0_lock;                                     // LT24_CTRL_avalon_slave_0_agent:m0_lock -> LT24_CTRL_avalon_slave_0_translator:uav_lock
	wire   [31:0] lt24_ctrl_avalon_slave_0_agent_m0_writedata;                                // LT24_CTRL_avalon_slave_0_agent:m0_writedata -> LT24_CTRL_avalon_slave_0_translator:uav_writedata
	wire          lt24_ctrl_avalon_slave_0_agent_m0_write;                                    // LT24_CTRL_avalon_slave_0_agent:m0_write -> LT24_CTRL_avalon_slave_0_translator:uav_write
	wire    [2:0] lt24_ctrl_avalon_slave_0_agent_m0_burstcount;                               // LT24_CTRL_avalon_slave_0_agent:m0_burstcount -> LT24_CTRL_avalon_slave_0_translator:uav_burstcount
	wire          lt24_ctrl_avalon_slave_0_agent_rf_source_valid;                             // LT24_CTRL_avalon_slave_0_agent:rf_source_valid -> LT24_CTRL_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [107:0] lt24_ctrl_avalon_slave_0_agent_rf_source_data;                              // LT24_CTRL_avalon_slave_0_agent:rf_source_data -> LT24_CTRL_avalon_slave_0_agent_rsp_fifo:in_data
	wire          lt24_ctrl_avalon_slave_0_agent_rf_source_ready;                             // LT24_CTRL_avalon_slave_0_agent_rsp_fifo:in_ready -> LT24_CTRL_avalon_slave_0_agent:rf_source_ready
	wire          lt24_ctrl_avalon_slave_0_agent_rf_source_startofpacket;                     // LT24_CTRL_avalon_slave_0_agent:rf_source_startofpacket -> LT24_CTRL_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          lt24_ctrl_avalon_slave_0_agent_rf_source_endofpacket;                       // LT24_CTRL_avalon_slave_0_agent:rf_source_endofpacket -> LT24_CTRL_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          lt24_ctrl_avalon_slave_0_agent_rsp_fifo_out_valid;                          // LT24_CTRL_avalon_slave_0_agent_rsp_fifo:out_valid -> LT24_CTRL_avalon_slave_0_agent:rf_sink_valid
	wire  [107:0] lt24_ctrl_avalon_slave_0_agent_rsp_fifo_out_data;                           // LT24_CTRL_avalon_slave_0_agent_rsp_fifo:out_data -> LT24_CTRL_avalon_slave_0_agent:rf_sink_data
	wire          lt24_ctrl_avalon_slave_0_agent_rsp_fifo_out_ready;                          // LT24_CTRL_avalon_slave_0_agent:rf_sink_ready -> LT24_CTRL_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          lt24_ctrl_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                  // LT24_CTRL_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> LT24_CTRL_avalon_slave_0_agent:rf_sink_startofpacket
	wire          lt24_ctrl_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                    // LT24_CTRL_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> LT24_CTRL_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                      // cmd_mux_002:src_valid -> LT24_CTRL_avalon_slave_0_agent:cp_valid
	wire  [106:0] cmd_mux_002_src_data;                                                       // cmd_mux_002:src_data -> LT24_CTRL_avalon_slave_0_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                      // LT24_CTRL_avalon_slave_0_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [16:0] cmd_mux_002_src_channel;                                                    // cmd_mux_002:src_channel -> LT24_CTRL_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                              // cmd_mux_002:src_startofpacket -> LT24_CTRL_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                // cmd_mux_002:src_endofpacket -> LT24_CTRL_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] cpu_debug_mem_slave_agent_m0_readdata;                                      // CPU_debug_mem_slave_translator:uav_readdata -> CPU_debug_mem_slave_agent:m0_readdata
	wire          cpu_debug_mem_slave_agent_m0_waitrequest;                                   // CPU_debug_mem_slave_translator:uav_waitrequest -> CPU_debug_mem_slave_agent:m0_waitrequest
	wire          cpu_debug_mem_slave_agent_m0_debugaccess;                                   // CPU_debug_mem_slave_agent:m0_debugaccess -> CPU_debug_mem_slave_translator:uav_debugaccess
	wire   [26:0] cpu_debug_mem_slave_agent_m0_address;                                       // CPU_debug_mem_slave_agent:m0_address -> CPU_debug_mem_slave_translator:uav_address
	wire    [3:0] cpu_debug_mem_slave_agent_m0_byteenable;                                    // CPU_debug_mem_slave_agent:m0_byteenable -> CPU_debug_mem_slave_translator:uav_byteenable
	wire          cpu_debug_mem_slave_agent_m0_read;                                          // CPU_debug_mem_slave_agent:m0_read -> CPU_debug_mem_slave_translator:uav_read
	wire          cpu_debug_mem_slave_agent_m0_readdatavalid;                                 // CPU_debug_mem_slave_translator:uav_readdatavalid -> CPU_debug_mem_slave_agent:m0_readdatavalid
	wire          cpu_debug_mem_slave_agent_m0_lock;                                          // CPU_debug_mem_slave_agent:m0_lock -> CPU_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpu_debug_mem_slave_agent_m0_writedata;                                     // CPU_debug_mem_slave_agent:m0_writedata -> CPU_debug_mem_slave_translator:uav_writedata
	wire          cpu_debug_mem_slave_agent_m0_write;                                         // CPU_debug_mem_slave_agent:m0_write -> CPU_debug_mem_slave_translator:uav_write
	wire    [2:0] cpu_debug_mem_slave_agent_m0_burstcount;                                    // CPU_debug_mem_slave_agent:m0_burstcount -> CPU_debug_mem_slave_translator:uav_burstcount
	wire          cpu_debug_mem_slave_agent_rf_source_valid;                                  // CPU_debug_mem_slave_agent:rf_source_valid -> CPU_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [107:0] cpu_debug_mem_slave_agent_rf_source_data;                                   // CPU_debug_mem_slave_agent:rf_source_data -> CPU_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpu_debug_mem_slave_agent_rf_source_ready;                                  // CPU_debug_mem_slave_agent_rsp_fifo:in_ready -> CPU_debug_mem_slave_agent:rf_source_ready
	wire          cpu_debug_mem_slave_agent_rf_source_startofpacket;                          // CPU_debug_mem_slave_agent:rf_source_startofpacket -> CPU_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpu_debug_mem_slave_agent_rf_source_endofpacket;                            // CPU_debug_mem_slave_agent:rf_source_endofpacket -> CPU_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_valid;                               // CPU_debug_mem_slave_agent_rsp_fifo:out_valid -> CPU_debug_mem_slave_agent:rf_sink_valid
	wire  [107:0] cpu_debug_mem_slave_agent_rsp_fifo_out_data;                                // CPU_debug_mem_slave_agent_rsp_fifo:out_data -> CPU_debug_mem_slave_agent:rf_sink_data
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_ready;                               // CPU_debug_mem_slave_agent:rf_sink_ready -> CPU_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                       // CPU_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> CPU_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                         // CPU_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> CPU_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                      // cmd_mux_003:src_valid -> CPU_debug_mem_slave_agent:cp_valid
	wire  [106:0] cmd_mux_003_src_data;                                                       // cmd_mux_003:src_data -> CPU_debug_mem_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                      // CPU_debug_mem_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [16:0] cmd_mux_003_src_channel;                                                    // cmd_mux_003:src_channel -> CPU_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                              // cmd_mux_003:src_startofpacket -> CPU_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                // cmd_mux_003:src_endofpacket -> CPU_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] epcs_flash_controller_0_epcs_control_port_agent_m0_readdata;                // epcs_flash_controller_0_epcs_control_port_translator:uav_readdata -> epcs_flash_controller_0_epcs_control_port_agent:m0_readdata
	wire          epcs_flash_controller_0_epcs_control_port_agent_m0_waitrequest;             // epcs_flash_controller_0_epcs_control_port_translator:uav_waitrequest -> epcs_flash_controller_0_epcs_control_port_agent:m0_waitrequest
	wire          epcs_flash_controller_0_epcs_control_port_agent_m0_debugaccess;             // epcs_flash_controller_0_epcs_control_port_agent:m0_debugaccess -> epcs_flash_controller_0_epcs_control_port_translator:uav_debugaccess
	wire   [26:0] epcs_flash_controller_0_epcs_control_port_agent_m0_address;                 // epcs_flash_controller_0_epcs_control_port_agent:m0_address -> epcs_flash_controller_0_epcs_control_port_translator:uav_address
	wire    [3:0] epcs_flash_controller_0_epcs_control_port_agent_m0_byteenable;              // epcs_flash_controller_0_epcs_control_port_agent:m0_byteenable -> epcs_flash_controller_0_epcs_control_port_translator:uav_byteenable
	wire          epcs_flash_controller_0_epcs_control_port_agent_m0_read;                    // epcs_flash_controller_0_epcs_control_port_agent:m0_read -> epcs_flash_controller_0_epcs_control_port_translator:uav_read
	wire          epcs_flash_controller_0_epcs_control_port_agent_m0_readdatavalid;           // epcs_flash_controller_0_epcs_control_port_translator:uav_readdatavalid -> epcs_flash_controller_0_epcs_control_port_agent:m0_readdatavalid
	wire          epcs_flash_controller_0_epcs_control_port_agent_m0_lock;                    // epcs_flash_controller_0_epcs_control_port_agent:m0_lock -> epcs_flash_controller_0_epcs_control_port_translator:uav_lock
	wire   [31:0] epcs_flash_controller_0_epcs_control_port_agent_m0_writedata;               // epcs_flash_controller_0_epcs_control_port_agent:m0_writedata -> epcs_flash_controller_0_epcs_control_port_translator:uav_writedata
	wire          epcs_flash_controller_0_epcs_control_port_agent_m0_write;                   // epcs_flash_controller_0_epcs_control_port_agent:m0_write -> epcs_flash_controller_0_epcs_control_port_translator:uav_write
	wire    [2:0] epcs_flash_controller_0_epcs_control_port_agent_m0_burstcount;              // epcs_flash_controller_0_epcs_control_port_agent:m0_burstcount -> epcs_flash_controller_0_epcs_control_port_translator:uav_burstcount
	wire          epcs_flash_controller_0_epcs_control_port_agent_rf_source_valid;            // epcs_flash_controller_0_epcs_control_port_agent:rf_source_valid -> epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:in_valid
	wire  [107:0] epcs_flash_controller_0_epcs_control_port_agent_rf_source_data;             // epcs_flash_controller_0_epcs_control_port_agent:rf_source_data -> epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:in_data
	wire          epcs_flash_controller_0_epcs_control_port_agent_rf_source_ready;            // epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:in_ready -> epcs_flash_controller_0_epcs_control_port_agent:rf_source_ready
	wire          epcs_flash_controller_0_epcs_control_port_agent_rf_source_startofpacket;    // epcs_flash_controller_0_epcs_control_port_agent:rf_source_startofpacket -> epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:in_startofpacket
	wire          epcs_flash_controller_0_epcs_control_port_agent_rf_source_endofpacket;      // epcs_flash_controller_0_epcs_control_port_agent:rf_source_endofpacket -> epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:in_endofpacket
	wire          epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_valid;         // epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:out_valid -> epcs_flash_controller_0_epcs_control_port_agent:rf_sink_valid
	wire  [107:0] epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_data;          // epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:out_data -> epcs_flash_controller_0_epcs_control_port_agent:rf_sink_data
	wire          epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_ready;         // epcs_flash_controller_0_epcs_control_port_agent:rf_sink_ready -> epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:out_ready
	wire          epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_startofpacket; // epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:out_startofpacket -> epcs_flash_controller_0_epcs_control_port_agent:rf_sink_startofpacket
	wire          epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_endofpacket;   // epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:out_endofpacket -> epcs_flash_controller_0_epcs_control_port_agent:rf_sink_endofpacket
	wire          epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_valid;       // epcs_flash_controller_0_epcs_control_port_agent:rdata_fifo_src_valid -> epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo:in_valid
	wire   [33:0] epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_data;        // epcs_flash_controller_0_epcs_control_port_agent:rdata_fifo_src_data -> epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo:in_data
	wire          epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_ready;       // epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo:in_ready -> epcs_flash_controller_0_epcs_control_port_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                      // cmd_mux_004:src_valid -> epcs_flash_controller_0_epcs_control_port_agent:cp_valid
	wire  [106:0] cmd_mux_004_src_data;                                                       // cmd_mux_004:src_data -> epcs_flash_controller_0_epcs_control_port_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                      // epcs_flash_controller_0_epcs_control_port_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [16:0] cmd_mux_004_src_channel;                                                    // cmd_mux_004:src_channel -> epcs_flash_controller_0_epcs_control_port_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                              // cmd_mux_004:src_startofpacket -> epcs_flash_controller_0_epcs_control_port_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                // cmd_mux_004:src_endofpacket -> epcs_flash_controller_0_epcs_control_port_agent:cp_endofpacket
	wire   [31:0] alt_pll_pll_slave_agent_m0_readdata;                                        // ALT_PLL_pll_slave_translator:uav_readdata -> ALT_PLL_pll_slave_agent:m0_readdata
	wire          alt_pll_pll_slave_agent_m0_waitrequest;                                     // ALT_PLL_pll_slave_translator:uav_waitrequest -> ALT_PLL_pll_slave_agent:m0_waitrequest
	wire          alt_pll_pll_slave_agent_m0_debugaccess;                                     // ALT_PLL_pll_slave_agent:m0_debugaccess -> ALT_PLL_pll_slave_translator:uav_debugaccess
	wire   [26:0] alt_pll_pll_slave_agent_m0_address;                                         // ALT_PLL_pll_slave_agent:m0_address -> ALT_PLL_pll_slave_translator:uav_address
	wire    [3:0] alt_pll_pll_slave_agent_m0_byteenable;                                      // ALT_PLL_pll_slave_agent:m0_byteenable -> ALT_PLL_pll_slave_translator:uav_byteenable
	wire          alt_pll_pll_slave_agent_m0_read;                                            // ALT_PLL_pll_slave_agent:m0_read -> ALT_PLL_pll_slave_translator:uav_read
	wire          alt_pll_pll_slave_agent_m0_readdatavalid;                                   // ALT_PLL_pll_slave_translator:uav_readdatavalid -> ALT_PLL_pll_slave_agent:m0_readdatavalid
	wire          alt_pll_pll_slave_agent_m0_lock;                                            // ALT_PLL_pll_slave_agent:m0_lock -> ALT_PLL_pll_slave_translator:uav_lock
	wire   [31:0] alt_pll_pll_slave_agent_m0_writedata;                                       // ALT_PLL_pll_slave_agent:m0_writedata -> ALT_PLL_pll_slave_translator:uav_writedata
	wire          alt_pll_pll_slave_agent_m0_write;                                           // ALT_PLL_pll_slave_agent:m0_write -> ALT_PLL_pll_slave_translator:uav_write
	wire    [2:0] alt_pll_pll_slave_agent_m0_burstcount;                                      // ALT_PLL_pll_slave_agent:m0_burstcount -> ALT_PLL_pll_slave_translator:uav_burstcount
	wire          alt_pll_pll_slave_agent_rf_source_valid;                                    // ALT_PLL_pll_slave_agent:rf_source_valid -> ALT_PLL_pll_slave_agent_rsp_fifo:in_valid
	wire  [107:0] alt_pll_pll_slave_agent_rf_source_data;                                     // ALT_PLL_pll_slave_agent:rf_source_data -> ALT_PLL_pll_slave_agent_rsp_fifo:in_data
	wire          alt_pll_pll_slave_agent_rf_source_ready;                                    // ALT_PLL_pll_slave_agent_rsp_fifo:in_ready -> ALT_PLL_pll_slave_agent:rf_source_ready
	wire          alt_pll_pll_slave_agent_rf_source_startofpacket;                            // ALT_PLL_pll_slave_agent:rf_source_startofpacket -> ALT_PLL_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          alt_pll_pll_slave_agent_rf_source_endofpacket;                              // ALT_PLL_pll_slave_agent:rf_source_endofpacket -> ALT_PLL_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          alt_pll_pll_slave_agent_rsp_fifo_out_valid;                                 // ALT_PLL_pll_slave_agent_rsp_fifo:out_valid -> ALT_PLL_pll_slave_agent:rf_sink_valid
	wire  [107:0] alt_pll_pll_slave_agent_rsp_fifo_out_data;                                  // ALT_PLL_pll_slave_agent_rsp_fifo:out_data -> ALT_PLL_pll_slave_agent:rf_sink_data
	wire          alt_pll_pll_slave_agent_rsp_fifo_out_ready;                                 // ALT_PLL_pll_slave_agent:rf_sink_ready -> ALT_PLL_pll_slave_agent_rsp_fifo:out_ready
	wire          alt_pll_pll_slave_agent_rsp_fifo_out_startofpacket;                         // ALT_PLL_pll_slave_agent_rsp_fifo:out_startofpacket -> ALT_PLL_pll_slave_agent:rf_sink_startofpacket
	wire          alt_pll_pll_slave_agent_rsp_fifo_out_endofpacket;                           // ALT_PLL_pll_slave_agent_rsp_fifo:out_endofpacket -> ALT_PLL_pll_slave_agent:rf_sink_endofpacket
	wire          alt_pll_pll_slave_agent_rdata_fifo_src_valid;                               // ALT_PLL_pll_slave_agent:rdata_fifo_src_valid -> ALT_PLL_pll_slave_agent_rdata_fifo:in_valid
	wire   [33:0] alt_pll_pll_slave_agent_rdata_fifo_src_data;                                // ALT_PLL_pll_slave_agent:rdata_fifo_src_data -> ALT_PLL_pll_slave_agent_rdata_fifo:in_data
	wire          alt_pll_pll_slave_agent_rdata_fifo_src_ready;                               // ALT_PLL_pll_slave_agent_rdata_fifo:in_ready -> ALT_PLL_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                      // cmd_mux_005:src_valid -> ALT_PLL_pll_slave_agent:cp_valid
	wire  [106:0] cmd_mux_005_src_data;                                                       // cmd_mux_005:src_data -> ALT_PLL_pll_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                      // ALT_PLL_pll_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [16:0] cmd_mux_005_src_channel;                                                    // cmd_mux_005:src_channel -> ALT_PLL_pll_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                              // cmd_mux_005:src_startofpacket -> ALT_PLL_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                // cmd_mux_005:src_endofpacket -> ALT_PLL_pll_slave_agent:cp_endofpacket
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                 // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                              // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                              // SDRAM_s1_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire   [26:0] sdram_s1_agent_m0_address;                                                  // SDRAM_s1_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                               // SDRAM_s1_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                     // SDRAM_s1_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                            // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                     // SDRAM_s1_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                // SDRAM_s1_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                    // SDRAM_s1_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                               // SDRAM_s1_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                             // SDRAM_s1_agent:rf_source_valid -> SDRAM_s1_agent_rsp_fifo:in_valid
	wire   [89:0] sdram_s1_agent_rf_source_data;                                              // SDRAM_s1_agent:rf_source_data -> SDRAM_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                             // SDRAM_s1_agent_rsp_fifo:in_ready -> SDRAM_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                     // SDRAM_s1_agent:rf_source_startofpacket -> SDRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                       // SDRAM_s1_agent:rf_source_endofpacket -> SDRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                          // SDRAM_s1_agent_rsp_fifo:out_valid -> SDRAM_s1_agent:rf_sink_valid
	wire   [89:0] sdram_s1_agent_rsp_fifo_out_data;                                           // SDRAM_s1_agent_rsp_fifo:out_data -> SDRAM_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                          // SDRAM_s1_agent:rf_sink_ready -> SDRAM_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                  // SDRAM_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                    // SDRAM_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                        // SDRAM_s1_agent:rdata_fifo_src_valid -> SDRAM_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                         // SDRAM_s1_agent:rdata_fifo_src_data -> SDRAM_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                        // SDRAM_s1_agent_rdata_fifo:in_ready -> SDRAM_s1_agent:rdata_fifo_src_ready
	wire   [31:0] timer_s1_agent_m0_readdata;                                                 // TIMER_s1_translator:uav_readdata -> TIMER_s1_agent:m0_readdata
	wire          timer_s1_agent_m0_waitrequest;                                              // TIMER_s1_translator:uav_waitrequest -> TIMER_s1_agent:m0_waitrequest
	wire          timer_s1_agent_m0_debugaccess;                                              // TIMER_s1_agent:m0_debugaccess -> TIMER_s1_translator:uav_debugaccess
	wire   [26:0] timer_s1_agent_m0_address;                                                  // TIMER_s1_agent:m0_address -> TIMER_s1_translator:uav_address
	wire    [3:0] timer_s1_agent_m0_byteenable;                                               // TIMER_s1_agent:m0_byteenable -> TIMER_s1_translator:uav_byteenable
	wire          timer_s1_agent_m0_read;                                                     // TIMER_s1_agent:m0_read -> TIMER_s1_translator:uav_read
	wire          timer_s1_agent_m0_readdatavalid;                                            // TIMER_s1_translator:uav_readdatavalid -> TIMER_s1_agent:m0_readdatavalid
	wire          timer_s1_agent_m0_lock;                                                     // TIMER_s1_agent:m0_lock -> TIMER_s1_translator:uav_lock
	wire   [31:0] timer_s1_agent_m0_writedata;                                                // TIMER_s1_agent:m0_writedata -> TIMER_s1_translator:uav_writedata
	wire          timer_s1_agent_m0_write;                                                    // TIMER_s1_agent:m0_write -> TIMER_s1_translator:uav_write
	wire    [2:0] timer_s1_agent_m0_burstcount;                                               // TIMER_s1_agent:m0_burstcount -> TIMER_s1_translator:uav_burstcount
	wire          timer_s1_agent_rf_source_valid;                                             // TIMER_s1_agent:rf_source_valid -> TIMER_s1_agent_rsp_fifo:in_valid
	wire  [107:0] timer_s1_agent_rf_source_data;                                              // TIMER_s1_agent:rf_source_data -> TIMER_s1_agent_rsp_fifo:in_data
	wire          timer_s1_agent_rf_source_ready;                                             // TIMER_s1_agent_rsp_fifo:in_ready -> TIMER_s1_agent:rf_source_ready
	wire          timer_s1_agent_rf_source_startofpacket;                                     // TIMER_s1_agent:rf_source_startofpacket -> TIMER_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_s1_agent_rf_source_endofpacket;                                       // TIMER_s1_agent:rf_source_endofpacket -> TIMER_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_s1_agent_rsp_fifo_out_valid;                                          // TIMER_s1_agent_rsp_fifo:out_valid -> TIMER_s1_agent:rf_sink_valid
	wire  [107:0] timer_s1_agent_rsp_fifo_out_data;                                           // TIMER_s1_agent_rsp_fifo:out_data -> TIMER_s1_agent:rf_sink_data
	wire          timer_s1_agent_rsp_fifo_out_ready;                                          // TIMER_s1_agent:rf_sink_ready -> TIMER_s1_agent_rsp_fifo:out_ready
	wire          timer_s1_agent_rsp_fifo_out_startofpacket;                                  // TIMER_s1_agent_rsp_fifo:out_startofpacket -> TIMER_s1_agent:rf_sink_startofpacket
	wire          timer_s1_agent_rsp_fifo_out_endofpacket;                                    // TIMER_s1_agent_rsp_fifo:out_endofpacket -> TIMER_s1_agent:rf_sink_endofpacket
	wire          timer_s1_agent_rdata_fifo_src_valid;                                        // TIMER_s1_agent:rdata_fifo_src_valid -> TIMER_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_s1_agent_rdata_fifo_src_data;                                         // TIMER_s1_agent:rdata_fifo_src_data -> TIMER_s1_agent_rdata_fifo:in_data
	wire          timer_s1_agent_rdata_fifo_src_ready;                                        // TIMER_s1_agent_rdata_fifo:in_ready -> TIMER_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_valid;                                                      // cmd_mux_007:src_valid -> TIMER_s1_agent:cp_valid
	wire  [106:0] cmd_mux_007_src_data;                                                       // cmd_mux_007:src_data -> TIMER_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                      // TIMER_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [16:0] cmd_mux_007_src_channel;                                                    // cmd_mux_007:src_channel -> TIMER_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                              // cmd_mux_007:src_startofpacket -> TIMER_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                // cmd_mux_007:src_endofpacket -> TIMER_s1_agent:cp_endofpacket
	wire   [31:0] key_s1_agent_m0_readdata;                                                   // KEY_s1_translator:uav_readdata -> KEY_s1_agent:m0_readdata
	wire          key_s1_agent_m0_waitrequest;                                                // KEY_s1_translator:uav_waitrequest -> KEY_s1_agent:m0_waitrequest
	wire          key_s1_agent_m0_debugaccess;                                                // KEY_s1_agent:m0_debugaccess -> KEY_s1_translator:uav_debugaccess
	wire   [26:0] key_s1_agent_m0_address;                                                    // KEY_s1_agent:m0_address -> KEY_s1_translator:uav_address
	wire    [3:0] key_s1_agent_m0_byteenable;                                                 // KEY_s1_agent:m0_byteenable -> KEY_s1_translator:uav_byteenable
	wire          key_s1_agent_m0_read;                                                       // KEY_s1_agent:m0_read -> KEY_s1_translator:uav_read
	wire          key_s1_agent_m0_readdatavalid;                                              // KEY_s1_translator:uav_readdatavalid -> KEY_s1_agent:m0_readdatavalid
	wire          key_s1_agent_m0_lock;                                                       // KEY_s1_agent:m0_lock -> KEY_s1_translator:uav_lock
	wire   [31:0] key_s1_agent_m0_writedata;                                                  // KEY_s1_agent:m0_writedata -> KEY_s1_translator:uav_writedata
	wire          key_s1_agent_m0_write;                                                      // KEY_s1_agent:m0_write -> KEY_s1_translator:uav_write
	wire    [2:0] key_s1_agent_m0_burstcount;                                                 // KEY_s1_agent:m0_burstcount -> KEY_s1_translator:uav_burstcount
	wire          key_s1_agent_rf_source_valid;                                               // KEY_s1_agent:rf_source_valid -> KEY_s1_agent_rsp_fifo:in_valid
	wire  [107:0] key_s1_agent_rf_source_data;                                                // KEY_s1_agent:rf_source_data -> KEY_s1_agent_rsp_fifo:in_data
	wire          key_s1_agent_rf_source_ready;                                               // KEY_s1_agent_rsp_fifo:in_ready -> KEY_s1_agent:rf_source_ready
	wire          key_s1_agent_rf_source_startofpacket;                                       // KEY_s1_agent:rf_source_startofpacket -> KEY_s1_agent_rsp_fifo:in_startofpacket
	wire          key_s1_agent_rf_source_endofpacket;                                         // KEY_s1_agent:rf_source_endofpacket -> KEY_s1_agent_rsp_fifo:in_endofpacket
	wire          key_s1_agent_rsp_fifo_out_valid;                                            // KEY_s1_agent_rsp_fifo:out_valid -> KEY_s1_agent:rf_sink_valid
	wire  [107:0] key_s1_agent_rsp_fifo_out_data;                                             // KEY_s1_agent_rsp_fifo:out_data -> KEY_s1_agent:rf_sink_data
	wire          key_s1_agent_rsp_fifo_out_ready;                                            // KEY_s1_agent:rf_sink_ready -> KEY_s1_agent_rsp_fifo:out_ready
	wire          key_s1_agent_rsp_fifo_out_startofpacket;                                    // KEY_s1_agent_rsp_fifo:out_startofpacket -> KEY_s1_agent:rf_sink_startofpacket
	wire          key_s1_agent_rsp_fifo_out_endofpacket;                                      // KEY_s1_agent_rsp_fifo:out_endofpacket -> KEY_s1_agent:rf_sink_endofpacket
	wire          key_s1_agent_rdata_fifo_src_valid;                                          // KEY_s1_agent:rdata_fifo_src_valid -> KEY_s1_agent_rdata_fifo:in_valid
	wire   [33:0] key_s1_agent_rdata_fifo_src_data;                                           // KEY_s1_agent:rdata_fifo_src_data -> KEY_s1_agent_rdata_fifo:in_data
	wire          key_s1_agent_rdata_fifo_src_ready;                                          // KEY_s1_agent_rdata_fifo:in_ready -> KEY_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_008_src_valid;                                                      // cmd_mux_008:src_valid -> KEY_s1_agent:cp_valid
	wire  [106:0] cmd_mux_008_src_data;                                                       // cmd_mux_008:src_data -> KEY_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                      // KEY_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [16:0] cmd_mux_008_src_channel;                                                    // cmd_mux_008:src_channel -> KEY_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                              // cmd_mux_008:src_startofpacket -> KEY_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                // cmd_mux_008:src_endofpacket -> KEY_s1_agent:cp_endofpacket
	wire   [31:0] lt24_touch_penirq_n_s1_agent_m0_readdata;                                   // LT24_TOUCH_PENIRQ_N_s1_translator:uav_readdata -> LT24_TOUCH_PENIRQ_N_s1_agent:m0_readdata
	wire          lt24_touch_penirq_n_s1_agent_m0_waitrequest;                                // LT24_TOUCH_PENIRQ_N_s1_translator:uav_waitrequest -> LT24_TOUCH_PENIRQ_N_s1_agent:m0_waitrequest
	wire          lt24_touch_penirq_n_s1_agent_m0_debugaccess;                                // LT24_TOUCH_PENIRQ_N_s1_agent:m0_debugaccess -> LT24_TOUCH_PENIRQ_N_s1_translator:uav_debugaccess
	wire   [26:0] lt24_touch_penirq_n_s1_agent_m0_address;                                    // LT24_TOUCH_PENIRQ_N_s1_agent:m0_address -> LT24_TOUCH_PENIRQ_N_s1_translator:uav_address
	wire    [3:0] lt24_touch_penirq_n_s1_agent_m0_byteenable;                                 // LT24_TOUCH_PENIRQ_N_s1_agent:m0_byteenable -> LT24_TOUCH_PENIRQ_N_s1_translator:uav_byteenable
	wire          lt24_touch_penirq_n_s1_agent_m0_read;                                       // LT24_TOUCH_PENIRQ_N_s1_agent:m0_read -> LT24_TOUCH_PENIRQ_N_s1_translator:uav_read
	wire          lt24_touch_penirq_n_s1_agent_m0_readdatavalid;                              // LT24_TOUCH_PENIRQ_N_s1_translator:uav_readdatavalid -> LT24_TOUCH_PENIRQ_N_s1_agent:m0_readdatavalid
	wire          lt24_touch_penirq_n_s1_agent_m0_lock;                                       // LT24_TOUCH_PENIRQ_N_s1_agent:m0_lock -> LT24_TOUCH_PENIRQ_N_s1_translator:uav_lock
	wire   [31:0] lt24_touch_penirq_n_s1_agent_m0_writedata;                                  // LT24_TOUCH_PENIRQ_N_s1_agent:m0_writedata -> LT24_TOUCH_PENIRQ_N_s1_translator:uav_writedata
	wire          lt24_touch_penirq_n_s1_agent_m0_write;                                      // LT24_TOUCH_PENIRQ_N_s1_agent:m0_write -> LT24_TOUCH_PENIRQ_N_s1_translator:uav_write
	wire    [2:0] lt24_touch_penirq_n_s1_agent_m0_burstcount;                                 // LT24_TOUCH_PENIRQ_N_s1_agent:m0_burstcount -> LT24_TOUCH_PENIRQ_N_s1_translator:uav_burstcount
	wire          lt24_touch_penirq_n_s1_agent_rf_source_valid;                               // LT24_TOUCH_PENIRQ_N_s1_agent:rf_source_valid -> LT24_TOUCH_PENIRQ_N_s1_agent_rsp_fifo:in_valid
	wire  [107:0] lt24_touch_penirq_n_s1_agent_rf_source_data;                                // LT24_TOUCH_PENIRQ_N_s1_agent:rf_source_data -> LT24_TOUCH_PENIRQ_N_s1_agent_rsp_fifo:in_data
	wire          lt24_touch_penirq_n_s1_agent_rf_source_ready;                               // LT24_TOUCH_PENIRQ_N_s1_agent_rsp_fifo:in_ready -> LT24_TOUCH_PENIRQ_N_s1_agent:rf_source_ready
	wire          lt24_touch_penirq_n_s1_agent_rf_source_startofpacket;                       // LT24_TOUCH_PENIRQ_N_s1_agent:rf_source_startofpacket -> LT24_TOUCH_PENIRQ_N_s1_agent_rsp_fifo:in_startofpacket
	wire          lt24_touch_penirq_n_s1_agent_rf_source_endofpacket;                         // LT24_TOUCH_PENIRQ_N_s1_agent:rf_source_endofpacket -> LT24_TOUCH_PENIRQ_N_s1_agent_rsp_fifo:in_endofpacket
	wire          lt24_touch_penirq_n_s1_agent_rsp_fifo_out_valid;                            // LT24_TOUCH_PENIRQ_N_s1_agent_rsp_fifo:out_valid -> LT24_TOUCH_PENIRQ_N_s1_agent:rf_sink_valid
	wire  [107:0] lt24_touch_penirq_n_s1_agent_rsp_fifo_out_data;                             // LT24_TOUCH_PENIRQ_N_s1_agent_rsp_fifo:out_data -> LT24_TOUCH_PENIRQ_N_s1_agent:rf_sink_data
	wire          lt24_touch_penirq_n_s1_agent_rsp_fifo_out_ready;                            // LT24_TOUCH_PENIRQ_N_s1_agent:rf_sink_ready -> LT24_TOUCH_PENIRQ_N_s1_agent_rsp_fifo:out_ready
	wire          lt24_touch_penirq_n_s1_agent_rsp_fifo_out_startofpacket;                    // LT24_TOUCH_PENIRQ_N_s1_agent_rsp_fifo:out_startofpacket -> LT24_TOUCH_PENIRQ_N_s1_agent:rf_sink_startofpacket
	wire          lt24_touch_penirq_n_s1_agent_rsp_fifo_out_endofpacket;                      // LT24_TOUCH_PENIRQ_N_s1_agent_rsp_fifo:out_endofpacket -> LT24_TOUCH_PENIRQ_N_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                      // cmd_mux_009:src_valid -> LT24_TOUCH_PENIRQ_N_s1_agent:cp_valid
	wire  [106:0] cmd_mux_009_src_data;                                                       // cmd_mux_009:src_data -> LT24_TOUCH_PENIRQ_N_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                      // LT24_TOUCH_PENIRQ_N_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [16:0] cmd_mux_009_src_channel;                                                    // cmd_mux_009:src_channel -> LT24_TOUCH_PENIRQ_N_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                              // cmd_mux_009:src_startofpacket -> LT24_TOUCH_PENIRQ_N_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                // cmd_mux_009:src_endofpacket -> LT24_TOUCH_PENIRQ_N_s1_agent:cp_endofpacket
	wire   [31:0] lt24_touch_busy_s1_agent_m0_readdata;                                       // LT24_TOUCH_BUSY_s1_translator:uav_readdata -> LT24_TOUCH_BUSY_s1_agent:m0_readdata
	wire          lt24_touch_busy_s1_agent_m0_waitrequest;                                    // LT24_TOUCH_BUSY_s1_translator:uav_waitrequest -> LT24_TOUCH_BUSY_s1_agent:m0_waitrequest
	wire          lt24_touch_busy_s1_agent_m0_debugaccess;                                    // LT24_TOUCH_BUSY_s1_agent:m0_debugaccess -> LT24_TOUCH_BUSY_s1_translator:uav_debugaccess
	wire   [26:0] lt24_touch_busy_s1_agent_m0_address;                                        // LT24_TOUCH_BUSY_s1_agent:m0_address -> LT24_TOUCH_BUSY_s1_translator:uav_address
	wire    [3:0] lt24_touch_busy_s1_agent_m0_byteenable;                                     // LT24_TOUCH_BUSY_s1_agent:m0_byteenable -> LT24_TOUCH_BUSY_s1_translator:uav_byteenable
	wire          lt24_touch_busy_s1_agent_m0_read;                                           // LT24_TOUCH_BUSY_s1_agent:m0_read -> LT24_TOUCH_BUSY_s1_translator:uav_read
	wire          lt24_touch_busy_s1_agent_m0_readdatavalid;                                  // LT24_TOUCH_BUSY_s1_translator:uav_readdatavalid -> LT24_TOUCH_BUSY_s1_agent:m0_readdatavalid
	wire          lt24_touch_busy_s1_agent_m0_lock;                                           // LT24_TOUCH_BUSY_s1_agent:m0_lock -> LT24_TOUCH_BUSY_s1_translator:uav_lock
	wire   [31:0] lt24_touch_busy_s1_agent_m0_writedata;                                      // LT24_TOUCH_BUSY_s1_agent:m0_writedata -> LT24_TOUCH_BUSY_s1_translator:uav_writedata
	wire          lt24_touch_busy_s1_agent_m0_write;                                          // LT24_TOUCH_BUSY_s1_agent:m0_write -> LT24_TOUCH_BUSY_s1_translator:uav_write
	wire    [2:0] lt24_touch_busy_s1_agent_m0_burstcount;                                     // LT24_TOUCH_BUSY_s1_agent:m0_burstcount -> LT24_TOUCH_BUSY_s1_translator:uav_burstcount
	wire          lt24_touch_busy_s1_agent_rf_source_valid;                                   // LT24_TOUCH_BUSY_s1_agent:rf_source_valid -> LT24_TOUCH_BUSY_s1_agent_rsp_fifo:in_valid
	wire  [107:0] lt24_touch_busy_s1_agent_rf_source_data;                                    // LT24_TOUCH_BUSY_s1_agent:rf_source_data -> LT24_TOUCH_BUSY_s1_agent_rsp_fifo:in_data
	wire          lt24_touch_busy_s1_agent_rf_source_ready;                                   // LT24_TOUCH_BUSY_s1_agent_rsp_fifo:in_ready -> LT24_TOUCH_BUSY_s1_agent:rf_source_ready
	wire          lt24_touch_busy_s1_agent_rf_source_startofpacket;                           // LT24_TOUCH_BUSY_s1_agent:rf_source_startofpacket -> LT24_TOUCH_BUSY_s1_agent_rsp_fifo:in_startofpacket
	wire          lt24_touch_busy_s1_agent_rf_source_endofpacket;                             // LT24_TOUCH_BUSY_s1_agent:rf_source_endofpacket -> LT24_TOUCH_BUSY_s1_agent_rsp_fifo:in_endofpacket
	wire          lt24_touch_busy_s1_agent_rsp_fifo_out_valid;                                // LT24_TOUCH_BUSY_s1_agent_rsp_fifo:out_valid -> LT24_TOUCH_BUSY_s1_agent:rf_sink_valid
	wire  [107:0] lt24_touch_busy_s1_agent_rsp_fifo_out_data;                                 // LT24_TOUCH_BUSY_s1_agent_rsp_fifo:out_data -> LT24_TOUCH_BUSY_s1_agent:rf_sink_data
	wire          lt24_touch_busy_s1_agent_rsp_fifo_out_ready;                                // LT24_TOUCH_BUSY_s1_agent:rf_sink_ready -> LT24_TOUCH_BUSY_s1_agent_rsp_fifo:out_ready
	wire          lt24_touch_busy_s1_agent_rsp_fifo_out_startofpacket;                        // LT24_TOUCH_BUSY_s1_agent_rsp_fifo:out_startofpacket -> LT24_TOUCH_BUSY_s1_agent:rf_sink_startofpacket
	wire          lt24_touch_busy_s1_agent_rsp_fifo_out_endofpacket;                          // LT24_TOUCH_BUSY_s1_agent_rsp_fifo:out_endofpacket -> LT24_TOUCH_BUSY_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                      // cmd_mux_010:src_valid -> LT24_TOUCH_BUSY_s1_agent:cp_valid
	wire  [106:0] cmd_mux_010_src_data;                                                       // cmd_mux_010:src_data -> LT24_TOUCH_BUSY_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                      // LT24_TOUCH_BUSY_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [16:0] cmd_mux_010_src_channel;                                                    // cmd_mux_010:src_channel -> LT24_TOUCH_BUSY_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                              // cmd_mux_010:src_startofpacket -> LT24_TOUCH_BUSY_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                // cmd_mux_010:src_endofpacket -> LT24_TOUCH_BUSY_s1_agent:cp_endofpacket
	wire   [15:0] pic_mem_s1_agent_m0_readdata;                                               // pic_mem_s1_translator:uav_readdata -> pic_mem_s1_agent:m0_readdata
	wire          pic_mem_s1_agent_m0_waitrequest;                                            // pic_mem_s1_translator:uav_waitrequest -> pic_mem_s1_agent:m0_waitrequest
	wire          pic_mem_s1_agent_m0_debugaccess;                                            // pic_mem_s1_agent:m0_debugaccess -> pic_mem_s1_translator:uav_debugaccess
	wire   [26:0] pic_mem_s1_agent_m0_address;                                                // pic_mem_s1_agent:m0_address -> pic_mem_s1_translator:uav_address
	wire    [1:0] pic_mem_s1_agent_m0_byteenable;                                             // pic_mem_s1_agent:m0_byteenable -> pic_mem_s1_translator:uav_byteenable
	wire          pic_mem_s1_agent_m0_read;                                                   // pic_mem_s1_agent:m0_read -> pic_mem_s1_translator:uav_read
	wire          pic_mem_s1_agent_m0_readdatavalid;                                          // pic_mem_s1_translator:uav_readdatavalid -> pic_mem_s1_agent:m0_readdatavalid
	wire          pic_mem_s1_agent_m0_lock;                                                   // pic_mem_s1_agent:m0_lock -> pic_mem_s1_translator:uav_lock
	wire   [15:0] pic_mem_s1_agent_m0_writedata;                                              // pic_mem_s1_agent:m0_writedata -> pic_mem_s1_translator:uav_writedata
	wire          pic_mem_s1_agent_m0_write;                                                  // pic_mem_s1_agent:m0_write -> pic_mem_s1_translator:uav_write
	wire    [1:0] pic_mem_s1_agent_m0_burstcount;                                             // pic_mem_s1_agent:m0_burstcount -> pic_mem_s1_translator:uav_burstcount
	wire          pic_mem_s1_agent_rf_source_valid;                                           // pic_mem_s1_agent:rf_source_valid -> pic_mem_s1_agent_rsp_fifo:in_valid
	wire   [89:0] pic_mem_s1_agent_rf_source_data;                                            // pic_mem_s1_agent:rf_source_data -> pic_mem_s1_agent_rsp_fifo:in_data
	wire          pic_mem_s1_agent_rf_source_ready;                                           // pic_mem_s1_agent_rsp_fifo:in_ready -> pic_mem_s1_agent:rf_source_ready
	wire          pic_mem_s1_agent_rf_source_startofpacket;                                   // pic_mem_s1_agent:rf_source_startofpacket -> pic_mem_s1_agent_rsp_fifo:in_startofpacket
	wire          pic_mem_s1_agent_rf_source_endofpacket;                                     // pic_mem_s1_agent:rf_source_endofpacket -> pic_mem_s1_agent_rsp_fifo:in_endofpacket
	wire          pic_mem_s1_agent_rsp_fifo_out_valid;                                        // pic_mem_s1_agent_rsp_fifo:out_valid -> pic_mem_s1_agent:rf_sink_valid
	wire   [89:0] pic_mem_s1_agent_rsp_fifo_out_data;                                         // pic_mem_s1_agent_rsp_fifo:out_data -> pic_mem_s1_agent:rf_sink_data
	wire          pic_mem_s1_agent_rsp_fifo_out_ready;                                        // pic_mem_s1_agent:rf_sink_ready -> pic_mem_s1_agent_rsp_fifo:out_ready
	wire          pic_mem_s1_agent_rsp_fifo_out_startofpacket;                                // pic_mem_s1_agent_rsp_fifo:out_startofpacket -> pic_mem_s1_agent:rf_sink_startofpacket
	wire          pic_mem_s1_agent_rsp_fifo_out_endofpacket;                                  // pic_mem_s1_agent_rsp_fifo:out_endofpacket -> pic_mem_s1_agent:rf_sink_endofpacket
	wire          pic_mem_s1_agent_rdata_fifo_src_valid;                                      // pic_mem_s1_agent:rdata_fifo_src_valid -> pic_mem_s1_agent_rdata_fifo:in_valid
	wire   [17:0] pic_mem_s1_agent_rdata_fifo_src_data;                                       // pic_mem_s1_agent:rdata_fifo_src_data -> pic_mem_s1_agent_rdata_fifo:in_data
	wire          pic_mem_s1_agent_rdata_fifo_src_ready;                                      // pic_mem_s1_agent_rdata_fifo:in_ready -> pic_mem_s1_agent:rdata_fifo_src_ready
	wire   [31:0] lt24_buffer_flag_s1_agent_m0_readdata;                                      // LT24_buffer_flag_s1_translator:uav_readdata -> LT24_buffer_flag_s1_agent:m0_readdata
	wire          lt24_buffer_flag_s1_agent_m0_waitrequest;                                   // LT24_buffer_flag_s1_translator:uav_waitrequest -> LT24_buffer_flag_s1_agent:m0_waitrequest
	wire          lt24_buffer_flag_s1_agent_m0_debugaccess;                                   // LT24_buffer_flag_s1_agent:m0_debugaccess -> LT24_buffer_flag_s1_translator:uav_debugaccess
	wire   [26:0] lt24_buffer_flag_s1_agent_m0_address;                                       // LT24_buffer_flag_s1_agent:m0_address -> LT24_buffer_flag_s1_translator:uav_address
	wire    [3:0] lt24_buffer_flag_s1_agent_m0_byteenable;                                    // LT24_buffer_flag_s1_agent:m0_byteenable -> LT24_buffer_flag_s1_translator:uav_byteenable
	wire          lt24_buffer_flag_s1_agent_m0_read;                                          // LT24_buffer_flag_s1_agent:m0_read -> LT24_buffer_flag_s1_translator:uav_read
	wire          lt24_buffer_flag_s1_agent_m0_readdatavalid;                                 // LT24_buffer_flag_s1_translator:uav_readdatavalid -> LT24_buffer_flag_s1_agent:m0_readdatavalid
	wire          lt24_buffer_flag_s1_agent_m0_lock;                                          // LT24_buffer_flag_s1_agent:m0_lock -> LT24_buffer_flag_s1_translator:uav_lock
	wire   [31:0] lt24_buffer_flag_s1_agent_m0_writedata;                                     // LT24_buffer_flag_s1_agent:m0_writedata -> LT24_buffer_flag_s1_translator:uav_writedata
	wire          lt24_buffer_flag_s1_agent_m0_write;                                         // LT24_buffer_flag_s1_agent:m0_write -> LT24_buffer_flag_s1_translator:uav_write
	wire    [2:0] lt24_buffer_flag_s1_agent_m0_burstcount;                                    // LT24_buffer_flag_s1_agent:m0_burstcount -> LT24_buffer_flag_s1_translator:uav_burstcount
	wire          lt24_buffer_flag_s1_agent_rf_source_valid;                                  // LT24_buffer_flag_s1_agent:rf_source_valid -> LT24_buffer_flag_s1_agent_rsp_fifo:in_valid
	wire  [107:0] lt24_buffer_flag_s1_agent_rf_source_data;                                   // LT24_buffer_flag_s1_agent:rf_source_data -> LT24_buffer_flag_s1_agent_rsp_fifo:in_data
	wire          lt24_buffer_flag_s1_agent_rf_source_ready;                                  // LT24_buffer_flag_s1_agent_rsp_fifo:in_ready -> LT24_buffer_flag_s1_agent:rf_source_ready
	wire          lt24_buffer_flag_s1_agent_rf_source_startofpacket;                          // LT24_buffer_flag_s1_agent:rf_source_startofpacket -> LT24_buffer_flag_s1_agent_rsp_fifo:in_startofpacket
	wire          lt24_buffer_flag_s1_agent_rf_source_endofpacket;                            // LT24_buffer_flag_s1_agent:rf_source_endofpacket -> LT24_buffer_flag_s1_agent_rsp_fifo:in_endofpacket
	wire          lt24_buffer_flag_s1_agent_rsp_fifo_out_valid;                               // LT24_buffer_flag_s1_agent_rsp_fifo:out_valid -> LT24_buffer_flag_s1_agent:rf_sink_valid
	wire  [107:0] lt24_buffer_flag_s1_agent_rsp_fifo_out_data;                                // LT24_buffer_flag_s1_agent_rsp_fifo:out_data -> LT24_buffer_flag_s1_agent:rf_sink_data
	wire          lt24_buffer_flag_s1_agent_rsp_fifo_out_ready;                               // LT24_buffer_flag_s1_agent:rf_sink_ready -> LT24_buffer_flag_s1_agent_rsp_fifo:out_ready
	wire          lt24_buffer_flag_s1_agent_rsp_fifo_out_startofpacket;                       // LT24_buffer_flag_s1_agent_rsp_fifo:out_startofpacket -> LT24_buffer_flag_s1_agent:rf_sink_startofpacket
	wire          lt24_buffer_flag_s1_agent_rsp_fifo_out_endofpacket;                         // LT24_buffer_flag_s1_agent_rsp_fifo:out_endofpacket -> LT24_buffer_flag_s1_agent:rf_sink_endofpacket
	wire          lt24_buffer_flag_s1_agent_rdata_fifo_src_valid;                             // LT24_buffer_flag_s1_agent:rdata_fifo_src_valid -> LT24_buffer_flag_s1_agent_rdata_fifo:in_valid
	wire   [33:0] lt24_buffer_flag_s1_agent_rdata_fifo_src_data;                              // LT24_buffer_flag_s1_agent:rdata_fifo_src_data -> LT24_buffer_flag_s1_agent_rdata_fifo:in_data
	wire          lt24_buffer_flag_s1_agent_rdata_fifo_src_ready;                             // LT24_buffer_flag_s1_agent_rdata_fifo:in_ready -> LT24_buffer_flag_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_012_src_valid;                                                      // cmd_mux_012:src_valid -> LT24_buffer_flag_s1_agent:cp_valid
	wire  [106:0] cmd_mux_012_src_data;                                                       // cmd_mux_012:src_data -> LT24_buffer_flag_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                      // LT24_buffer_flag_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [16:0] cmd_mux_012_src_channel;                                                    // cmd_mux_012:src_channel -> LT24_buffer_flag_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                              // cmd_mux_012:src_startofpacket -> LT24_buffer_flag_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                // cmd_mux_012:src_endofpacket -> LT24_buffer_flag_s1_agent:cp_endofpacket
	wire   [15:0] background_mem_s1_agent_m0_readdata;                                        // background_mem_s1_translator:uav_readdata -> background_mem_s1_agent:m0_readdata
	wire          background_mem_s1_agent_m0_waitrequest;                                     // background_mem_s1_translator:uav_waitrequest -> background_mem_s1_agent:m0_waitrequest
	wire          background_mem_s1_agent_m0_debugaccess;                                     // background_mem_s1_agent:m0_debugaccess -> background_mem_s1_translator:uav_debugaccess
	wire   [26:0] background_mem_s1_agent_m0_address;                                         // background_mem_s1_agent:m0_address -> background_mem_s1_translator:uav_address
	wire    [1:0] background_mem_s1_agent_m0_byteenable;                                      // background_mem_s1_agent:m0_byteenable -> background_mem_s1_translator:uav_byteenable
	wire          background_mem_s1_agent_m0_read;                                            // background_mem_s1_agent:m0_read -> background_mem_s1_translator:uav_read
	wire          background_mem_s1_agent_m0_readdatavalid;                                   // background_mem_s1_translator:uav_readdatavalid -> background_mem_s1_agent:m0_readdatavalid
	wire          background_mem_s1_agent_m0_lock;                                            // background_mem_s1_agent:m0_lock -> background_mem_s1_translator:uav_lock
	wire   [15:0] background_mem_s1_agent_m0_writedata;                                       // background_mem_s1_agent:m0_writedata -> background_mem_s1_translator:uav_writedata
	wire          background_mem_s1_agent_m0_write;                                           // background_mem_s1_agent:m0_write -> background_mem_s1_translator:uav_write
	wire    [1:0] background_mem_s1_agent_m0_burstcount;                                      // background_mem_s1_agent:m0_burstcount -> background_mem_s1_translator:uav_burstcount
	wire          background_mem_s1_agent_rf_source_valid;                                    // background_mem_s1_agent:rf_source_valid -> background_mem_s1_agent_rsp_fifo:in_valid
	wire   [89:0] background_mem_s1_agent_rf_source_data;                                     // background_mem_s1_agent:rf_source_data -> background_mem_s1_agent_rsp_fifo:in_data
	wire          background_mem_s1_agent_rf_source_ready;                                    // background_mem_s1_agent_rsp_fifo:in_ready -> background_mem_s1_agent:rf_source_ready
	wire          background_mem_s1_agent_rf_source_startofpacket;                            // background_mem_s1_agent:rf_source_startofpacket -> background_mem_s1_agent_rsp_fifo:in_startofpacket
	wire          background_mem_s1_agent_rf_source_endofpacket;                              // background_mem_s1_agent:rf_source_endofpacket -> background_mem_s1_agent_rsp_fifo:in_endofpacket
	wire          background_mem_s1_agent_rsp_fifo_out_valid;                                 // background_mem_s1_agent_rsp_fifo:out_valid -> background_mem_s1_agent:rf_sink_valid
	wire   [89:0] background_mem_s1_agent_rsp_fifo_out_data;                                  // background_mem_s1_agent_rsp_fifo:out_data -> background_mem_s1_agent:rf_sink_data
	wire          background_mem_s1_agent_rsp_fifo_out_ready;                                 // background_mem_s1_agent:rf_sink_ready -> background_mem_s1_agent_rsp_fifo:out_ready
	wire          background_mem_s1_agent_rsp_fifo_out_startofpacket;                         // background_mem_s1_agent_rsp_fifo:out_startofpacket -> background_mem_s1_agent:rf_sink_startofpacket
	wire          background_mem_s1_agent_rsp_fifo_out_endofpacket;                           // background_mem_s1_agent_rsp_fifo:out_endofpacket -> background_mem_s1_agent:rf_sink_endofpacket
	wire          background_mem_s1_agent_rdata_fifo_src_valid;                               // background_mem_s1_agent:rdata_fifo_src_valid -> background_mem_s1_agent_rdata_fifo:in_valid
	wire   [17:0] background_mem_s1_agent_rdata_fifo_src_data;                                // background_mem_s1_agent:rdata_fifo_src_data -> background_mem_s1_agent_rdata_fifo:in_data
	wire          background_mem_s1_agent_rdata_fifo_src_ready;                               // background_mem_s1_agent_rdata_fifo:in_ready -> background_mem_s1_agent:rdata_fifo_src_ready
	wire   [31:0] signal_out_s1_agent_m0_readdata;                                            // signal_out_s1_translator:uav_readdata -> signal_out_s1_agent:m0_readdata
	wire          signal_out_s1_agent_m0_waitrequest;                                         // signal_out_s1_translator:uav_waitrequest -> signal_out_s1_agent:m0_waitrequest
	wire          signal_out_s1_agent_m0_debugaccess;                                         // signal_out_s1_agent:m0_debugaccess -> signal_out_s1_translator:uav_debugaccess
	wire   [26:0] signal_out_s1_agent_m0_address;                                             // signal_out_s1_agent:m0_address -> signal_out_s1_translator:uav_address
	wire    [3:0] signal_out_s1_agent_m0_byteenable;                                          // signal_out_s1_agent:m0_byteenable -> signal_out_s1_translator:uav_byteenable
	wire          signal_out_s1_agent_m0_read;                                                // signal_out_s1_agent:m0_read -> signal_out_s1_translator:uav_read
	wire          signal_out_s1_agent_m0_readdatavalid;                                       // signal_out_s1_translator:uav_readdatavalid -> signal_out_s1_agent:m0_readdatavalid
	wire          signal_out_s1_agent_m0_lock;                                                // signal_out_s1_agent:m0_lock -> signal_out_s1_translator:uav_lock
	wire   [31:0] signal_out_s1_agent_m0_writedata;                                           // signal_out_s1_agent:m0_writedata -> signal_out_s1_translator:uav_writedata
	wire          signal_out_s1_agent_m0_write;                                               // signal_out_s1_agent:m0_write -> signal_out_s1_translator:uav_write
	wire    [2:0] signal_out_s1_agent_m0_burstcount;                                          // signal_out_s1_agent:m0_burstcount -> signal_out_s1_translator:uav_burstcount
	wire          signal_out_s1_agent_rf_source_valid;                                        // signal_out_s1_agent:rf_source_valid -> signal_out_s1_agent_rsp_fifo:in_valid
	wire  [107:0] signal_out_s1_agent_rf_source_data;                                         // signal_out_s1_agent:rf_source_data -> signal_out_s1_agent_rsp_fifo:in_data
	wire          signal_out_s1_agent_rf_source_ready;                                        // signal_out_s1_agent_rsp_fifo:in_ready -> signal_out_s1_agent:rf_source_ready
	wire          signal_out_s1_agent_rf_source_startofpacket;                                // signal_out_s1_agent:rf_source_startofpacket -> signal_out_s1_agent_rsp_fifo:in_startofpacket
	wire          signal_out_s1_agent_rf_source_endofpacket;                                  // signal_out_s1_agent:rf_source_endofpacket -> signal_out_s1_agent_rsp_fifo:in_endofpacket
	wire          signal_out_s1_agent_rsp_fifo_out_valid;                                     // signal_out_s1_agent_rsp_fifo:out_valid -> signal_out_s1_agent:rf_sink_valid
	wire  [107:0] signal_out_s1_agent_rsp_fifo_out_data;                                      // signal_out_s1_agent_rsp_fifo:out_data -> signal_out_s1_agent:rf_sink_data
	wire          signal_out_s1_agent_rsp_fifo_out_ready;                                     // signal_out_s1_agent:rf_sink_ready -> signal_out_s1_agent_rsp_fifo:out_ready
	wire          signal_out_s1_agent_rsp_fifo_out_startofpacket;                             // signal_out_s1_agent_rsp_fifo:out_startofpacket -> signal_out_s1_agent:rf_sink_startofpacket
	wire          signal_out_s1_agent_rsp_fifo_out_endofpacket;                               // signal_out_s1_agent_rsp_fifo:out_endofpacket -> signal_out_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                      // cmd_mux_014:src_valid -> signal_out_s1_agent:cp_valid
	wire  [106:0] cmd_mux_014_src_data;                                                       // cmd_mux_014:src_data -> signal_out_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                      // signal_out_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [16:0] cmd_mux_014_src_channel;                                                    // cmd_mux_014:src_channel -> signal_out_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                              // cmd_mux_014:src_startofpacket -> signal_out_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                // cmd_mux_014:src_endofpacket -> signal_out_s1_agent:cp_endofpacket
	wire   [31:0] lt24_lcd_rstn_s1_agent_m0_readdata;                                         // LT24_LCD_RSTN_s1_translator:uav_readdata -> LT24_LCD_RSTN_s1_agent:m0_readdata
	wire          lt24_lcd_rstn_s1_agent_m0_waitrequest;                                      // LT24_LCD_RSTN_s1_translator:uav_waitrequest -> LT24_LCD_RSTN_s1_agent:m0_waitrequest
	wire          lt24_lcd_rstn_s1_agent_m0_debugaccess;                                      // LT24_LCD_RSTN_s1_agent:m0_debugaccess -> LT24_LCD_RSTN_s1_translator:uav_debugaccess
	wire   [26:0] lt24_lcd_rstn_s1_agent_m0_address;                                          // LT24_LCD_RSTN_s1_agent:m0_address -> LT24_LCD_RSTN_s1_translator:uav_address
	wire    [3:0] lt24_lcd_rstn_s1_agent_m0_byteenable;                                       // LT24_LCD_RSTN_s1_agent:m0_byteenable -> LT24_LCD_RSTN_s1_translator:uav_byteenable
	wire          lt24_lcd_rstn_s1_agent_m0_read;                                             // LT24_LCD_RSTN_s1_agent:m0_read -> LT24_LCD_RSTN_s1_translator:uav_read
	wire          lt24_lcd_rstn_s1_agent_m0_readdatavalid;                                    // LT24_LCD_RSTN_s1_translator:uav_readdatavalid -> LT24_LCD_RSTN_s1_agent:m0_readdatavalid
	wire          lt24_lcd_rstn_s1_agent_m0_lock;                                             // LT24_LCD_RSTN_s1_agent:m0_lock -> LT24_LCD_RSTN_s1_translator:uav_lock
	wire   [31:0] lt24_lcd_rstn_s1_agent_m0_writedata;                                        // LT24_LCD_RSTN_s1_agent:m0_writedata -> LT24_LCD_RSTN_s1_translator:uav_writedata
	wire          lt24_lcd_rstn_s1_agent_m0_write;                                            // LT24_LCD_RSTN_s1_agent:m0_write -> LT24_LCD_RSTN_s1_translator:uav_write
	wire    [2:0] lt24_lcd_rstn_s1_agent_m0_burstcount;                                       // LT24_LCD_RSTN_s1_agent:m0_burstcount -> LT24_LCD_RSTN_s1_translator:uav_burstcount
	wire          lt24_lcd_rstn_s1_agent_rf_source_valid;                                     // LT24_LCD_RSTN_s1_agent:rf_source_valid -> LT24_LCD_RSTN_s1_agent_rsp_fifo:in_valid
	wire  [107:0] lt24_lcd_rstn_s1_agent_rf_source_data;                                      // LT24_LCD_RSTN_s1_agent:rf_source_data -> LT24_LCD_RSTN_s1_agent_rsp_fifo:in_data
	wire          lt24_lcd_rstn_s1_agent_rf_source_ready;                                     // LT24_LCD_RSTN_s1_agent_rsp_fifo:in_ready -> LT24_LCD_RSTN_s1_agent:rf_source_ready
	wire          lt24_lcd_rstn_s1_agent_rf_source_startofpacket;                             // LT24_LCD_RSTN_s1_agent:rf_source_startofpacket -> LT24_LCD_RSTN_s1_agent_rsp_fifo:in_startofpacket
	wire          lt24_lcd_rstn_s1_agent_rf_source_endofpacket;                               // LT24_LCD_RSTN_s1_agent:rf_source_endofpacket -> LT24_LCD_RSTN_s1_agent_rsp_fifo:in_endofpacket
	wire          lt24_lcd_rstn_s1_agent_rsp_fifo_out_valid;                                  // LT24_LCD_RSTN_s1_agent_rsp_fifo:out_valid -> LT24_LCD_RSTN_s1_agent:rf_sink_valid
	wire  [107:0] lt24_lcd_rstn_s1_agent_rsp_fifo_out_data;                                   // LT24_LCD_RSTN_s1_agent_rsp_fifo:out_data -> LT24_LCD_RSTN_s1_agent:rf_sink_data
	wire          lt24_lcd_rstn_s1_agent_rsp_fifo_out_ready;                                  // LT24_LCD_RSTN_s1_agent:rf_sink_ready -> LT24_LCD_RSTN_s1_agent_rsp_fifo:out_ready
	wire          lt24_lcd_rstn_s1_agent_rsp_fifo_out_startofpacket;                          // LT24_LCD_RSTN_s1_agent_rsp_fifo:out_startofpacket -> LT24_LCD_RSTN_s1_agent:rf_sink_startofpacket
	wire          lt24_lcd_rstn_s1_agent_rsp_fifo_out_endofpacket;                            // LT24_LCD_RSTN_s1_agent_rsp_fifo:out_endofpacket -> LT24_LCD_RSTN_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                      // cmd_mux_015:src_valid -> LT24_LCD_RSTN_s1_agent:cp_valid
	wire  [106:0] cmd_mux_015_src_data;                                                       // cmd_mux_015:src_data -> LT24_LCD_RSTN_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                      // LT24_LCD_RSTN_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [16:0] cmd_mux_015_src_channel;                                                    // cmd_mux_015:src_channel -> LT24_LCD_RSTN_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                              // cmd_mux_015:src_startofpacket -> LT24_LCD_RSTN_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                // cmd_mux_015:src_endofpacket -> LT24_LCD_RSTN_s1_agent:cp_endofpacket
	wire   [31:0] lt24_touch_spi_spi_control_port_agent_m0_readdata;                          // LT24_TOUCH_SPI_spi_control_port_translator:uav_readdata -> LT24_TOUCH_SPI_spi_control_port_agent:m0_readdata
	wire          lt24_touch_spi_spi_control_port_agent_m0_waitrequest;                       // LT24_TOUCH_SPI_spi_control_port_translator:uav_waitrequest -> LT24_TOUCH_SPI_spi_control_port_agent:m0_waitrequest
	wire          lt24_touch_spi_spi_control_port_agent_m0_debugaccess;                       // LT24_TOUCH_SPI_spi_control_port_agent:m0_debugaccess -> LT24_TOUCH_SPI_spi_control_port_translator:uav_debugaccess
	wire   [26:0] lt24_touch_spi_spi_control_port_agent_m0_address;                           // LT24_TOUCH_SPI_spi_control_port_agent:m0_address -> LT24_TOUCH_SPI_spi_control_port_translator:uav_address
	wire    [3:0] lt24_touch_spi_spi_control_port_agent_m0_byteenable;                        // LT24_TOUCH_SPI_spi_control_port_agent:m0_byteenable -> LT24_TOUCH_SPI_spi_control_port_translator:uav_byteenable
	wire          lt24_touch_spi_spi_control_port_agent_m0_read;                              // LT24_TOUCH_SPI_spi_control_port_agent:m0_read -> LT24_TOUCH_SPI_spi_control_port_translator:uav_read
	wire          lt24_touch_spi_spi_control_port_agent_m0_readdatavalid;                     // LT24_TOUCH_SPI_spi_control_port_translator:uav_readdatavalid -> LT24_TOUCH_SPI_spi_control_port_agent:m0_readdatavalid
	wire          lt24_touch_spi_spi_control_port_agent_m0_lock;                              // LT24_TOUCH_SPI_spi_control_port_agent:m0_lock -> LT24_TOUCH_SPI_spi_control_port_translator:uav_lock
	wire   [31:0] lt24_touch_spi_spi_control_port_agent_m0_writedata;                         // LT24_TOUCH_SPI_spi_control_port_agent:m0_writedata -> LT24_TOUCH_SPI_spi_control_port_translator:uav_writedata
	wire          lt24_touch_spi_spi_control_port_agent_m0_write;                             // LT24_TOUCH_SPI_spi_control_port_agent:m0_write -> LT24_TOUCH_SPI_spi_control_port_translator:uav_write
	wire    [2:0] lt24_touch_spi_spi_control_port_agent_m0_burstcount;                        // LT24_TOUCH_SPI_spi_control_port_agent:m0_burstcount -> LT24_TOUCH_SPI_spi_control_port_translator:uav_burstcount
	wire          lt24_touch_spi_spi_control_port_agent_rf_source_valid;                      // LT24_TOUCH_SPI_spi_control_port_agent:rf_source_valid -> LT24_TOUCH_SPI_spi_control_port_agent_rsp_fifo:in_valid
	wire  [107:0] lt24_touch_spi_spi_control_port_agent_rf_source_data;                       // LT24_TOUCH_SPI_spi_control_port_agent:rf_source_data -> LT24_TOUCH_SPI_spi_control_port_agent_rsp_fifo:in_data
	wire          lt24_touch_spi_spi_control_port_agent_rf_source_ready;                      // LT24_TOUCH_SPI_spi_control_port_agent_rsp_fifo:in_ready -> LT24_TOUCH_SPI_spi_control_port_agent:rf_source_ready
	wire          lt24_touch_spi_spi_control_port_agent_rf_source_startofpacket;              // LT24_TOUCH_SPI_spi_control_port_agent:rf_source_startofpacket -> LT24_TOUCH_SPI_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire          lt24_touch_spi_spi_control_port_agent_rf_source_endofpacket;                // LT24_TOUCH_SPI_spi_control_port_agent:rf_source_endofpacket -> LT24_TOUCH_SPI_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire          lt24_touch_spi_spi_control_port_agent_rsp_fifo_out_valid;                   // LT24_TOUCH_SPI_spi_control_port_agent_rsp_fifo:out_valid -> LT24_TOUCH_SPI_spi_control_port_agent:rf_sink_valid
	wire  [107:0] lt24_touch_spi_spi_control_port_agent_rsp_fifo_out_data;                    // LT24_TOUCH_SPI_spi_control_port_agent_rsp_fifo:out_data -> LT24_TOUCH_SPI_spi_control_port_agent:rf_sink_data
	wire          lt24_touch_spi_spi_control_port_agent_rsp_fifo_out_ready;                   // LT24_TOUCH_SPI_spi_control_port_agent:rf_sink_ready -> LT24_TOUCH_SPI_spi_control_port_agent_rsp_fifo:out_ready
	wire          lt24_touch_spi_spi_control_port_agent_rsp_fifo_out_startofpacket;           // LT24_TOUCH_SPI_spi_control_port_agent_rsp_fifo:out_startofpacket -> LT24_TOUCH_SPI_spi_control_port_agent:rf_sink_startofpacket
	wire          lt24_touch_spi_spi_control_port_agent_rsp_fifo_out_endofpacket;             // LT24_TOUCH_SPI_spi_control_port_agent_rsp_fifo:out_endofpacket -> LT24_TOUCH_SPI_spi_control_port_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                      // cmd_mux_016:src_valid -> LT24_TOUCH_SPI_spi_control_port_agent:cp_valid
	wire  [106:0] cmd_mux_016_src_data;                                                       // cmd_mux_016:src_data -> LT24_TOUCH_SPI_spi_control_port_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                      // LT24_TOUCH_SPI_spi_control_port_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [16:0] cmd_mux_016_src_channel;                                                    // cmd_mux_016:src_channel -> LT24_TOUCH_SPI_spi_control_port_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                              // cmd_mux_016:src_startofpacket -> LT24_TOUCH_SPI_spi_control_port_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                // cmd_mux_016:src_endofpacket -> LT24_TOUCH_SPI_spi_control_port_agent:cp_endofpacket
	wire          cpu_data_master_agent_cp_valid;                                             // CPU_data_master_agent:cp_valid -> router:sink_valid
	wire  [106:0] cpu_data_master_agent_cp_data;                                              // CPU_data_master_agent:cp_data -> router:sink_data
	wire          cpu_data_master_agent_cp_ready;                                             // router:sink_ready -> CPU_data_master_agent:cp_ready
	wire          cpu_data_master_agent_cp_startofpacket;                                     // CPU_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cpu_data_master_agent_cp_endofpacket;                                       // CPU_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          cpu_instruction_master_agent_cp_valid;                                      // CPU_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [106:0] cpu_instruction_master_agent_cp_data;                                       // CPU_instruction_master_agent:cp_data -> router_001:sink_data
	wire          cpu_instruction_master_agent_cp_ready;                                      // router_001:sink_ready -> CPU_instruction_master_agent:cp_ready
	wire          cpu_instruction_master_agent_cp_startofpacket;                              // CPU_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_instruction_master_agent_cp_endofpacket;                                // CPU_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                 // JTAG_UART_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [106:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                  // JTAG_UART_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                 // router_002:sink_ready -> JTAG_UART_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                         // JTAG_UART_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                           // JTAG_UART_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                       // router_002:src_valid -> rsp_demux:sink_valid
	wire  [106:0] router_002_src_data;                                                        // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                       // rsp_demux:sink_ready -> router_002:src_ready
	wire   [16:0] router_002_src_channel;                                                     // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                               // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                 // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          led_ctrl_avalon_slave_0_agent_rp_valid;                                     // LED_CTRL_avalon_slave_0_agent:rp_valid -> router_003:sink_valid
	wire  [106:0] led_ctrl_avalon_slave_0_agent_rp_data;                                      // LED_CTRL_avalon_slave_0_agent:rp_data -> router_003:sink_data
	wire          led_ctrl_avalon_slave_0_agent_rp_ready;                                     // router_003:sink_ready -> LED_CTRL_avalon_slave_0_agent:rp_ready
	wire          led_ctrl_avalon_slave_0_agent_rp_startofpacket;                             // LED_CTRL_avalon_slave_0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          led_ctrl_avalon_slave_0_agent_rp_endofpacket;                               // LED_CTRL_avalon_slave_0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                       // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [106:0] router_003_src_data;                                                        // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                       // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [16:0] router_003_src_channel;                                                     // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                               // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                 // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          lt24_ctrl_avalon_slave_0_agent_rp_valid;                                    // LT24_CTRL_avalon_slave_0_agent:rp_valid -> router_004:sink_valid
	wire  [106:0] lt24_ctrl_avalon_slave_0_agent_rp_data;                                     // LT24_CTRL_avalon_slave_0_agent:rp_data -> router_004:sink_data
	wire          lt24_ctrl_avalon_slave_0_agent_rp_ready;                                    // router_004:sink_ready -> LT24_CTRL_avalon_slave_0_agent:rp_ready
	wire          lt24_ctrl_avalon_slave_0_agent_rp_startofpacket;                            // LT24_CTRL_avalon_slave_0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          lt24_ctrl_avalon_slave_0_agent_rp_endofpacket;                              // LT24_CTRL_avalon_slave_0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                       // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [106:0] router_004_src_data;                                                        // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                       // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [16:0] router_004_src_channel;                                                     // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                               // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                 // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          cpu_debug_mem_slave_agent_rp_valid;                                         // CPU_debug_mem_slave_agent:rp_valid -> router_005:sink_valid
	wire  [106:0] cpu_debug_mem_slave_agent_rp_data;                                          // CPU_debug_mem_slave_agent:rp_data -> router_005:sink_data
	wire          cpu_debug_mem_slave_agent_rp_ready;                                         // router_005:sink_ready -> CPU_debug_mem_slave_agent:rp_ready
	wire          cpu_debug_mem_slave_agent_rp_startofpacket;                                 // CPU_debug_mem_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          cpu_debug_mem_slave_agent_rp_endofpacket;                                   // CPU_debug_mem_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                       // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [106:0] router_005_src_data;                                                        // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                       // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [16:0] router_005_src_channel;                                                     // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                               // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                 // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          epcs_flash_controller_0_epcs_control_port_agent_rp_valid;                   // epcs_flash_controller_0_epcs_control_port_agent:rp_valid -> router_006:sink_valid
	wire  [106:0] epcs_flash_controller_0_epcs_control_port_agent_rp_data;                    // epcs_flash_controller_0_epcs_control_port_agent:rp_data -> router_006:sink_data
	wire          epcs_flash_controller_0_epcs_control_port_agent_rp_ready;                   // router_006:sink_ready -> epcs_flash_controller_0_epcs_control_port_agent:rp_ready
	wire          epcs_flash_controller_0_epcs_control_port_agent_rp_startofpacket;           // epcs_flash_controller_0_epcs_control_port_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          epcs_flash_controller_0_epcs_control_port_agent_rp_endofpacket;             // epcs_flash_controller_0_epcs_control_port_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                       // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [106:0] router_006_src_data;                                                        // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                       // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [16:0] router_006_src_channel;                                                     // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                               // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                 // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          alt_pll_pll_slave_agent_rp_valid;                                           // ALT_PLL_pll_slave_agent:rp_valid -> router_007:sink_valid
	wire  [106:0] alt_pll_pll_slave_agent_rp_data;                                            // ALT_PLL_pll_slave_agent:rp_data -> router_007:sink_data
	wire          alt_pll_pll_slave_agent_rp_ready;                                           // router_007:sink_ready -> ALT_PLL_pll_slave_agent:rp_ready
	wire          alt_pll_pll_slave_agent_rp_startofpacket;                                   // ALT_PLL_pll_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          alt_pll_pll_slave_agent_rp_endofpacket;                                     // ALT_PLL_pll_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                       // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [106:0] router_007_src_data;                                                        // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                       // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [16:0] router_007_src_channel;                                                     // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                               // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                 // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                    // SDRAM_s1_agent:rp_valid -> router_008:sink_valid
	wire   [88:0] sdram_s1_agent_rp_data;                                                     // SDRAM_s1_agent:rp_data -> router_008:sink_data
	wire          sdram_s1_agent_rp_ready;                                                    // router_008:sink_ready -> SDRAM_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                            // SDRAM_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                              // SDRAM_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          timer_s1_agent_rp_valid;                                                    // TIMER_s1_agent:rp_valid -> router_009:sink_valid
	wire  [106:0] timer_s1_agent_rp_data;                                                     // TIMER_s1_agent:rp_data -> router_009:sink_data
	wire          timer_s1_agent_rp_ready;                                                    // router_009:sink_ready -> TIMER_s1_agent:rp_ready
	wire          timer_s1_agent_rp_startofpacket;                                            // TIMER_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          timer_s1_agent_rp_endofpacket;                                              // TIMER_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                       // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [106:0] router_009_src_data;                                                        // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                       // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [16:0] router_009_src_channel;                                                     // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                               // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                 // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          key_s1_agent_rp_valid;                                                      // KEY_s1_agent:rp_valid -> router_010:sink_valid
	wire  [106:0] key_s1_agent_rp_data;                                                       // KEY_s1_agent:rp_data -> router_010:sink_data
	wire          key_s1_agent_rp_ready;                                                      // router_010:sink_ready -> KEY_s1_agent:rp_ready
	wire          key_s1_agent_rp_startofpacket;                                              // KEY_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          key_s1_agent_rp_endofpacket;                                                // KEY_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                       // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [106:0] router_010_src_data;                                                        // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                       // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [16:0] router_010_src_channel;                                                     // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                               // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                 // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          lt24_touch_penirq_n_s1_agent_rp_valid;                                      // LT24_TOUCH_PENIRQ_N_s1_agent:rp_valid -> router_011:sink_valid
	wire  [106:0] lt24_touch_penirq_n_s1_agent_rp_data;                                       // LT24_TOUCH_PENIRQ_N_s1_agent:rp_data -> router_011:sink_data
	wire          lt24_touch_penirq_n_s1_agent_rp_ready;                                      // router_011:sink_ready -> LT24_TOUCH_PENIRQ_N_s1_agent:rp_ready
	wire          lt24_touch_penirq_n_s1_agent_rp_startofpacket;                              // LT24_TOUCH_PENIRQ_N_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          lt24_touch_penirq_n_s1_agent_rp_endofpacket;                                // LT24_TOUCH_PENIRQ_N_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                       // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [106:0] router_011_src_data;                                                        // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                       // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [16:0] router_011_src_channel;                                                     // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                               // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                 // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          lt24_touch_busy_s1_agent_rp_valid;                                          // LT24_TOUCH_BUSY_s1_agent:rp_valid -> router_012:sink_valid
	wire  [106:0] lt24_touch_busy_s1_agent_rp_data;                                           // LT24_TOUCH_BUSY_s1_agent:rp_data -> router_012:sink_data
	wire          lt24_touch_busy_s1_agent_rp_ready;                                          // router_012:sink_ready -> LT24_TOUCH_BUSY_s1_agent:rp_ready
	wire          lt24_touch_busy_s1_agent_rp_startofpacket;                                  // LT24_TOUCH_BUSY_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          lt24_touch_busy_s1_agent_rp_endofpacket;                                    // LT24_TOUCH_BUSY_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                       // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [106:0] router_012_src_data;                                                        // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                       // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [16:0] router_012_src_channel;                                                     // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                               // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                 // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          pic_mem_s1_agent_rp_valid;                                                  // pic_mem_s1_agent:rp_valid -> router_013:sink_valid
	wire   [88:0] pic_mem_s1_agent_rp_data;                                                   // pic_mem_s1_agent:rp_data -> router_013:sink_data
	wire          pic_mem_s1_agent_rp_ready;                                                  // router_013:sink_ready -> pic_mem_s1_agent:rp_ready
	wire          pic_mem_s1_agent_rp_startofpacket;                                          // pic_mem_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          pic_mem_s1_agent_rp_endofpacket;                                            // pic_mem_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          lt24_buffer_flag_s1_agent_rp_valid;                                         // LT24_buffer_flag_s1_agent:rp_valid -> router_014:sink_valid
	wire  [106:0] lt24_buffer_flag_s1_agent_rp_data;                                          // LT24_buffer_flag_s1_agent:rp_data -> router_014:sink_data
	wire          lt24_buffer_flag_s1_agent_rp_ready;                                         // router_014:sink_ready -> LT24_buffer_flag_s1_agent:rp_ready
	wire          lt24_buffer_flag_s1_agent_rp_startofpacket;                                 // LT24_buffer_flag_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          lt24_buffer_flag_s1_agent_rp_endofpacket;                                   // LT24_buffer_flag_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                       // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [106:0] router_014_src_data;                                                        // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                       // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [16:0] router_014_src_channel;                                                     // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                               // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                                 // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          background_mem_s1_agent_rp_valid;                                           // background_mem_s1_agent:rp_valid -> router_015:sink_valid
	wire   [88:0] background_mem_s1_agent_rp_data;                                            // background_mem_s1_agent:rp_data -> router_015:sink_data
	wire          background_mem_s1_agent_rp_ready;                                           // router_015:sink_ready -> background_mem_s1_agent:rp_ready
	wire          background_mem_s1_agent_rp_startofpacket;                                   // background_mem_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          background_mem_s1_agent_rp_endofpacket;                                     // background_mem_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          signal_out_s1_agent_rp_valid;                                               // signal_out_s1_agent:rp_valid -> router_016:sink_valid
	wire  [106:0] signal_out_s1_agent_rp_data;                                                // signal_out_s1_agent:rp_data -> router_016:sink_data
	wire          signal_out_s1_agent_rp_ready;                                               // router_016:sink_ready -> signal_out_s1_agent:rp_ready
	wire          signal_out_s1_agent_rp_startofpacket;                                       // signal_out_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          signal_out_s1_agent_rp_endofpacket;                                         // signal_out_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                       // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [106:0] router_016_src_data;                                                        // router_016:src_data -> rsp_demux_014:sink_data
	wire          router_016_src_ready;                                                       // rsp_demux_014:sink_ready -> router_016:src_ready
	wire   [16:0] router_016_src_channel;                                                     // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_startofpacket;                                               // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_016_src_endofpacket;                                                 // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          lt24_lcd_rstn_s1_agent_rp_valid;                                            // LT24_LCD_RSTN_s1_agent:rp_valid -> router_017:sink_valid
	wire  [106:0] lt24_lcd_rstn_s1_agent_rp_data;                                             // LT24_LCD_RSTN_s1_agent:rp_data -> router_017:sink_data
	wire          lt24_lcd_rstn_s1_agent_rp_ready;                                            // router_017:sink_ready -> LT24_LCD_RSTN_s1_agent:rp_ready
	wire          lt24_lcd_rstn_s1_agent_rp_startofpacket;                                    // LT24_LCD_RSTN_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          lt24_lcd_rstn_s1_agent_rp_endofpacket;                                      // LT24_LCD_RSTN_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                       // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [106:0] router_017_src_data;                                                        // router_017:src_data -> rsp_demux_015:sink_data
	wire          router_017_src_ready;                                                       // rsp_demux_015:sink_ready -> router_017:src_ready
	wire   [16:0] router_017_src_channel;                                                     // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_startofpacket;                                               // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_017_src_endofpacket;                                                 // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          lt24_touch_spi_spi_control_port_agent_rp_valid;                             // LT24_TOUCH_SPI_spi_control_port_agent:rp_valid -> router_018:sink_valid
	wire  [106:0] lt24_touch_spi_spi_control_port_agent_rp_data;                              // LT24_TOUCH_SPI_spi_control_port_agent:rp_data -> router_018:sink_data
	wire          lt24_touch_spi_spi_control_port_agent_rp_ready;                             // router_018:sink_ready -> LT24_TOUCH_SPI_spi_control_port_agent:rp_ready
	wire          lt24_touch_spi_spi_control_port_agent_rp_startofpacket;                     // LT24_TOUCH_SPI_spi_control_port_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          lt24_touch_spi_spi_control_port_agent_rp_endofpacket;                       // LT24_TOUCH_SPI_spi_control_port_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                       // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [106:0] router_018_src_data;                                                        // router_018:src_data -> rsp_demux_016:sink_data
	wire          router_018_src_ready;                                                       // rsp_demux_016:sink_ready -> router_018:src_ready
	wire   [16:0] router_018_src_channel;                                                     // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_startofpacket;                                               // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_018_src_endofpacket;                                                 // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          router_src_valid;                                                           // router:src_valid -> CPU_data_master_limiter:cmd_sink_valid
	wire  [106:0] router_src_data;                                                            // router:src_data -> CPU_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                           // CPU_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [16:0] router_src_channel;                                                         // router:src_channel -> CPU_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                   // router:src_startofpacket -> CPU_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                     // router:src_endofpacket -> CPU_data_master_limiter:cmd_sink_endofpacket
	wire  [106:0] cpu_data_master_limiter_cmd_src_data;                                       // CPU_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          cpu_data_master_limiter_cmd_src_ready;                                      // cmd_demux:sink_ready -> CPU_data_master_limiter:cmd_src_ready
	wire   [16:0] cpu_data_master_limiter_cmd_src_channel;                                    // CPU_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          cpu_data_master_limiter_cmd_src_startofpacket;                              // CPU_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          cpu_data_master_limiter_cmd_src_endofpacket;                                // CPU_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                          // rsp_mux:src_valid -> CPU_data_master_limiter:rsp_sink_valid
	wire  [106:0] rsp_mux_src_data;                                                           // rsp_mux:src_data -> CPU_data_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                          // CPU_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [16:0] rsp_mux_src_channel;                                                        // rsp_mux:src_channel -> CPU_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                  // rsp_mux:src_startofpacket -> CPU_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                    // rsp_mux:src_endofpacket -> CPU_data_master_limiter:rsp_sink_endofpacket
	wire          cpu_data_master_limiter_rsp_src_valid;                                      // CPU_data_master_limiter:rsp_src_valid -> CPU_data_master_agent:rp_valid
	wire  [106:0] cpu_data_master_limiter_rsp_src_data;                                       // CPU_data_master_limiter:rsp_src_data -> CPU_data_master_agent:rp_data
	wire          cpu_data_master_limiter_rsp_src_ready;                                      // CPU_data_master_agent:rp_ready -> CPU_data_master_limiter:rsp_src_ready
	wire   [16:0] cpu_data_master_limiter_rsp_src_channel;                                    // CPU_data_master_limiter:rsp_src_channel -> CPU_data_master_agent:rp_channel
	wire          cpu_data_master_limiter_rsp_src_startofpacket;                              // CPU_data_master_limiter:rsp_src_startofpacket -> CPU_data_master_agent:rp_startofpacket
	wire          cpu_data_master_limiter_rsp_src_endofpacket;                                // CPU_data_master_limiter:rsp_src_endofpacket -> CPU_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                       // router_001:src_valid -> CPU_instruction_master_limiter:cmd_sink_valid
	wire  [106:0] router_001_src_data;                                                        // router_001:src_data -> CPU_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                       // CPU_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [16:0] router_001_src_channel;                                                     // router_001:src_channel -> CPU_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                               // router_001:src_startofpacket -> CPU_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                 // router_001:src_endofpacket -> CPU_instruction_master_limiter:cmd_sink_endofpacket
	wire  [106:0] cpu_instruction_master_limiter_cmd_src_data;                                // CPU_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          cpu_instruction_master_limiter_cmd_src_ready;                               // cmd_demux_001:sink_ready -> CPU_instruction_master_limiter:cmd_src_ready
	wire   [16:0] cpu_instruction_master_limiter_cmd_src_channel;                             // CPU_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          cpu_instruction_master_limiter_cmd_src_startofpacket;                       // CPU_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          cpu_instruction_master_limiter_cmd_src_endofpacket;                         // CPU_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                      // rsp_mux_001:src_valid -> CPU_instruction_master_limiter:rsp_sink_valid
	wire  [106:0] rsp_mux_001_src_data;                                                       // rsp_mux_001:src_data -> CPU_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                      // CPU_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [16:0] rsp_mux_001_src_channel;                                                    // rsp_mux_001:src_channel -> CPU_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                              // rsp_mux_001:src_startofpacket -> CPU_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                // rsp_mux_001:src_endofpacket -> CPU_instruction_master_limiter:rsp_sink_endofpacket
	wire          cpu_instruction_master_limiter_rsp_src_valid;                               // CPU_instruction_master_limiter:rsp_src_valid -> CPU_instruction_master_agent:rp_valid
	wire  [106:0] cpu_instruction_master_limiter_rsp_src_data;                                // CPU_instruction_master_limiter:rsp_src_data -> CPU_instruction_master_agent:rp_data
	wire          cpu_instruction_master_limiter_rsp_src_ready;                               // CPU_instruction_master_agent:rp_ready -> CPU_instruction_master_limiter:rsp_src_ready
	wire   [16:0] cpu_instruction_master_limiter_rsp_src_channel;                             // CPU_instruction_master_limiter:rsp_src_channel -> CPU_instruction_master_agent:rp_channel
	wire          cpu_instruction_master_limiter_rsp_src_startofpacket;                       // CPU_instruction_master_limiter:rsp_src_startofpacket -> CPU_instruction_master_agent:rp_startofpacket
	wire          cpu_instruction_master_limiter_rsp_src_endofpacket;                         // CPU_instruction_master_limiter:rsp_src_endofpacket -> CPU_instruction_master_agent:rp_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                       // SDRAM_s1_burst_adapter:source0_valid -> SDRAM_s1_agent:cp_valid
	wire   [88:0] sdram_s1_burst_adapter_source0_data;                                        // SDRAM_s1_burst_adapter:source0_data -> SDRAM_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                       // SDRAM_s1_agent:cp_ready -> SDRAM_s1_burst_adapter:source0_ready
	wire   [16:0] sdram_s1_burst_adapter_source0_channel;                                     // SDRAM_s1_burst_adapter:source0_channel -> SDRAM_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                               // SDRAM_s1_burst_adapter:source0_startofpacket -> SDRAM_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                 // SDRAM_s1_burst_adapter:source0_endofpacket -> SDRAM_s1_agent:cp_endofpacket
	wire          pic_mem_s1_burst_adapter_source0_valid;                                     // pic_mem_s1_burst_adapter:source0_valid -> pic_mem_s1_agent:cp_valid
	wire   [88:0] pic_mem_s1_burst_adapter_source0_data;                                      // pic_mem_s1_burst_adapter:source0_data -> pic_mem_s1_agent:cp_data
	wire          pic_mem_s1_burst_adapter_source0_ready;                                     // pic_mem_s1_agent:cp_ready -> pic_mem_s1_burst_adapter:source0_ready
	wire   [16:0] pic_mem_s1_burst_adapter_source0_channel;                                   // pic_mem_s1_burst_adapter:source0_channel -> pic_mem_s1_agent:cp_channel
	wire          pic_mem_s1_burst_adapter_source0_startofpacket;                             // pic_mem_s1_burst_adapter:source0_startofpacket -> pic_mem_s1_agent:cp_startofpacket
	wire          pic_mem_s1_burst_adapter_source0_endofpacket;                               // pic_mem_s1_burst_adapter:source0_endofpacket -> pic_mem_s1_agent:cp_endofpacket
	wire          background_mem_s1_burst_adapter_source0_valid;                              // background_mem_s1_burst_adapter:source0_valid -> background_mem_s1_agent:cp_valid
	wire   [88:0] background_mem_s1_burst_adapter_source0_data;                               // background_mem_s1_burst_adapter:source0_data -> background_mem_s1_agent:cp_data
	wire          background_mem_s1_burst_adapter_source0_ready;                              // background_mem_s1_agent:cp_ready -> background_mem_s1_burst_adapter:source0_ready
	wire   [16:0] background_mem_s1_burst_adapter_source0_channel;                            // background_mem_s1_burst_adapter:source0_channel -> background_mem_s1_agent:cp_channel
	wire          background_mem_s1_burst_adapter_source0_startofpacket;                      // background_mem_s1_burst_adapter:source0_startofpacket -> background_mem_s1_agent:cp_startofpacket
	wire          background_mem_s1_burst_adapter_source0_endofpacket;                        // background_mem_s1_burst_adapter:source0_endofpacket -> background_mem_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                       // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [106:0] cmd_demux_src0_data;                                                        // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                       // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [16:0] cmd_demux_src0_channel;                                                     // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                               // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                 // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                       // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [106:0] cmd_demux_src2_data;                                                        // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                       // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [16:0] cmd_demux_src2_channel;                                                     // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                               // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                 // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                       // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [106:0] cmd_demux_src3_data;                                                        // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                       // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [16:0] cmd_demux_src3_channel;                                                     // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                               // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                 // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                       // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [106:0] cmd_demux_src6_data;                                                        // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                       // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [16:0] cmd_demux_src6_channel;                                                     // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                               // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                 // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                       // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [106:0] cmd_demux_src9_data;                                                        // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                       // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [16:0] cmd_demux_src9_channel;                                                     // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                               // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                 // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                      // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [106:0] cmd_demux_src10_data;                                                       // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                      // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [16:0] cmd_demux_src10_channel;                                                    // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                              // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                      // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [106:0] cmd_demux_src14_data;                                                       // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                      // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [16:0] cmd_demux_src14_channel;                                                    // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                              // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                      // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [106:0] cmd_demux_src15_data;                                                       // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                      // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [16:0] cmd_demux_src15_channel;                                                    // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                              // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                      // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [106:0] cmd_demux_src16_data;                                                       // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                      // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [16:0] cmd_demux_src16_channel;                                                    // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                              // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                   // cmd_demux_001:src0_valid -> cmd_mux_003:sink1_valid
	wire  [106:0] cmd_demux_001_src0_data;                                                    // cmd_demux_001:src0_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src0_ready;                                                   // cmd_mux_003:sink1_ready -> cmd_demux_001:src0_ready
	wire   [16:0] cmd_demux_001_src0_channel;                                                 // cmd_demux_001:src0_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                           // cmd_demux_001:src0_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                             // cmd_demux_001:src0_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                   // cmd_demux_001:src2_valid -> cmd_mux_006:sink1_valid
	wire  [106:0] cmd_demux_001_src2_data;                                                    // cmd_demux_001:src2_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src2_ready;                                                   // cmd_mux_006:sink1_ready -> cmd_demux_001:src2_ready
	wire   [16:0] cmd_demux_001_src2_channel;                                                 // cmd_demux_001:src2_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                           // cmd_demux_001:src2_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                             // cmd_demux_001:src2_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                       // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [106:0] rsp_demux_src0_data;                                                        // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                       // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [16:0] rsp_demux_src0_channel;                                                     // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                               // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                 // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                   // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [106:0] rsp_demux_002_src0_data;                                                    // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                   // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [16:0] rsp_demux_002_src0_channel;                                                 // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                           // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                             // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                   // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [106:0] rsp_demux_003_src0_data;                                                    // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                   // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [16:0] rsp_demux_003_src0_channel;                                                 // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                           // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                             // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                   // rsp_demux_003:src1_valid -> rsp_mux_001:sink0_valid
	wire  [106:0] rsp_demux_003_src1_data;                                                    // rsp_demux_003:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_003_src1_ready;                                                   // rsp_mux_001:sink0_ready -> rsp_demux_003:src1_ready
	wire   [16:0] rsp_demux_003_src1_channel;                                                 // rsp_demux_003:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_003_src1_startofpacket;                                           // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                             // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_006_src0_valid;                                                   // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [106:0] rsp_demux_006_src0_data;                                                    // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                   // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [16:0] rsp_demux_006_src0_channel;                                                 // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                           // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                             // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                   // rsp_demux_006:src1_valid -> rsp_mux_001:sink2_valid
	wire  [106:0] rsp_demux_006_src1_data;                                                    // rsp_demux_006:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_006_src1_ready;                                                   // rsp_mux_001:sink2_ready -> rsp_demux_006:src1_ready
	wire   [16:0] rsp_demux_006_src1_channel;                                                 // rsp_demux_006:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_006_src1_startofpacket;                                           // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                             // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_009_src0_valid;                                                   // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [106:0] rsp_demux_009_src0_data;                                                    // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                   // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [16:0] rsp_demux_009_src0_channel;                                                 // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                           // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                             // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                   // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [106:0] rsp_demux_010_src0_data;                                                    // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                   // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [16:0] rsp_demux_010_src0_channel;                                                 // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                           // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                             // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_014_src0_valid;                                                   // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [106:0] rsp_demux_014_src0_data;                                                    // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                   // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [16:0] rsp_demux_014_src0_channel;                                                 // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                           // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                             // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                   // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [106:0] rsp_demux_015_src0_data;                                                    // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                   // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [16:0] rsp_demux_015_src0_channel;                                                 // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                           // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                             // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                   // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [106:0] rsp_demux_016_src0_data;                                                    // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                   // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [16:0] rsp_demux_016_src0_channel;                                                 // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                           // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                             // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          router_008_src_valid;                                                       // router_008:src_valid -> SDRAM_s1_rsp_width_adapter:in_valid
	wire   [88:0] router_008_src_data;                                                        // router_008:src_data -> SDRAM_s1_rsp_width_adapter:in_data
	wire          router_008_src_ready;                                                       // SDRAM_s1_rsp_width_adapter:in_ready -> router_008:src_ready
	wire   [16:0] router_008_src_channel;                                                     // router_008:src_channel -> SDRAM_s1_rsp_width_adapter:in_channel
	wire          router_008_src_startofpacket;                                               // router_008:src_startofpacket -> SDRAM_s1_rsp_width_adapter:in_startofpacket
	wire          router_008_src_endofpacket;                                                 // router_008:src_endofpacket -> SDRAM_s1_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_rsp_width_adapter_src_valid;                                       // SDRAM_s1_rsp_width_adapter:out_valid -> rsp_demux_006:sink_valid
	wire  [106:0] sdram_s1_rsp_width_adapter_src_data;                                        // SDRAM_s1_rsp_width_adapter:out_data -> rsp_demux_006:sink_data
	wire          sdram_s1_rsp_width_adapter_src_ready;                                       // rsp_demux_006:sink_ready -> SDRAM_s1_rsp_width_adapter:out_ready
	wire   [16:0] sdram_s1_rsp_width_adapter_src_channel;                                     // SDRAM_s1_rsp_width_adapter:out_channel -> rsp_demux_006:sink_channel
	wire          sdram_s1_rsp_width_adapter_src_startofpacket;                               // SDRAM_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          sdram_s1_rsp_width_adapter_src_endofpacket;                                 // SDRAM_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_013_src_valid;                                                       // router_013:src_valid -> pic_mem_s1_rsp_width_adapter:in_valid
	wire   [88:0] router_013_src_data;                                                        // router_013:src_data -> pic_mem_s1_rsp_width_adapter:in_data
	wire          router_013_src_ready;                                                       // pic_mem_s1_rsp_width_adapter:in_ready -> router_013:src_ready
	wire   [16:0] router_013_src_channel;                                                     // router_013:src_channel -> pic_mem_s1_rsp_width_adapter:in_channel
	wire          router_013_src_startofpacket;                                               // router_013:src_startofpacket -> pic_mem_s1_rsp_width_adapter:in_startofpacket
	wire          router_013_src_endofpacket;                                                 // router_013:src_endofpacket -> pic_mem_s1_rsp_width_adapter:in_endofpacket
	wire          pic_mem_s1_rsp_width_adapter_src_valid;                                     // pic_mem_s1_rsp_width_adapter:out_valid -> rsp_demux_011:sink_valid
	wire  [106:0] pic_mem_s1_rsp_width_adapter_src_data;                                      // pic_mem_s1_rsp_width_adapter:out_data -> rsp_demux_011:sink_data
	wire          pic_mem_s1_rsp_width_adapter_src_ready;                                     // rsp_demux_011:sink_ready -> pic_mem_s1_rsp_width_adapter:out_ready
	wire   [16:0] pic_mem_s1_rsp_width_adapter_src_channel;                                   // pic_mem_s1_rsp_width_adapter:out_channel -> rsp_demux_011:sink_channel
	wire          pic_mem_s1_rsp_width_adapter_src_startofpacket;                             // pic_mem_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          pic_mem_s1_rsp_width_adapter_src_endofpacket;                               // pic_mem_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_015_src_valid;                                                       // router_015:src_valid -> background_mem_s1_rsp_width_adapter:in_valid
	wire   [88:0] router_015_src_data;                                                        // router_015:src_data -> background_mem_s1_rsp_width_adapter:in_data
	wire          router_015_src_ready;                                                       // background_mem_s1_rsp_width_adapter:in_ready -> router_015:src_ready
	wire   [16:0] router_015_src_channel;                                                     // router_015:src_channel -> background_mem_s1_rsp_width_adapter:in_channel
	wire          router_015_src_startofpacket;                                               // router_015:src_startofpacket -> background_mem_s1_rsp_width_adapter:in_startofpacket
	wire          router_015_src_endofpacket;                                                 // router_015:src_endofpacket -> background_mem_s1_rsp_width_adapter:in_endofpacket
	wire          background_mem_s1_rsp_width_adapter_src_valid;                              // background_mem_s1_rsp_width_adapter:out_valid -> rsp_demux_013:sink_valid
	wire  [106:0] background_mem_s1_rsp_width_adapter_src_data;                               // background_mem_s1_rsp_width_adapter:out_data -> rsp_demux_013:sink_data
	wire          background_mem_s1_rsp_width_adapter_src_ready;                              // rsp_demux_013:sink_ready -> background_mem_s1_rsp_width_adapter:out_ready
	wire   [16:0] background_mem_s1_rsp_width_adapter_src_channel;                            // background_mem_s1_rsp_width_adapter:out_channel -> rsp_demux_013:sink_channel
	wire          background_mem_s1_rsp_width_adapter_src_startofpacket;                      // background_mem_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          background_mem_s1_rsp_width_adapter_src_endofpacket;                        // background_mem_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                      // cmd_mux_006:src_valid -> SDRAM_s1_cmd_width_adapter:in_valid
	wire  [106:0] cmd_mux_006_src_data;                                                       // cmd_mux_006:src_data -> SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_mux_006_src_ready;                                                      // SDRAM_s1_cmd_width_adapter:in_ready -> cmd_mux_006:src_ready
	wire   [16:0] cmd_mux_006_src_channel;                                                    // cmd_mux_006:src_channel -> SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_006_src_startofpacket;                                              // cmd_mux_006:src_startofpacket -> SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                // cmd_mux_006:src_endofpacket -> SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          sdram_s1_cmd_width_adapter_src_valid;                                       // SDRAM_s1_cmd_width_adapter:out_valid -> SDRAM_s1_burst_adapter:sink0_valid
	wire   [88:0] sdram_s1_cmd_width_adapter_src_data;                                        // SDRAM_s1_cmd_width_adapter:out_data -> SDRAM_s1_burst_adapter:sink0_data
	wire          sdram_s1_cmd_width_adapter_src_ready;                                       // SDRAM_s1_burst_adapter:sink0_ready -> SDRAM_s1_cmd_width_adapter:out_ready
	wire   [16:0] sdram_s1_cmd_width_adapter_src_channel;                                     // SDRAM_s1_cmd_width_adapter:out_channel -> SDRAM_s1_burst_adapter:sink0_channel
	wire          sdram_s1_cmd_width_adapter_src_startofpacket;                               // SDRAM_s1_cmd_width_adapter:out_startofpacket -> SDRAM_s1_burst_adapter:sink0_startofpacket
	wire          sdram_s1_cmd_width_adapter_src_endofpacket;                                 // SDRAM_s1_cmd_width_adapter:out_endofpacket -> SDRAM_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_011_src_valid;                                                      // cmd_mux_011:src_valid -> pic_mem_s1_cmd_width_adapter:in_valid
	wire  [106:0] cmd_mux_011_src_data;                                                       // cmd_mux_011:src_data -> pic_mem_s1_cmd_width_adapter:in_data
	wire          cmd_mux_011_src_ready;                                                      // pic_mem_s1_cmd_width_adapter:in_ready -> cmd_mux_011:src_ready
	wire   [16:0] cmd_mux_011_src_channel;                                                    // cmd_mux_011:src_channel -> pic_mem_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_011_src_startofpacket;                                              // cmd_mux_011:src_startofpacket -> pic_mem_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                // cmd_mux_011:src_endofpacket -> pic_mem_s1_cmd_width_adapter:in_endofpacket
	wire          pic_mem_s1_cmd_width_adapter_src_valid;                                     // pic_mem_s1_cmd_width_adapter:out_valid -> pic_mem_s1_burst_adapter:sink0_valid
	wire   [88:0] pic_mem_s1_cmd_width_adapter_src_data;                                      // pic_mem_s1_cmd_width_adapter:out_data -> pic_mem_s1_burst_adapter:sink0_data
	wire          pic_mem_s1_cmd_width_adapter_src_ready;                                     // pic_mem_s1_burst_adapter:sink0_ready -> pic_mem_s1_cmd_width_adapter:out_ready
	wire   [16:0] pic_mem_s1_cmd_width_adapter_src_channel;                                   // pic_mem_s1_cmd_width_adapter:out_channel -> pic_mem_s1_burst_adapter:sink0_channel
	wire          pic_mem_s1_cmd_width_adapter_src_startofpacket;                             // pic_mem_s1_cmd_width_adapter:out_startofpacket -> pic_mem_s1_burst_adapter:sink0_startofpacket
	wire          pic_mem_s1_cmd_width_adapter_src_endofpacket;                               // pic_mem_s1_cmd_width_adapter:out_endofpacket -> pic_mem_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_013_src_valid;                                                      // cmd_mux_013:src_valid -> background_mem_s1_cmd_width_adapter:in_valid
	wire  [106:0] cmd_mux_013_src_data;                                                       // cmd_mux_013:src_data -> background_mem_s1_cmd_width_adapter:in_data
	wire          cmd_mux_013_src_ready;                                                      // background_mem_s1_cmd_width_adapter:in_ready -> cmd_mux_013:src_ready
	wire   [16:0] cmd_mux_013_src_channel;                                                    // cmd_mux_013:src_channel -> background_mem_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_013_src_startofpacket;                                              // cmd_mux_013:src_startofpacket -> background_mem_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                // cmd_mux_013:src_endofpacket -> background_mem_s1_cmd_width_adapter:in_endofpacket
	wire          background_mem_s1_cmd_width_adapter_src_valid;                              // background_mem_s1_cmd_width_adapter:out_valid -> background_mem_s1_burst_adapter:sink0_valid
	wire   [88:0] background_mem_s1_cmd_width_adapter_src_data;                               // background_mem_s1_cmd_width_adapter:out_data -> background_mem_s1_burst_adapter:sink0_data
	wire          background_mem_s1_cmd_width_adapter_src_ready;                              // background_mem_s1_burst_adapter:sink0_ready -> background_mem_s1_cmd_width_adapter:out_ready
	wire   [16:0] background_mem_s1_cmd_width_adapter_src_channel;                            // background_mem_s1_cmd_width_adapter:out_channel -> background_mem_s1_burst_adapter:sink0_channel
	wire          background_mem_s1_cmd_width_adapter_src_startofpacket;                      // background_mem_s1_cmd_width_adapter:out_startofpacket -> background_mem_s1_burst_adapter:sink0_startofpacket
	wire          background_mem_s1_cmd_width_adapter_src_endofpacket;                        // background_mem_s1_cmd_width_adapter:out_endofpacket -> background_mem_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                       // cmd_demux:src1_valid -> crosser:in_valid
	wire  [106:0] cmd_demux_src1_data;                                                        // cmd_demux:src1_data -> crosser:in_data
	wire          cmd_demux_src1_ready;                                                       // crosser:in_ready -> cmd_demux:src1_ready
	wire   [16:0] cmd_demux_src1_channel;                                                     // cmd_demux:src1_channel -> crosser:in_channel
	wire          cmd_demux_src1_startofpacket;                                               // cmd_demux:src1_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                 // cmd_demux:src1_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                          // crosser:out_valid -> cmd_mux_001:sink0_valid
	wire  [106:0] crosser_out_data;                                                           // crosser:out_data -> cmd_mux_001:sink0_data
	wire          crosser_out_ready;                                                          // cmd_mux_001:sink0_ready -> crosser:out_ready
	wire   [16:0] crosser_out_channel;                                                        // crosser:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_out_startofpacket;                                                  // crosser:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                    // crosser:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                       // cmd_demux:src4_valid -> crosser_001:in_valid
	wire  [106:0] cmd_demux_src4_data;                                                        // cmd_demux:src4_data -> crosser_001:in_data
	wire          cmd_demux_src4_ready;                                                       // crosser_001:in_ready -> cmd_demux:src4_ready
	wire   [16:0] cmd_demux_src4_channel;                                                     // cmd_demux:src4_channel -> crosser_001:in_channel
	wire          cmd_demux_src4_startofpacket;                                               // cmd_demux:src4_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                 // cmd_demux:src4_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                      // crosser_001:out_valid -> cmd_mux_004:sink0_valid
	wire  [106:0] crosser_001_out_data;                                                       // crosser_001:out_data -> cmd_mux_004:sink0_data
	wire          crosser_001_out_ready;                                                      // cmd_mux_004:sink0_ready -> crosser_001:out_ready
	wire   [16:0] crosser_001_out_channel;                                                    // crosser_001:out_channel -> cmd_mux_004:sink0_channel
	wire          crosser_001_out_startofpacket;                                              // crosser_001:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                // crosser_001:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                       // cmd_demux:src5_valid -> crosser_002:in_valid
	wire  [106:0] cmd_demux_src5_data;                                                        // cmd_demux:src5_data -> crosser_002:in_data
	wire          cmd_demux_src5_ready;                                                       // crosser_002:in_ready -> cmd_demux:src5_ready
	wire   [16:0] cmd_demux_src5_channel;                                                     // cmd_demux:src5_channel -> crosser_002:in_channel
	wire          cmd_demux_src5_startofpacket;                                               // cmd_demux:src5_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                 // cmd_demux:src5_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                      // crosser_002:out_valid -> cmd_mux_005:sink0_valid
	wire  [106:0] crosser_002_out_data;                                                       // crosser_002:out_data -> cmd_mux_005:sink0_data
	wire          crosser_002_out_ready;                                                      // cmd_mux_005:sink0_ready -> crosser_002:out_ready
	wire   [16:0] crosser_002_out_channel;                                                    // crosser_002:out_channel -> cmd_mux_005:sink0_channel
	wire          crosser_002_out_startofpacket;                                              // crosser_002:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                // crosser_002:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                       // cmd_demux:src7_valid -> crosser_003:in_valid
	wire  [106:0] cmd_demux_src7_data;                                                        // cmd_demux:src7_data -> crosser_003:in_data
	wire          cmd_demux_src7_ready;                                                       // crosser_003:in_ready -> cmd_demux:src7_ready
	wire   [16:0] cmd_demux_src7_channel;                                                     // cmd_demux:src7_channel -> crosser_003:in_channel
	wire          cmd_demux_src7_startofpacket;                                               // cmd_demux:src7_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                 // cmd_demux:src7_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                      // crosser_003:out_valid -> cmd_mux_007:sink0_valid
	wire  [106:0] crosser_003_out_data;                                                       // crosser_003:out_data -> cmd_mux_007:sink0_data
	wire          crosser_003_out_ready;                                                      // cmd_mux_007:sink0_ready -> crosser_003:out_ready
	wire   [16:0] crosser_003_out_channel;                                                    // crosser_003:out_channel -> cmd_mux_007:sink0_channel
	wire          crosser_003_out_startofpacket;                                              // crosser_003:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                                // crosser_003:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                       // cmd_demux:src8_valid -> crosser_004:in_valid
	wire  [106:0] cmd_demux_src8_data;                                                        // cmd_demux:src8_data -> crosser_004:in_data
	wire          cmd_demux_src8_ready;                                                       // crosser_004:in_ready -> cmd_demux:src8_ready
	wire   [16:0] cmd_demux_src8_channel;                                                     // cmd_demux:src8_channel -> crosser_004:in_channel
	wire          cmd_demux_src8_startofpacket;                                               // cmd_demux:src8_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                 // cmd_demux:src8_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                      // crosser_004:out_valid -> cmd_mux_008:sink0_valid
	wire  [106:0] crosser_004_out_data;                                                       // crosser_004:out_data -> cmd_mux_008:sink0_data
	wire          crosser_004_out_ready;                                                      // cmd_mux_008:sink0_ready -> crosser_004:out_ready
	wire   [16:0] crosser_004_out_channel;                                                    // crosser_004:out_channel -> cmd_mux_008:sink0_channel
	wire          crosser_004_out_startofpacket;                                              // crosser_004:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                                // crosser_004:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                      // cmd_demux:src11_valid -> crosser_005:in_valid
	wire  [106:0] cmd_demux_src11_data;                                                       // cmd_demux:src11_data -> crosser_005:in_data
	wire          cmd_demux_src11_ready;                                                      // crosser_005:in_ready -> cmd_demux:src11_ready
	wire   [16:0] cmd_demux_src11_channel;                                                    // cmd_demux:src11_channel -> crosser_005:in_channel
	wire          cmd_demux_src11_startofpacket;                                              // cmd_demux:src11_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                // cmd_demux:src11_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                      // crosser_005:out_valid -> cmd_mux_011:sink0_valid
	wire  [106:0] crosser_005_out_data;                                                       // crosser_005:out_data -> cmd_mux_011:sink0_data
	wire          crosser_005_out_ready;                                                      // cmd_mux_011:sink0_ready -> crosser_005:out_ready
	wire   [16:0] crosser_005_out_channel;                                                    // crosser_005:out_channel -> cmd_mux_011:sink0_channel
	wire          crosser_005_out_startofpacket;                                              // crosser_005:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                                // crosser_005:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                      // cmd_demux:src12_valid -> crosser_006:in_valid
	wire  [106:0] cmd_demux_src12_data;                                                       // cmd_demux:src12_data -> crosser_006:in_data
	wire          cmd_demux_src12_ready;                                                      // crosser_006:in_ready -> cmd_demux:src12_ready
	wire   [16:0] cmd_demux_src12_channel;                                                    // cmd_demux:src12_channel -> crosser_006:in_channel
	wire          cmd_demux_src12_startofpacket;                                              // cmd_demux:src12_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                // cmd_demux:src12_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                      // crosser_006:out_valid -> cmd_mux_012:sink0_valid
	wire  [106:0] crosser_006_out_data;                                                       // crosser_006:out_data -> cmd_mux_012:sink0_data
	wire          crosser_006_out_ready;                                                      // cmd_mux_012:sink0_ready -> crosser_006:out_ready
	wire   [16:0] crosser_006_out_channel;                                                    // crosser_006:out_channel -> cmd_mux_012:sink0_channel
	wire          crosser_006_out_startofpacket;                                              // crosser_006:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          crosser_006_out_endofpacket;                                                // crosser_006:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                      // cmd_demux:src13_valid -> crosser_007:in_valid
	wire  [106:0] cmd_demux_src13_data;                                                       // cmd_demux:src13_data -> crosser_007:in_data
	wire          cmd_demux_src13_ready;                                                      // crosser_007:in_ready -> cmd_demux:src13_ready
	wire   [16:0] cmd_demux_src13_channel;                                                    // cmd_demux:src13_channel -> crosser_007:in_channel
	wire          cmd_demux_src13_startofpacket;                                              // cmd_demux:src13_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                // cmd_demux:src13_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                      // crosser_007:out_valid -> cmd_mux_013:sink0_valid
	wire  [106:0] crosser_007_out_data;                                                       // crosser_007:out_data -> cmd_mux_013:sink0_data
	wire          crosser_007_out_ready;                                                      // cmd_mux_013:sink0_ready -> crosser_007:out_ready
	wire   [16:0] crosser_007_out_channel;                                                    // crosser_007:out_channel -> cmd_mux_013:sink0_channel
	wire          crosser_007_out_startofpacket;                                              // crosser_007:out_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          crosser_007_out_endofpacket;                                                // crosser_007:out_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                   // cmd_demux_001:src1_valid -> crosser_008:in_valid
	wire  [106:0] cmd_demux_001_src1_data;                                                    // cmd_demux_001:src1_data -> crosser_008:in_data
	wire          cmd_demux_001_src1_ready;                                                   // crosser_008:in_ready -> cmd_demux_001:src1_ready
	wire   [16:0] cmd_demux_001_src1_channel;                                                 // cmd_demux_001:src1_channel -> crosser_008:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                           // cmd_demux_001:src1_startofpacket -> crosser_008:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                             // cmd_demux_001:src1_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                      // crosser_008:out_valid -> cmd_mux_004:sink1_valid
	wire  [106:0] crosser_008_out_data;                                                       // crosser_008:out_data -> cmd_mux_004:sink1_data
	wire          crosser_008_out_ready;                                                      // cmd_mux_004:sink1_ready -> crosser_008:out_ready
	wire   [16:0] crosser_008_out_channel;                                                    // crosser_008:out_channel -> cmd_mux_004:sink1_channel
	wire          crosser_008_out_startofpacket;                                              // crosser_008:out_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          crosser_008_out_endofpacket;                                                // crosser_008:out_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                                   // rsp_demux_001:src0_valid -> crosser_009:in_valid
	wire  [106:0] rsp_demux_001_src0_data;                                                    // rsp_demux_001:src0_data -> crosser_009:in_data
	wire          rsp_demux_001_src0_ready;                                                   // crosser_009:in_ready -> rsp_demux_001:src0_ready
	wire   [16:0] rsp_demux_001_src0_channel;                                                 // rsp_demux_001:src0_channel -> crosser_009:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                           // rsp_demux_001:src0_startofpacket -> crosser_009:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                             // rsp_demux_001:src0_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                      // crosser_009:out_valid -> rsp_mux:sink1_valid
	wire  [106:0] crosser_009_out_data;                                                       // crosser_009:out_data -> rsp_mux:sink1_data
	wire          crosser_009_out_ready;                                                      // rsp_mux:sink1_ready -> crosser_009:out_ready
	wire   [16:0] crosser_009_out_channel;                                                    // crosser_009:out_channel -> rsp_mux:sink1_channel
	wire          crosser_009_out_startofpacket;                                              // crosser_009:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_009_out_endofpacket;                                                // crosser_009:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                                   // rsp_demux_004:src0_valid -> crosser_010:in_valid
	wire  [106:0] rsp_demux_004_src0_data;                                                    // rsp_demux_004:src0_data -> crosser_010:in_data
	wire          rsp_demux_004_src0_ready;                                                   // crosser_010:in_ready -> rsp_demux_004:src0_ready
	wire   [16:0] rsp_demux_004_src0_channel;                                                 // rsp_demux_004:src0_channel -> crosser_010:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                           // rsp_demux_004:src0_startofpacket -> crosser_010:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                             // rsp_demux_004:src0_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                      // crosser_010:out_valid -> rsp_mux:sink4_valid
	wire  [106:0] crosser_010_out_data;                                                       // crosser_010:out_data -> rsp_mux:sink4_data
	wire          crosser_010_out_ready;                                                      // rsp_mux:sink4_ready -> crosser_010:out_ready
	wire   [16:0] crosser_010_out_channel;                                                    // crosser_010:out_channel -> rsp_mux:sink4_channel
	wire          crosser_010_out_startofpacket;                                              // crosser_010:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          crosser_010_out_endofpacket;                                                // crosser_010:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                   // rsp_demux_004:src1_valid -> crosser_011:in_valid
	wire  [106:0] rsp_demux_004_src1_data;                                                    // rsp_demux_004:src1_data -> crosser_011:in_data
	wire          rsp_demux_004_src1_ready;                                                   // crosser_011:in_ready -> rsp_demux_004:src1_ready
	wire   [16:0] rsp_demux_004_src1_channel;                                                 // rsp_demux_004:src1_channel -> crosser_011:in_channel
	wire          rsp_demux_004_src1_startofpacket;                                           // rsp_demux_004:src1_startofpacket -> crosser_011:in_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                             // rsp_demux_004:src1_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                      // crosser_011:out_valid -> rsp_mux_001:sink1_valid
	wire  [106:0] crosser_011_out_data;                                                       // crosser_011:out_data -> rsp_mux_001:sink1_data
	wire          crosser_011_out_ready;                                                      // rsp_mux_001:sink1_ready -> crosser_011:out_ready
	wire   [16:0] crosser_011_out_channel;                                                    // crosser_011:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_011_out_startofpacket;                                              // crosser_011:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          crosser_011_out_endofpacket;                                                // crosser_011:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_005_src0_valid;                                                   // rsp_demux_005:src0_valid -> crosser_012:in_valid
	wire  [106:0] rsp_demux_005_src0_data;                                                    // rsp_demux_005:src0_data -> crosser_012:in_data
	wire          rsp_demux_005_src0_ready;                                                   // crosser_012:in_ready -> rsp_demux_005:src0_ready
	wire   [16:0] rsp_demux_005_src0_channel;                                                 // rsp_demux_005:src0_channel -> crosser_012:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                           // rsp_demux_005:src0_startofpacket -> crosser_012:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                             // rsp_demux_005:src0_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                      // crosser_012:out_valid -> rsp_mux:sink5_valid
	wire  [106:0] crosser_012_out_data;                                                       // crosser_012:out_data -> rsp_mux:sink5_data
	wire          crosser_012_out_ready;                                                      // rsp_mux:sink5_ready -> crosser_012:out_ready
	wire   [16:0] crosser_012_out_channel;                                                    // crosser_012:out_channel -> rsp_mux:sink5_channel
	wire          crosser_012_out_startofpacket;                                              // crosser_012:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          crosser_012_out_endofpacket;                                                // crosser_012:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_007_src0_valid;                                                   // rsp_demux_007:src0_valid -> crosser_013:in_valid
	wire  [106:0] rsp_demux_007_src0_data;                                                    // rsp_demux_007:src0_data -> crosser_013:in_data
	wire          rsp_demux_007_src0_ready;                                                   // crosser_013:in_ready -> rsp_demux_007:src0_ready
	wire   [16:0] rsp_demux_007_src0_channel;                                                 // rsp_demux_007:src0_channel -> crosser_013:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                           // rsp_demux_007:src0_startofpacket -> crosser_013:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                             // rsp_demux_007:src0_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                      // crosser_013:out_valid -> rsp_mux:sink7_valid
	wire  [106:0] crosser_013_out_data;                                                       // crosser_013:out_data -> rsp_mux:sink7_data
	wire          crosser_013_out_ready;                                                      // rsp_mux:sink7_ready -> crosser_013:out_ready
	wire   [16:0] crosser_013_out_channel;                                                    // crosser_013:out_channel -> rsp_mux:sink7_channel
	wire          crosser_013_out_startofpacket;                                              // crosser_013:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          crosser_013_out_endofpacket;                                                // crosser_013:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                   // rsp_demux_008:src0_valid -> crosser_014:in_valid
	wire  [106:0] rsp_demux_008_src0_data;                                                    // rsp_demux_008:src0_data -> crosser_014:in_data
	wire          rsp_demux_008_src0_ready;                                                   // crosser_014:in_ready -> rsp_demux_008:src0_ready
	wire   [16:0] rsp_demux_008_src0_channel;                                                 // rsp_demux_008:src0_channel -> crosser_014:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                           // rsp_demux_008:src0_startofpacket -> crosser_014:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                             // rsp_demux_008:src0_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                                      // crosser_014:out_valid -> rsp_mux:sink8_valid
	wire  [106:0] crosser_014_out_data;                                                       // crosser_014:out_data -> rsp_mux:sink8_data
	wire          crosser_014_out_ready;                                                      // rsp_mux:sink8_ready -> crosser_014:out_ready
	wire   [16:0] crosser_014_out_channel;                                                    // crosser_014:out_channel -> rsp_mux:sink8_channel
	wire          crosser_014_out_startofpacket;                                              // crosser_014:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire          crosser_014_out_endofpacket;                                                // crosser_014:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_011_src0_valid;                                                   // rsp_demux_011:src0_valid -> crosser_015:in_valid
	wire  [106:0] rsp_demux_011_src0_data;                                                    // rsp_demux_011:src0_data -> crosser_015:in_data
	wire          rsp_demux_011_src0_ready;                                                   // crosser_015:in_ready -> rsp_demux_011:src0_ready
	wire   [16:0] rsp_demux_011_src0_channel;                                                 // rsp_demux_011:src0_channel -> crosser_015:in_channel
	wire          rsp_demux_011_src0_startofpacket;                                           // rsp_demux_011:src0_startofpacket -> crosser_015:in_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                             // rsp_demux_011:src0_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                                      // crosser_015:out_valid -> rsp_mux:sink11_valid
	wire  [106:0] crosser_015_out_data;                                                       // crosser_015:out_data -> rsp_mux:sink11_data
	wire          crosser_015_out_ready;                                                      // rsp_mux:sink11_ready -> crosser_015:out_ready
	wire   [16:0] crosser_015_out_channel;                                                    // crosser_015:out_channel -> rsp_mux:sink11_channel
	wire          crosser_015_out_startofpacket;                                              // crosser_015:out_startofpacket -> rsp_mux:sink11_startofpacket
	wire          crosser_015_out_endofpacket;                                                // crosser_015:out_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                   // rsp_demux_012:src0_valid -> crosser_016:in_valid
	wire  [106:0] rsp_demux_012_src0_data;                                                    // rsp_demux_012:src0_data -> crosser_016:in_data
	wire          rsp_demux_012_src0_ready;                                                   // crosser_016:in_ready -> rsp_demux_012:src0_ready
	wire   [16:0] rsp_demux_012_src0_channel;                                                 // rsp_demux_012:src0_channel -> crosser_016:in_channel
	wire          rsp_demux_012_src0_startofpacket;                                           // rsp_demux_012:src0_startofpacket -> crosser_016:in_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                             // rsp_demux_012:src0_endofpacket -> crosser_016:in_endofpacket
	wire          crosser_016_out_valid;                                                      // crosser_016:out_valid -> rsp_mux:sink12_valid
	wire  [106:0] crosser_016_out_data;                                                       // crosser_016:out_data -> rsp_mux:sink12_data
	wire          crosser_016_out_ready;                                                      // rsp_mux:sink12_ready -> crosser_016:out_ready
	wire   [16:0] crosser_016_out_channel;                                                    // crosser_016:out_channel -> rsp_mux:sink12_channel
	wire          crosser_016_out_startofpacket;                                              // crosser_016:out_startofpacket -> rsp_mux:sink12_startofpacket
	wire          crosser_016_out_endofpacket;                                                // crosser_016:out_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                   // rsp_demux_013:src0_valid -> crosser_017:in_valid
	wire  [106:0] rsp_demux_013_src0_data;                                                    // rsp_demux_013:src0_data -> crosser_017:in_data
	wire          rsp_demux_013_src0_ready;                                                   // crosser_017:in_ready -> rsp_demux_013:src0_ready
	wire   [16:0] rsp_demux_013_src0_channel;                                                 // rsp_demux_013:src0_channel -> crosser_017:in_channel
	wire          rsp_demux_013_src0_startofpacket;                                           // rsp_demux_013:src0_startofpacket -> crosser_017:in_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                             // rsp_demux_013:src0_endofpacket -> crosser_017:in_endofpacket
	wire          crosser_017_out_valid;                                                      // crosser_017:out_valid -> rsp_mux:sink13_valid
	wire  [106:0] crosser_017_out_data;                                                       // crosser_017:out_data -> rsp_mux:sink13_data
	wire          crosser_017_out_ready;                                                      // rsp_mux:sink13_ready -> crosser_017:out_ready
	wire   [16:0] crosser_017_out_channel;                                                    // crosser_017:out_channel -> rsp_mux:sink13_channel
	wire          crosser_017_out_startofpacket;                                              // crosser_017:out_startofpacket -> rsp_mux:sink13_startofpacket
	wire          crosser_017_out_endofpacket;                                                // crosser_017:out_endofpacket -> rsp_mux:sink13_endofpacket
	wire   [16:0] cpu_data_master_limiter_cmd_valid_data;                                     // CPU_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [16:0] cpu_instruction_master_limiter_cmd_valid_data;                              // CPU_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                     // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                      // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                     // avalon_st_adapter:in_0_ready -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                              // avalon_st_adapter:out_0_valid -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                               // avalon_st_adapter:out_0_data -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                              // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                              // avalon_st_adapter:out_0_error -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          led_ctrl_avalon_slave_0_agent_rdata_fifo_out_valid;                         // LED_CTRL_avalon_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] led_ctrl_avalon_slave_0_agent_rdata_fifo_out_data;                          // LED_CTRL_avalon_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          led_ctrl_avalon_slave_0_agent_rdata_fifo_out_ready;                         // avalon_st_adapter_001:in_0_ready -> LED_CTRL_avalon_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                          // avalon_st_adapter_001:out_0_valid -> LED_CTRL_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                           // avalon_st_adapter_001:out_0_data -> LED_CTRL_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                          // LED_CTRL_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                          // avalon_st_adapter_001:out_0_error -> LED_CTRL_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          lt24_ctrl_avalon_slave_0_agent_rdata_fifo_src_valid;                        // LT24_CTRL_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] lt24_ctrl_avalon_slave_0_agent_rdata_fifo_src_data;                         // LT24_CTRL_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          lt24_ctrl_avalon_slave_0_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_002:in_0_ready -> LT24_CTRL_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                          // avalon_st_adapter_002:out_0_valid -> LT24_CTRL_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                           // avalon_st_adapter_002:out_0_data -> LT24_CTRL_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                          // LT24_CTRL_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                          // avalon_st_adapter_002:out_0_error -> LT24_CTRL_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_valid;                             // CPU_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] cpu_debug_mem_slave_agent_rdata_fifo_src_data;                              // CPU_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_ready;                             // avalon_st_adapter_003:in_0_ready -> CPU_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                          // avalon_st_adapter_003:out_0_valid -> CPU_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                           // avalon_st_adapter_003:out_0_data -> CPU_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                          // CPU_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                          // avalon_st_adapter_003:out_0_error -> CPU_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_out_valid;       // epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_out_data;        // epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_out_ready;       // avalon_st_adapter_004:in_0_ready -> epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                          // avalon_st_adapter_004:out_0_valid -> epcs_flash_controller_0_epcs_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                           // avalon_st_adapter_004:out_0_data -> epcs_flash_controller_0_epcs_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                          // epcs_flash_controller_0_epcs_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                          // avalon_st_adapter_004:out_0_error -> epcs_flash_controller_0_epcs_control_port_agent:rdata_fifo_sink_error
	wire          alt_pll_pll_slave_agent_rdata_fifo_out_valid;                               // ALT_PLL_pll_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] alt_pll_pll_slave_agent_rdata_fifo_out_data;                                // ALT_PLL_pll_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          alt_pll_pll_slave_agent_rdata_fifo_out_ready;                               // avalon_st_adapter_005:in_0_ready -> ALT_PLL_pll_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                          // avalon_st_adapter_005:out_0_valid -> ALT_PLL_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                           // avalon_st_adapter_005:out_0_data -> ALT_PLL_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                          // ALT_PLL_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                          // avalon_st_adapter_005:out_0_error -> ALT_PLL_pll_slave_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                        // SDRAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                         // SDRAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_006:in_0_ready -> SDRAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                          // avalon_st_adapter_006:out_0_valid -> SDRAM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_006_out_0_data;                                           // avalon_st_adapter_006:out_0_data -> SDRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                          // SDRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                          // avalon_st_adapter_006:out_0_error -> SDRAM_s1_agent:rdata_fifo_sink_error
	wire          timer_s1_agent_rdata_fifo_out_valid;                                        // TIMER_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] timer_s1_agent_rdata_fifo_out_data;                                         // TIMER_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          timer_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_007:in_0_ready -> TIMER_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                          // avalon_st_adapter_007:out_0_valid -> TIMER_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                           // avalon_st_adapter_007:out_0_data -> TIMER_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                          // TIMER_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                          // avalon_st_adapter_007:out_0_error -> TIMER_s1_agent:rdata_fifo_sink_error
	wire          key_s1_agent_rdata_fifo_out_valid;                                          // KEY_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] key_s1_agent_rdata_fifo_out_data;                                           // KEY_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          key_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_008:in_0_ready -> KEY_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                          // avalon_st_adapter_008:out_0_valid -> KEY_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                           // avalon_st_adapter_008:out_0_data -> KEY_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                          // KEY_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                          // avalon_st_adapter_008:out_0_error -> KEY_s1_agent:rdata_fifo_sink_error
	wire          lt24_touch_penirq_n_s1_agent_rdata_fifo_src_valid;                          // LT24_TOUCH_PENIRQ_N_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] lt24_touch_penirq_n_s1_agent_rdata_fifo_src_data;                           // LT24_TOUCH_PENIRQ_N_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          lt24_touch_penirq_n_s1_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_009:in_0_ready -> LT24_TOUCH_PENIRQ_N_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                          // avalon_st_adapter_009:out_0_valid -> LT24_TOUCH_PENIRQ_N_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                           // avalon_st_adapter_009:out_0_data -> LT24_TOUCH_PENIRQ_N_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                          // LT24_TOUCH_PENIRQ_N_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                          // avalon_st_adapter_009:out_0_error -> LT24_TOUCH_PENIRQ_N_s1_agent:rdata_fifo_sink_error
	wire          lt24_touch_busy_s1_agent_rdata_fifo_src_valid;                              // LT24_TOUCH_BUSY_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] lt24_touch_busy_s1_agent_rdata_fifo_src_data;                               // LT24_TOUCH_BUSY_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          lt24_touch_busy_s1_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_010:in_0_ready -> LT24_TOUCH_BUSY_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                          // avalon_st_adapter_010:out_0_valid -> LT24_TOUCH_BUSY_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                           // avalon_st_adapter_010:out_0_data -> LT24_TOUCH_BUSY_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                          // LT24_TOUCH_BUSY_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                          // avalon_st_adapter_010:out_0_error -> LT24_TOUCH_BUSY_s1_agent:rdata_fifo_sink_error
	wire          pic_mem_s1_agent_rdata_fifo_out_valid;                                      // pic_mem_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [17:0] pic_mem_s1_agent_rdata_fifo_out_data;                                       // pic_mem_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          pic_mem_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_011:in_0_ready -> pic_mem_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                          // avalon_st_adapter_011:out_0_valid -> pic_mem_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_011_out_0_data;                                           // avalon_st_adapter_011:out_0_data -> pic_mem_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                          // pic_mem_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                          // avalon_st_adapter_011:out_0_error -> pic_mem_s1_agent:rdata_fifo_sink_error
	wire          lt24_buffer_flag_s1_agent_rdata_fifo_out_valid;                             // LT24_buffer_flag_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] lt24_buffer_flag_s1_agent_rdata_fifo_out_data;                              // LT24_buffer_flag_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          lt24_buffer_flag_s1_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_012:in_0_ready -> LT24_buffer_flag_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                          // avalon_st_adapter_012:out_0_valid -> LT24_buffer_flag_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                           // avalon_st_adapter_012:out_0_data -> LT24_buffer_flag_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                          // LT24_buffer_flag_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                          // avalon_st_adapter_012:out_0_error -> LT24_buffer_flag_s1_agent:rdata_fifo_sink_error
	wire          background_mem_s1_agent_rdata_fifo_out_valid;                               // background_mem_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [17:0] background_mem_s1_agent_rdata_fifo_out_data;                                // background_mem_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          background_mem_s1_agent_rdata_fifo_out_ready;                               // avalon_st_adapter_013:in_0_ready -> background_mem_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                          // avalon_st_adapter_013:out_0_valid -> background_mem_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_013_out_0_data;                                           // avalon_st_adapter_013:out_0_data -> background_mem_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                          // background_mem_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                          // avalon_st_adapter_013:out_0_error -> background_mem_s1_agent:rdata_fifo_sink_error
	wire          signal_out_s1_agent_rdata_fifo_src_valid;                                   // signal_out_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] signal_out_s1_agent_rdata_fifo_src_data;                                    // signal_out_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          signal_out_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_014:in_0_ready -> signal_out_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                          // avalon_st_adapter_014:out_0_valid -> signal_out_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                           // avalon_st_adapter_014:out_0_data -> signal_out_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                          // signal_out_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                          // avalon_st_adapter_014:out_0_error -> signal_out_s1_agent:rdata_fifo_sink_error
	wire          lt24_lcd_rstn_s1_agent_rdata_fifo_src_valid;                                // LT24_LCD_RSTN_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] lt24_lcd_rstn_s1_agent_rdata_fifo_src_data;                                 // LT24_LCD_RSTN_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          lt24_lcd_rstn_s1_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_015:in_0_ready -> LT24_LCD_RSTN_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                          // avalon_st_adapter_015:out_0_valid -> LT24_LCD_RSTN_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                           // avalon_st_adapter_015:out_0_data -> LT24_LCD_RSTN_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                          // LT24_LCD_RSTN_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                          // avalon_st_adapter_015:out_0_error -> LT24_LCD_RSTN_s1_agent:rdata_fifo_sink_error
	wire          lt24_touch_spi_spi_control_port_agent_rdata_fifo_src_valid;                 // LT24_TOUCH_SPI_spi_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] lt24_touch_spi_spi_control_port_agent_rdata_fifo_src_data;                  // LT24_TOUCH_SPI_spi_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          lt24_touch_spi_spi_control_port_agent_rdata_fifo_src_ready;                 // avalon_st_adapter_016:in_0_ready -> LT24_TOUCH_SPI_spi_control_port_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                          // avalon_st_adapter_016:out_0_valid -> LT24_TOUCH_SPI_spi_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                           // avalon_st_adapter_016:out_0_data -> LT24_TOUCH_SPI_spi_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                          // LT24_TOUCH_SPI_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                          // avalon_st_adapter_016:out_0_error -> LT24_TOUCH_SPI_spi_control_port_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_data_master_translator (
		.clk                    (ALT_PLL_c0_clk),                                                     //                       clk.clk
		.reset                  (CPU_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (CPU_data_master_byteenable),                                         //                          .byteenable
		.av_read                (CPU_data_master_read),                                               //                          .read
		.av_readdata            (CPU_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPU_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (CPU_data_master_write),                                              //                          .write
		.av_writedata           (CPU_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (CPU_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                    (ALT_PLL_c0_clk),                                                            //                       clk.clk
		.reset                  (CPU_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (CPU_instruction_master_read),                                               //                          .read
		.av_readdata            (CPU_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPU_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (ALT_PLL_c0_clk),                                     //                      clk.clk
		.reset                  (CPU_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_UART_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_UART_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_UART_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_UART_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_UART_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_UART_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_ctrl_avalon_slave_0_translator (
		.clk                    (ALT_PLL_c2_clk),                                  //                      clk.clk
		.reset                  (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_ctrl_avalon_slave_0_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (led_ctrl_avalon_slave_0_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (led_ctrl_avalon_slave_0_agent_m0_read),           //                         .read
		.uav_write              (led_ctrl_avalon_slave_0_agent_m0_write),          //                         .write
		.uav_waitrequest        (led_ctrl_avalon_slave_0_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (led_ctrl_avalon_slave_0_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (led_ctrl_avalon_slave_0_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (led_ctrl_avalon_slave_0_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (led_ctrl_avalon_slave_0_agent_m0_writedata),      //                         .writedata
		.uav_lock               (led_ctrl_avalon_slave_0_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (led_ctrl_avalon_slave_0_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (LED_CTRL_avalon_slave_0_address),                 //      avalon_anti_slave_0.address
		.av_write               (LED_CTRL_avalon_slave_0_write),                   //                         .write
		.av_read                (LED_CTRL_avalon_slave_0_read),                    //                         .read
		.av_readdata            (LED_CTRL_avalon_slave_0_readdata),                //                         .readdata
		.av_writedata           (LED_CTRL_avalon_slave_0_writedata),               //                         .writedata
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (1)
	) lt24_ctrl_avalon_slave_0_translator (
		.clk                    (ALT_PLL_c0_clk),                                  //                      clk.clk
		.reset                  (CPU_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (lt24_ctrl_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lt24_ctrl_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lt24_ctrl_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (lt24_ctrl_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (lt24_ctrl_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lt24_ctrl_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lt24_ctrl_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lt24_ctrl_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lt24_ctrl_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lt24_ctrl_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lt24_ctrl_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (LT24_CTRL_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (LT24_CTRL_avalon_slave_0_write),                  //                         .write
		.av_writedata           (LT24_CTRL_avalon_slave_0_writedata),              //                         .writedata
		.av_chipselect          (LT24_CTRL_avalon_slave_0_chipselect),             //                         .chipselect
		.av_read                (),                                                //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),            //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_debug_mem_slave_translator (
		.clk                    (ALT_PLL_c0_clk),                             //                      clk.clk
		.reset                  (CPU_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cpu_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (CPU_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (CPU_debug_mem_slave_write),                  //                         .write
		.av_read                (CPU_debug_mem_slave_read),                   //                         .read
		.av_readdata            (CPU_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (CPU_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (CPU_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (CPU_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (CPU_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) epcs_flash_controller_0_epcs_control_port_translator (
		.clk                    (CLK_50_clk_clk),                                                   //                      clk.clk
		.reset                  (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (epcs_flash_controller_0_epcs_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (epcs_flash_controller_0_epcs_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (epcs_flash_controller_0_epcs_control_port_agent_m0_read),          //                         .read
		.uav_write              (epcs_flash_controller_0_epcs_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (epcs_flash_controller_0_epcs_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (epcs_flash_controller_0_epcs_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (epcs_flash_controller_0_epcs_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (epcs_flash_controller_0_epcs_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (epcs_flash_controller_0_epcs_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (epcs_flash_controller_0_epcs_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (epcs_flash_controller_0_epcs_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (epcs_flash_controller_0_epcs_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (epcs_flash_controller_0_epcs_control_port_write),                  //                         .write
		.av_read                (epcs_flash_controller_0_epcs_control_port_read),                   //                         .read
		.av_readdata            (epcs_flash_controller_0_epcs_control_port_readdata),               //                         .readdata
		.av_writedata           (epcs_flash_controller_0_epcs_control_port_writedata),              //                         .writedata
		.av_chipselect          (epcs_flash_controller_0_epcs_control_port_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_burstcount          (),                                                                 //              (terminated)
		.av_byteenable          (),                                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                                             //              (terminated)
		.av_waitrequest         (1'b0),                                                             //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.av_clken               (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_debugaccess         (),                                                                 //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alt_pll_pll_slave_translator (
		.clk                    (CLK_50_clk_clk),                                            //                      clk.clk
		.reset                  (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (alt_pll_pll_slave_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (alt_pll_pll_slave_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (alt_pll_pll_slave_agent_m0_read),                           //                         .read
		.uav_write              (alt_pll_pll_slave_agent_m0_write),                          //                         .write
		.uav_waitrequest        (alt_pll_pll_slave_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (alt_pll_pll_slave_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (alt_pll_pll_slave_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (alt_pll_pll_slave_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (alt_pll_pll_slave_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (alt_pll_pll_slave_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (alt_pll_pll_slave_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (ALT_PLL_pll_slave_address),                                 //      avalon_anti_slave_0.address
		.av_write               (ALT_PLL_pll_slave_write),                                   //                         .write
		.av_read                (ALT_PLL_pll_slave_read),                                    //                         .read
		.av_readdata            (ALT_PLL_pll_slave_readdata),                                //                         .readdata
		.av_writedata           (ALT_PLL_pll_slave_writedata),                               //                         .writedata
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (ALT_PLL_c0_clk),                        //                      clk.clk
		.reset                  (CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                //                         .read
		.uav_write              (sdram_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (SDRAM_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (SDRAM_s1_write),                        //                         .write
		.av_read                (SDRAM_s1_read),                         //                         .read
		.av_readdata            (SDRAM_s1_readdata),                     //                         .readdata
		.av_writedata           (SDRAM_s1_writedata),                    //                         .writedata
		.av_byteenable          (SDRAM_s1_byteenable),                   //                         .byteenable
		.av_readdatavalid       (SDRAM_s1_readdatavalid),                //                         .readdatavalid
		.av_waitrequest         (SDRAM_s1_waitrequest),                  //                         .waitrequest
		.av_chipselect          (SDRAM_s1_chipselect),                   //                         .chipselect
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_s1_translator (
		.clk                    (ALT_PLL_c2_clk),                                  //                      clk.clk
		.reset                  (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (timer_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (timer_s1_agent_m0_read),                          //                         .read
		.uav_write              (timer_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (timer_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (timer_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (timer_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (timer_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (timer_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (timer_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (timer_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (TIMER_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (TIMER_s1_write),                                  //                         .write
		.av_readdata            (TIMER_s1_readdata),                               //                         .readdata
		.av_writedata           (TIMER_s1_writedata),                              //                         .writedata
		.av_chipselect          (TIMER_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) key_s1_translator (
		.clk                    (ALT_PLL_c2_clk),                                  //                      clk.clk
		.reset                  (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (key_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (key_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (key_s1_agent_m0_read),                            //                         .read
		.uav_write              (key_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (key_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (key_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (key_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (key_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (key_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (key_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (key_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (KEY_s1_address),                                  //      avalon_anti_slave_0.address
		.av_readdata            (KEY_s1_readdata),                                 //                         .readdata
		.av_write               (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_writedata           (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lt24_touch_penirq_n_s1_translator (
		.clk                    (ALT_PLL_c0_clk),                                //                      clk.clk
		.reset                  (CPU_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (lt24_touch_penirq_n_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lt24_touch_penirq_n_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lt24_touch_penirq_n_s1_agent_m0_read),          //                         .read
		.uav_write              (lt24_touch_penirq_n_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (lt24_touch_penirq_n_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lt24_touch_penirq_n_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lt24_touch_penirq_n_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lt24_touch_penirq_n_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lt24_touch_penirq_n_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lt24_touch_penirq_n_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lt24_touch_penirq_n_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (LT24_TOUCH_PENIRQ_N_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (LT24_TOUCH_PENIRQ_N_s1_write),                  //                         .write
		.av_readdata            (LT24_TOUCH_PENIRQ_N_s1_readdata),               //                         .readdata
		.av_writedata           (LT24_TOUCH_PENIRQ_N_s1_writedata),              //                         .writedata
		.av_chipselect          (LT24_TOUCH_PENIRQ_N_s1_chipselect),             //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lt24_touch_busy_s1_translator (
		.clk                    (ALT_PLL_c0_clk),                            //                      clk.clk
		.reset                  (CPU_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (lt24_touch_busy_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lt24_touch_busy_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lt24_touch_busy_s1_agent_m0_read),          //                         .read
		.uav_write              (lt24_touch_busy_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (lt24_touch_busy_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lt24_touch_busy_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lt24_touch_busy_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lt24_touch_busy_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lt24_touch_busy_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lt24_touch_busy_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lt24_touch_busy_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (LT24_TOUCH_BUSY_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (LT24_TOUCH_BUSY_s1_readdata),               //                         .readdata
		.av_write               (),                                          //              (terminated)
		.av_read                (),                                          //              (terminated)
		.av_writedata           (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_chipselect          (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pic_mem_s1_translator (
		.clk                    (CLK_50_clk_clk),                                            //                      clk.clk
		.reset                  (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pic_mem_s1_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (pic_mem_s1_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (pic_mem_s1_agent_m0_read),                                  //                         .read
		.uav_write              (pic_mem_s1_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (pic_mem_s1_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (pic_mem_s1_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (pic_mem_s1_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (pic_mem_s1_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (pic_mem_s1_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (pic_mem_s1_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (pic_mem_s1_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (pic_mem_s1_address),                                        //      avalon_anti_slave_0.address
		.av_write               (pic_mem_s1_write),                                          //                         .write
		.av_readdata            (pic_mem_s1_readdata),                                       //                         .readdata
		.av_writedata           (pic_mem_s1_writedata),                                      //                         .writedata
		.av_byteenable          (pic_mem_s1_byteenable),                                     //                         .byteenable
		.av_chipselect          (pic_mem_s1_chipselect),                                     //                         .chipselect
		.av_clken               (pic_mem_s1_clken),                                          //                         .clken
		.av_read                (),                                                          //              (terminated)
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lt24_buffer_flag_s1_translator (
		.clk                    (CLK_50_clk_clk),                                     //                      clk.clk
		.reset                  (LT24_buffer_flag_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lt24_buffer_flag_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (lt24_buffer_flag_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (lt24_buffer_flag_s1_agent_m0_read),                  //                         .read
		.uav_write              (lt24_buffer_flag_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (lt24_buffer_flag_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (lt24_buffer_flag_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (lt24_buffer_flag_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (lt24_buffer_flag_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (lt24_buffer_flag_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (lt24_buffer_flag_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (lt24_buffer_flag_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (LT24_buffer_flag_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (LT24_buffer_flag_s1_write),                          //                         .write
		.av_readdata            (LT24_buffer_flag_s1_readdata),                       //                         .readdata
		.av_writedata           (LT24_buffer_flag_s1_writedata),                      //                         .writedata
		.av_chipselect          (LT24_buffer_flag_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) background_mem_s1_translator (
		.clk                    (CLK_50_clk_clk),                                            //                      clk.clk
		.reset                  (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (background_mem_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (background_mem_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (background_mem_s1_agent_m0_read),                           //                         .read
		.uav_write              (background_mem_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (background_mem_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (background_mem_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (background_mem_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (background_mem_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (background_mem_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (background_mem_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (background_mem_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (background_mem_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (background_mem_s1_write),                                   //                         .write
		.av_readdata            (background_mem_s1_readdata),                                //                         .readdata
		.av_writedata           (background_mem_s1_writedata),                               //                         .writedata
		.av_byteenable          (background_mem_s1_byteenable),                              //                         .byteenable
		.av_chipselect          (background_mem_s1_chipselect),                              //                         .chipselect
		.av_clken               (background_mem_s1_clken),                                   //                         .clken
		.av_read                (),                                                          //              (terminated)
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) signal_out_s1_translator (
		.clk                    (ALT_PLL_c0_clk),                               //                      clk.clk
		.reset                  (signal_out_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (signal_out_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (signal_out_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (signal_out_s1_agent_m0_read),                  //                         .read
		.uav_write              (signal_out_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (signal_out_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (signal_out_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (signal_out_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (signal_out_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (signal_out_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (signal_out_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (signal_out_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (signal_out_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (signal_out_s1_write),                          //                         .write
		.av_readdata            (signal_out_s1_readdata),                       //                         .readdata
		.av_writedata           (signal_out_s1_writedata),                      //                         .writedata
		.av_chipselect          (signal_out_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lt24_lcd_rstn_s1_translator (
		.clk                    (ALT_PLL_c0_clk),                          //                      clk.clk
		.reset                  (CPU_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (lt24_lcd_rstn_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lt24_lcd_rstn_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lt24_lcd_rstn_s1_agent_m0_read),          //                         .read
		.uav_write              (lt24_lcd_rstn_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (lt24_lcd_rstn_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lt24_lcd_rstn_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lt24_lcd_rstn_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lt24_lcd_rstn_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lt24_lcd_rstn_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lt24_lcd_rstn_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lt24_lcd_rstn_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (LT24_LCD_RSTN_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (LT24_LCD_RSTN_s1_write),                  //                         .write
		.av_readdata            (LT24_LCD_RSTN_s1_readdata),               //                         .readdata
		.av_writedata           (LT24_LCD_RSTN_s1_writedata),              //                         .writedata
		.av_chipselect          (LT24_LCD_RSTN_s1_chipselect),             //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lt24_touch_spi_spi_control_port_translator (
		.clk                    (ALT_PLL_c0_clk),                                         //                      clk.clk
		.reset                  (CPU_reset_reset_bridge_in_reset_reset),                  //                    reset.reset
		.uav_address            (lt24_touch_spi_spi_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lt24_touch_spi_spi_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lt24_touch_spi_spi_control_port_agent_m0_read),          //                         .read
		.uav_write              (lt24_touch_spi_spi_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (lt24_touch_spi_spi_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lt24_touch_spi_spi_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lt24_touch_spi_spi_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lt24_touch_spi_spi_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lt24_touch_spi_spi_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lt24_touch_spi_spi_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lt24_touch_spi_spi_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (LT24_TOUCH_SPI_spi_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (LT24_TOUCH_SPI_spi_control_port_write),                  //                         .write
		.av_read                (LT24_TOUCH_SPI_spi_control_port_read),                   //                         .read
		.av_readdata            (LT24_TOUCH_SPI_spi_control_port_readdata),               //                         .readdata
		.av_writedata           (LT24_TOUCH_SPI_spi_control_port_writedata),              //                         .writedata
		.av_chipselect          (LT24_TOUCH_SPI_spi_control_port_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_QOS_H                 (83),
		.PKT_QOS_L                 (83),
		.PKT_DATA_SIDEBAND_H       (81),
		.PKT_DATA_SIDEBAND_L       (81),
		.PKT_ADDR_SIDEBAND_H       (80),
		.PKT_ADDR_SIDEBAND_L       (80),
		.PKT_BURST_TYPE_H          (79),
		.PKT_BURST_TYPE_L          (78),
		.PKT_CACHE_H               (101),
		.PKT_CACHE_L               (98),
		.PKT_THREAD_ID_H           (94),
		.PKT_THREAD_ID_L           (94),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (17),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                   (ALT_PLL_c0_clk),                                                     //       clk.clk
		.reset                 (CPU_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_QOS_H                 (83),
		.PKT_QOS_L                 (83),
		.PKT_DATA_SIDEBAND_H       (81),
		.PKT_DATA_SIDEBAND_L       (81),
		.PKT_ADDR_SIDEBAND_H       (80),
		.PKT_ADDR_SIDEBAND_L       (80),
		.PKT_BURST_TYPE_H          (79),
		.PKT_BURST_TYPE_L          (78),
		.PKT_CACHE_H               (101),
		.PKT_CACHE_L               (98),
		.PKT_THREAD_ID_H           (94),
		.PKT_THREAD_ID_L           (94),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (17),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                   (ALT_PLL_c0_clk),                                                            //       clk.clk
		.reset                 (CPU_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (ALT_PLL_c0_clk),                                               //             clk.clk
		.reset                   (CPU_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                          //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (ALT_PLL_c0_clk),                                               //       clk.clk
		.reset             (CPU_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_ctrl_avalon_slave_0_agent (
		.clk                     (ALT_PLL_c2_clk),                                           //             clk.clk
		.reset                   (LED_CTRL_reset_sink_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (led_ctrl_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (led_ctrl_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (led_ctrl_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (led_ctrl_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (led_ctrl_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (led_ctrl_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (led_ctrl_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (led_ctrl_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (led_ctrl_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (led_ctrl_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (led_ctrl_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (led_ctrl_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (led_ctrl_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (led_ctrl_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (led_ctrl_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (led_ctrl_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                  //                .channel
		.rf_sink_ready           (led_ctrl_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (led_ctrl_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (led_ctrl_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (led_ctrl_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (led_ctrl_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (led_ctrl_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (led_ctrl_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (led_ctrl_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (led_ctrl_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (led_ctrl_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (led_ctrl_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_ctrl_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (led_ctrl_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_ctrl_avalon_slave_0_agent_rsp_fifo (
		.clk               (ALT_PLL_c2_clk),                                           //       clk.clk
		.reset             (LED_CTRL_reset_sink_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (led_ctrl_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (led_ctrl_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (led_ctrl_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (led_ctrl_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (led_ctrl_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (led_ctrl_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (led_ctrl_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (led_ctrl_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (led_ctrl_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (led_ctrl_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_ctrl_avalon_slave_0_agent_rdata_fifo (
		.clk               (ALT_PLL_c2_clk),                                     //       clk.clk
		.reset             (LED_CTRL_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (led_ctrl_avalon_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (led_ctrl_avalon_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (led_ctrl_avalon_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (led_ctrl_avalon_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (led_ctrl_avalon_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (led_ctrl_avalon_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lt24_ctrl_avalon_slave_0_agent (
		.clk                     (ALT_PLL_c0_clk),                                            //             clk.clk
		.reset                   (CPU_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (lt24_ctrl_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lt24_ctrl_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lt24_ctrl_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lt24_ctrl_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lt24_ctrl_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (lt24_ctrl_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lt24_ctrl_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lt24_ctrl_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (lt24_ctrl_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lt24_ctrl_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (lt24_ctrl_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (lt24_ctrl_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lt24_ctrl_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (lt24_ctrl_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (lt24_ctrl_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (lt24_ctrl_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                   //                .channel
		.rf_sink_ready           (lt24_ctrl_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lt24_ctrl_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lt24_ctrl_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lt24_ctrl_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lt24_ctrl_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lt24_ctrl_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lt24_ctrl_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lt24_ctrl_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lt24_ctrl_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lt24_ctrl_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (lt24_ctrl_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lt24_ctrl_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lt24_ctrl_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lt24_ctrl_avalon_slave_0_agent_rsp_fifo (
		.clk               (ALT_PLL_c0_clk),                                            //       clk.clk
		.reset             (CPU_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (lt24_ctrl_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (lt24_ctrl_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (lt24_ctrl_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lt24_ctrl_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lt24_ctrl_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lt24_ctrl_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lt24_ctrl_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lt24_ctrl_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lt24_ctrl_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lt24_ctrl_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_debug_mem_slave_agent (
		.clk                     (ALT_PLL_c0_clk),                                       //             clk.clk
		.reset                   (CPU_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                              //                .channel
		.rf_sink_ready           (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (cpu_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_debug_mem_slave_agent_rsp_fifo (
		.clk               (ALT_PLL_c0_clk),                                       //       clk.clk
		.reset             (CPU_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) epcs_flash_controller_0_epcs_control_port_agent (
		.clk                     (CLK_50_clk_clk),                                                             //             clk.clk
		.reset                   (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (epcs_flash_controller_0_epcs_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (epcs_flash_controller_0_epcs_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (epcs_flash_controller_0_epcs_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (epcs_flash_controller_0_epcs_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (epcs_flash_controller_0_epcs_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (epcs_flash_controller_0_epcs_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (epcs_flash_controller_0_epcs_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (epcs_flash_controller_0_epcs_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (epcs_flash_controller_0_epcs_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (epcs_flash_controller_0_epcs_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (epcs_flash_controller_0_epcs_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (epcs_flash_controller_0_epcs_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (epcs_flash_controller_0_epcs_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (epcs_flash_controller_0_epcs_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (epcs_flash_controller_0_epcs_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (epcs_flash_controller_0_epcs_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                                      //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                                      //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                                       //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                                //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                                    //                .channel
		.rf_sink_ready           (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (epcs_flash_controller_0_epcs_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (epcs_flash_controller_0_epcs_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (epcs_flash_controller_0_epcs_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (epcs_flash_controller_0_epcs_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (epcs_flash_controller_0_epcs_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                          //                .error
		.rdata_fifo_src_ready    (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo (
		.clk               (CLK_50_clk_clk),                                                             //       clk.clk
		.reset             (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (epcs_flash_controller_0_epcs_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (epcs_flash_controller_0_epcs_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (epcs_flash_controller_0_epcs_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (epcs_flash_controller_0_epcs_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (epcs_flash_controller_0_epcs_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo (
		.clk               (CLK_50_clk_clk),                                                       //       clk.clk
		.reset             (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                                 // (terminated)
		.out_startofpacket (),                                                                     // (terminated)
		.out_endofpacket   (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) alt_pll_pll_slave_agent (
		.clk                     (CLK_50_clk_clk),                                            //             clk.clk
		.reset                   (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (alt_pll_pll_slave_agent_m0_address),                        //              m0.address
		.m0_burstcount           (alt_pll_pll_slave_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (alt_pll_pll_slave_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (alt_pll_pll_slave_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (alt_pll_pll_slave_agent_m0_lock),                           //                .lock
		.m0_readdata             (alt_pll_pll_slave_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (alt_pll_pll_slave_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (alt_pll_pll_slave_agent_m0_read),                           //                .read
		.m0_waitrequest          (alt_pll_pll_slave_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (alt_pll_pll_slave_agent_m0_writedata),                      //                .writedata
		.m0_write                (alt_pll_pll_slave_agent_m0_write),                          //                .write
		.rp_endofpacket          (alt_pll_pll_slave_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (alt_pll_pll_slave_agent_rp_ready),                          //                .ready
		.rp_valid                (alt_pll_pll_slave_agent_rp_valid),                          //                .valid
		.rp_data                 (alt_pll_pll_slave_agent_rp_data),                           //                .data
		.rp_startofpacket        (alt_pll_pll_slave_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                   //                .channel
		.rf_sink_ready           (alt_pll_pll_slave_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (alt_pll_pll_slave_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (alt_pll_pll_slave_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (alt_pll_pll_slave_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (alt_pll_pll_slave_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (alt_pll_pll_slave_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (alt_pll_pll_slave_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (alt_pll_pll_slave_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (alt_pll_pll_slave_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (alt_pll_pll_slave_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (alt_pll_pll_slave_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alt_pll_pll_slave_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (alt_pll_pll_slave_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_pll_pll_slave_agent_rsp_fifo (
		.clk               (CLK_50_clk_clk),                                            //       clk.clk
		.reset             (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (alt_pll_pll_slave_agent_rf_source_data),                    //        in.data
		.in_valid          (alt_pll_pll_slave_agent_rf_source_valid),                   //          .valid
		.in_ready          (alt_pll_pll_slave_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (alt_pll_pll_slave_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (alt_pll_pll_slave_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (alt_pll_pll_slave_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (alt_pll_pll_slave_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (alt_pll_pll_slave_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (alt_pll_pll_slave_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (alt_pll_pll_slave_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_pll_pll_slave_agent_rdata_fifo (
		.clk               (CLK_50_clk_clk),                                            //       clk.clk
		.reset             (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (alt_pll_pll_slave_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (alt_pll_pll_slave_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (alt_pll_pll_slave_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (alt_pll_pll_slave_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (alt_pll_pll_slave_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (alt_pll_pll_slave_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (ALT_PLL_c0_clk),                               //             clk.clk
		.reset                   (CPU_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),            //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (ALT_PLL_c0_clk),                            //       clk.clk
		.reset             (CPU_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (ALT_PLL_c0_clk),                        //       clk.clk
		.reset             (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_s1_agent (
		.clk                     (ALT_PLL_c2_clk),                                  //             clk.clk
		.reset                   (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (timer_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (timer_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (timer_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (timer_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (timer_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (timer_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (timer_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (timer_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (timer_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (timer_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (timer_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (timer_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (timer_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (timer_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (timer_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_007_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                         //                .channel
		.rf_sink_ready           (timer_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (timer_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (timer_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (timer_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (timer_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (timer_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (timer_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (timer_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (timer_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (timer_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),               //                .error
		.rdata_fifo_src_ready    (timer_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (timer_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rsp_fifo (
		.clk               (ALT_PLL_c2_clk),                                  //       clk.clk
		.reset             (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (timer_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (timer_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (timer_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (timer_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (timer_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (timer_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (timer_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (timer_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (timer_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rdata_fifo (
		.clk               (ALT_PLL_c2_clk),                                  //       clk.clk
		.reset             (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (timer_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (timer_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (timer_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (timer_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (timer_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) key_s1_agent (
		.clk                     (ALT_PLL_c2_clk),                                  //             clk.clk
		.reset                   (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (key_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (key_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (key_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (key_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (key_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (key_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (key_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (key_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (key_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (key_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (key_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (key_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (key_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (key_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (key_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (key_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_008_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                         //                .channel
		.rf_sink_ready           (key_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (key_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (key_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (key_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (key_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (key_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (key_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (key_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (key_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (key_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),               //                .error
		.rdata_fifo_src_ready    (key_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (key_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (key_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_s1_agent_rsp_fifo (
		.clk               (ALT_PLL_c2_clk),                                  //       clk.clk
		.reset             (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (key_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (key_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (key_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (key_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (key_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (key_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (key_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (key_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (key_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (key_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_s1_agent_rdata_fifo (
		.clk               (ALT_PLL_c2_clk),                                  //       clk.clk
		.reset             (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (key_s1_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (key_s1_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (key_s1_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (key_s1_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (key_s1_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (key_s1_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lt24_touch_penirq_n_s1_agent (
		.clk                     (ALT_PLL_c0_clk),                                          //             clk.clk
		.reset                   (CPU_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (lt24_touch_penirq_n_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lt24_touch_penirq_n_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lt24_touch_penirq_n_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lt24_touch_penirq_n_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lt24_touch_penirq_n_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lt24_touch_penirq_n_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lt24_touch_penirq_n_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lt24_touch_penirq_n_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lt24_touch_penirq_n_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lt24_touch_penirq_n_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lt24_touch_penirq_n_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lt24_touch_penirq_n_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lt24_touch_penirq_n_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lt24_touch_penirq_n_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lt24_touch_penirq_n_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lt24_touch_penirq_n_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                 //                .channel
		.rf_sink_ready           (lt24_touch_penirq_n_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lt24_touch_penirq_n_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lt24_touch_penirq_n_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lt24_touch_penirq_n_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lt24_touch_penirq_n_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lt24_touch_penirq_n_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lt24_touch_penirq_n_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lt24_touch_penirq_n_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lt24_touch_penirq_n_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lt24_touch_penirq_n_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (lt24_touch_penirq_n_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lt24_touch_penirq_n_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lt24_touch_penirq_n_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lt24_touch_penirq_n_s1_agent_rsp_fifo (
		.clk               (ALT_PLL_c0_clk),                                          //       clk.clk
		.reset             (CPU_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (lt24_touch_penirq_n_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lt24_touch_penirq_n_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lt24_touch_penirq_n_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lt24_touch_penirq_n_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lt24_touch_penirq_n_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lt24_touch_penirq_n_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lt24_touch_penirq_n_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lt24_touch_penirq_n_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lt24_touch_penirq_n_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lt24_touch_penirq_n_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lt24_touch_busy_s1_agent (
		.clk                     (ALT_PLL_c0_clk),                                      //             clk.clk
		.reset                   (CPU_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (lt24_touch_busy_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lt24_touch_busy_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lt24_touch_busy_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lt24_touch_busy_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lt24_touch_busy_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lt24_touch_busy_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lt24_touch_busy_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lt24_touch_busy_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lt24_touch_busy_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lt24_touch_busy_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lt24_touch_busy_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lt24_touch_busy_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lt24_touch_busy_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lt24_touch_busy_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lt24_touch_busy_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lt24_touch_busy_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                             //                .channel
		.rf_sink_ready           (lt24_touch_busy_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lt24_touch_busy_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lt24_touch_busy_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lt24_touch_busy_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lt24_touch_busy_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lt24_touch_busy_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lt24_touch_busy_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lt24_touch_busy_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lt24_touch_busy_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lt24_touch_busy_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (lt24_touch_busy_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lt24_touch_busy_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lt24_touch_busy_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lt24_touch_busy_s1_agent_rsp_fifo (
		.clk               (ALT_PLL_c0_clk),                                      //       clk.clk
		.reset             (CPU_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (lt24_touch_busy_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lt24_touch_busy_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lt24_touch_busy_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lt24_touch_busy_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lt24_touch_busy_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lt24_touch_busy_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lt24_touch_busy_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lt24_touch_busy_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lt24_touch_busy_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lt24_touch_busy_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pic_mem_s1_agent (
		.clk                     (CLK_50_clk_clk),                                            //             clk.clk
		.reset                   (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pic_mem_s1_agent_m0_address),                               //              m0.address
		.m0_burstcount           (pic_mem_s1_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (pic_mem_s1_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (pic_mem_s1_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (pic_mem_s1_agent_m0_lock),                                  //                .lock
		.m0_readdata             (pic_mem_s1_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (pic_mem_s1_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (pic_mem_s1_agent_m0_read),                                  //                .read
		.m0_waitrequest          (pic_mem_s1_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (pic_mem_s1_agent_m0_writedata),                             //                .writedata
		.m0_write                (pic_mem_s1_agent_m0_write),                                 //                .write
		.rp_endofpacket          (pic_mem_s1_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (pic_mem_s1_agent_rp_ready),                                 //                .ready
		.rp_valid                (pic_mem_s1_agent_rp_valid),                                 //                .valid
		.rp_data                 (pic_mem_s1_agent_rp_data),                                  //                .data
		.rp_startofpacket        (pic_mem_s1_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (pic_mem_s1_burst_adapter_source0_ready),                    //              cp.ready
		.cp_valid                (pic_mem_s1_burst_adapter_source0_valid),                    //                .valid
		.cp_data                 (pic_mem_s1_burst_adapter_source0_data),                     //                .data
		.cp_startofpacket        (pic_mem_s1_burst_adapter_source0_startofpacket),            //                .startofpacket
		.cp_endofpacket          (pic_mem_s1_burst_adapter_source0_endofpacket),              //                .endofpacket
		.cp_channel              (pic_mem_s1_burst_adapter_source0_channel),                  //                .channel
		.rf_sink_ready           (pic_mem_s1_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (pic_mem_s1_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (pic_mem_s1_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (pic_mem_s1_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (pic_mem_s1_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (pic_mem_s1_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (pic_mem_s1_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (pic_mem_s1_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (pic_mem_s1_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (pic_mem_s1_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (pic_mem_s1_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pic_mem_s1_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (pic_mem_s1_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pic_mem_s1_agent_rsp_fifo (
		.clk               (CLK_50_clk_clk),                                            //       clk.clk
		.reset             (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pic_mem_s1_agent_rf_source_data),                           //        in.data
		.in_valid          (pic_mem_s1_agent_rf_source_valid),                          //          .valid
		.in_ready          (pic_mem_s1_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (pic_mem_s1_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (pic_mem_s1_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (pic_mem_s1_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (pic_mem_s1_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (pic_mem_s1_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (pic_mem_s1_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (pic_mem_s1_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pic_mem_s1_agent_rdata_fifo (
		.clk               (CLK_50_clk_clk),                                            //       clk.clk
		.reset             (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pic_mem_s1_agent_rdata_fifo_src_data),                      //        in.data
		.in_valid          (pic_mem_s1_agent_rdata_fifo_src_valid),                     //          .valid
		.in_ready          (pic_mem_s1_agent_rdata_fifo_src_ready),                     //          .ready
		.out_data          (pic_mem_s1_agent_rdata_fifo_out_data),                      //       out.data
		.out_valid         (pic_mem_s1_agent_rdata_fifo_out_valid),                     //          .valid
		.out_ready         (pic_mem_s1_agent_rdata_fifo_out_ready),                     //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lt24_buffer_flag_s1_agent (
		.clk                     (CLK_50_clk_clk),                                       //             clk.clk
		.reset                   (LT24_buffer_flag_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (lt24_buffer_flag_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lt24_buffer_flag_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lt24_buffer_flag_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lt24_buffer_flag_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lt24_buffer_flag_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lt24_buffer_flag_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lt24_buffer_flag_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lt24_buffer_flag_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lt24_buffer_flag_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lt24_buffer_flag_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lt24_buffer_flag_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lt24_buffer_flag_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lt24_buffer_flag_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lt24_buffer_flag_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lt24_buffer_flag_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lt24_buffer_flag_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                              //                .channel
		.rf_sink_ready           (lt24_buffer_flag_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lt24_buffer_flag_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lt24_buffer_flag_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lt24_buffer_flag_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lt24_buffer_flag_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lt24_buffer_flag_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lt24_buffer_flag_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lt24_buffer_flag_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lt24_buffer_flag_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lt24_buffer_flag_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (lt24_buffer_flag_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lt24_buffer_flag_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lt24_buffer_flag_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lt24_buffer_flag_s1_agent_rsp_fifo (
		.clk               (CLK_50_clk_clk),                                       //       clk.clk
		.reset             (LT24_buffer_flag_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (lt24_buffer_flag_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lt24_buffer_flag_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lt24_buffer_flag_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lt24_buffer_flag_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lt24_buffer_flag_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lt24_buffer_flag_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lt24_buffer_flag_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lt24_buffer_flag_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lt24_buffer_flag_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lt24_buffer_flag_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lt24_buffer_flag_s1_agent_rdata_fifo (
		.clk               (CLK_50_clk_clk),                                     //       clk.clk
		.reset             (LT24_buffer_flag_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lt24_buffer_flag_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (lt24_buffer_flag_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (lt24_buffer_flag_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (lt24_buffer_flag_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (lt24_buffer_flag_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (lt24_buffer_flag_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) background_mem_s1_agent (
		.clk                     (CLK_50_clk_clk),                                            //             clk.clk
		.reset                   (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (background_mem_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (background_mem_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (background_mem_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (background_mem_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (background_mem_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (background_mem_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (background_mem_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (background_mem_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (background_mem_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (background_mem_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (background_mem_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (background_mem_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (background_mem_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (background_mem_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (background_mem_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (background_mem_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (background_mem_s1_burst_adapter_source0_ready),             //              cp.ready
		.cp_valid                (background_mem_s1_burst_adapter_source0_valid),             //                .valid
		.cp_data                 (background_mem_s1_burst_adapter_source0_data),              //                .data
		.cp_startofpacket        (background_mem_s1_burst_adapter_source0_startofpacket),     //                .startofpacket
		.cp_endofpacket          (background_mem_s1_burst_adapter_source0_endofpacket),       //                .endofpacket
		.cp_channel              (background_mem_s1_burst_adapter_source0_channel),           //                .channel
		.rf_sink_ready           (background_mem_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (background_mem_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (background_mem_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (background_mem_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (background_mem_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (background_mem_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (background_mem_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (background_mem_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (background_mem_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (background_mem_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (background_mem_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (background_mem_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (background_mem_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) background_mem_s1_agent_rsp_fifo (
		.clk               (CLK_50_clk_clk),                                            //       clk.clk
		.reset             (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (background_mem_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (background_mem_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (background_mem_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (background_mem_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (background_mem_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (background_mem_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (background_mem_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (background_mem_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (background_mem_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (background_mem_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) background_mem_s1_agent_rdata_fifo (
		.clk               (CLK_50_clk_clk),                                            //       clk.clk
		.reset             (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (background_mem_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (background_mem_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (background_mem_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (background_mem_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (background_mem_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (background_mem_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) signal_out_s1_agent (
		.clk                     (ALT_PLL_c0_clk),                                 //             clk.clk
		.reset                   (signal_out_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (signal_out_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (signal_out_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (signal_out_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (signal_out_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (signal_out_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (signal_out_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (signal_out_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (signal_out_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (signal_out_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (signal_out_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (signal_out_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (signal_out_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (signal_out_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (signal_out_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (signal_out_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (signal_out_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_014_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                        //                .channel
		.rf_sink_ready           (signal_out_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (signal_out_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (signal_out_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (signal_out_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (signal_out_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (signal_out_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (signal_out_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (signal_out_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (signal_out_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (signal_out_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),              //                .error
		.rdata_fifo_src_ready    (signal_out_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (signal_out_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (signal_out_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) signal_out_s1_agent_rsp_fifo (
		.clk               (ALT_PLL_c0_clk),                                 //       clk.clk
		.reset             (signal_out_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (signal_out_s1_agent_rf_source_data),             //        in.data
		.in_valid          (signal_out_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (signal_out_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (signal_out_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (signal_out_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (signal_out_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (signal_out_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (signal_out_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (signal_out_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (signal_out_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lt24_lcd_rstn_s1_agent (
		.clk                     (ALT_PLL_c0_clk),                                    //             clk.clk
		.reset                   (CPU_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (lt24_lcd_rstn_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lt24_lcd_rstn_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lt24_lcd_rstn_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lt24_lcd_rstn_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lt24_lcd_rstn_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lt24_lcd_rstn_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lt24_lcd_rstn_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lt24_lcd_rstn_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lt24_lcd_rstn_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lt24_lcd_rstn_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lt24_lcd_rstn_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lt24_lcd_rstn_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lt24_lcd_rstn_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lt24_lcd_rstn_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lt24_lcd_rstn_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lt24_lcd_rstn_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_015_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                           //                .channel
		.rf_sink_ready           (lt24_lcd_rstn_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lt24_lcd_rstn_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lt24_lcd_rstn_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lt24_lcd_rstn_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lt24_lcd_rstn_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lt24_lcd_rstn_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lt24_lcd_rstn_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lt24_lcd_rstn_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lt24_lcd_rstn_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lt24_lcd_rstn_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (lt24_lcd_rstn_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lt24_lcd_rstn_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lt24_lcd_rstn_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lt24_lcd_rstn_s1_agent_rsp_fifo (
		.clk               (ALT_PLL_c0_clk),                                    //       clk.clk
		.reset             (CPU_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (lt24_lcd_rstn_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lt24_lcd_rstn_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lt24_lcd_rstn_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lt24_lcd_rstn_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lt24_lcd_rstn_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lt24_lcd_rstn_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lt24_lcd_rstn_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lt24_lcd_rstn_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lt24_lcd_rstn_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lt24_lcd_rstn_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (82),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lt24_touch_spi_spi_control_port_agent (
		.clk                     (ALT_PLL_c0_clk),                                                   //             clk.clk
		.reset                   (CPU_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (lt24_touch_spi_spi_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lt24_touch_spi_spi_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lt24_touch_spi_spi_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lt24_touch_spi_spi_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lt24_touch_spi_spi_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (lt24_touch_spi_spi_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lt24_touch_spi_spi_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lt24_touch_spi_spi_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (lt24_touch_spi_spi_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lt24_touch_spi_spi_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (lt24_touch_spi_spi_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (lt24_touch_spi_spi_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lt24_touch_spi_spi_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (lt24_touch_spi_spi_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (lt24_touch_spi_spi_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (lt24_touch_spi_spi_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_016_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                                          //                .channel
		.rf_sink_ready           (lt24_touch_spi_spi_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lt24_touch_spi_spi_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lt24_touch_spi_spi_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lt24_touch_spi_spi_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lt24_touch_spi_spi_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lt24_touch_spi_spi_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lt24_touch_spi_spi_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lt24_touch_spi_spi_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lt24_touch_spi_spi_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lt24_touch_spi_spi_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (lt24_touch_spi_spi_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lt24_touch_spi_spi_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lt24_touch_spi_spi_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lt24_touch_spi_spi_control_port_agent_rsp_fifo (
		.clk               (ALT_PLL_c0_clk),                                                   //       clk.clk
		.reset             (CPU_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (lt24_touch_spi_spi_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (lt24_touch_spi_spi_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (lt24_touch_spi_spi_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lt24_touch_spi_spi_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lt24_touch_spi_spi_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lt24_touch_spi_spi_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lt24_touch_spi_spi_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lt24_touch_spi_spi_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lt24_touch_spi_spi_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lt24_touch_spi_spi_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	DE0_LT24_SOPC_mm_interconnect_0_router router (
		.sink_ready         (cpu_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (ALT_PLL_c0_clk),                         //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                       //       src.ready
		.src_valid          (router_src_valid),                       //          .valid
		.src_data           (router_src_data),                        //          .data
		.src_channel        (router_src_channel),                     //          .channel
		.src_startofpacket  (router_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                  //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (ALT_PLL_c0_clk),                                //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ALT_PLL_c0_clk),                                     //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_002_src_ready),                               //       src.ready
		.src_valid          (router_002_src_valid),                               //          .valid
		.src_data           (router_002_src_data),                                //          .data
		.src_channel        (router_002_src_channel),                             //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                          //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (led_ctrl_avalon_slave_0_agent_rp_ready),          //      sink.ready
		.sink_valid         (led_ctrl_avalon_slave_0_agent_rp_valid),          //          .valid
		.sink_data          (led_ctrl_avalon_slave_0_agent_rp_data),           //          .data
		.sink_startofpacket (led_ctrl_avalon_slave_0_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (led_ctrl_avalon_slave_0_agent_rp_endofpacket),    //          .endofpacket
		.clk                (ALT_PLL_c2_clk),                                  //       clk.clk
		.reset              (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                            //       src.ready
		.src_valid          (router_003_src_valid),                            //          .valid
		.src_data           (router_003_src_data),                             //          .data
		.src_channel        (router_003_src_channel),                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                       //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (lt24_ctrl_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (lt24_ctrl_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (lt24_ctrl_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (lt24_ctrl_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lt24_ctrl_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ALT_PLL_c0_clk),                                  //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_004_src_ready),                            //       src.ready
		.src_valid          (router_004_src_valid),                            //          .valid
		.src_data           (router_004_src_data),                             //          .data
		.src_channel        (router_004_src_channel),                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                       //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (cpu_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (cpu_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ALT_PLL_c0_clk),                             //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_005_src_ready),                       //       src.ready
		.src_valid          (router_005_src_valid),                       //          .valid
		.src_data           (router_005_src_data),                        //          .data
		.src_channel        (router_005_src_channel),                     //          .channel
		.src_startofpacket  (router_005_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                  //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_005 router_006 (
		.sink_ready         (epcs_flash_controller_0_epcs_control_port_agent_rp_ready),         //      sink.ready
		.sink_valid         (epcs_flash_controller_0_epcs_control_port_agent_rp_valid),         //          .valid
		.sink_data          (epcs_flash_controller_0_epcs_control_port_agent_rp_data),          //          .data
		.sink_startofpacket (epcs_flash_controller_0_epcs_control_port_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (epcs_flash_controller_0_epcs_control_port_agent_rp_endofpacket),   //          .endofpacket
		.clk                (CLK_50_clk_clk),                                                   //       clk.clk
		.reset              (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_006_src_ready),                                             //       src.ready
		.src_valid          (router_006_src_valid),                                             //          .valid
		.src_data           (router_006_src_data),                                              //          .data
		.src_channel        (router_006_src_channel),                                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                        //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (alt_pll_pll_slave_agent_rp_ready),                          //      sink.ready
		.sink_valid         (alt_pll_pll_slave_agent_rp_valid),                          //          .valid
		.sink_data          (alt_pll_pll_slave_agent_rp_data),                           //          .data
		.sink_startofpacket (alt_pll_pll_slave_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (alt_pll_pll_slave_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (CLK_50_clk_clk),                                            //       clk.clk
		.reset              (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                      //       src.ready
		.src_valid          (router_007_src_valid),                                      //          .valid
		.src_data           (router_007_src_data),                                       //          .data
		.src_channel        (router_007_src_channel),                                    //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                 //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (sdram_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),               //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (ALT_PLL_c0_clk),                        //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                  //       src.ready
		.src_valid          (router_008_src_valid),                  //          .valid
		.src_data           (router_008_src_data),                   //          .data
		.src_channel        (router_008_src_channel),                //          .channel
		.src_startofpacket  (router_008_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)             //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (timer_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (timer_s1_agent_rp_valid),                         //          .valid
		.sink_data          (timer_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (timer_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (timer_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (ALT_PLL_c2_clk),                                  //       clk.clk
		.reset              (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                            //       src.ready
		.src_valid          (router_009_src_valid),                            //          .valid
		.src_data           (router_009_src_data),                             //          .data
		.src_channel        (router_009_src_channel),                          //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                       //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (key_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (key_s1_agent_rp_valid),                           //          .valid
		.sink_data          (key_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (key_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (key_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (ALT_PLL_c2_clk),                                  //       clk.clk
		.reset              (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                            //       src.ready
		.src_valid          (router_010_src_valid),                            //          .valid
		.src_data           (router_010_src_data),                             //          .data
		.src_channel        (router_010_src_channel),                          //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                       //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (lt24_touch_penirq_n_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (lt24_touch_penirq_n_s1_agent_rp_valid),         //          .valid
		.sink_data          (lt24_touch_penirq_n_s1_agent_rp_data),          //          .data
		.sink_startofpacket (lt24_touch_penirq_n_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lt24_touch_penirq_n_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ALT_PLL_c0_clk),                                //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_011_src_ready),                          //       src.ready
		.src_valid          (router_011_src_valid),                          //          .valid
		.src_data           (router_011_src_data),                           //          .data
		.src_channel        (router_011_src_channel),                        //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                     //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (lt24_touch_busy_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (lt24_touch_busy_s1_agent_rp_valid),         //          .valid
		.sink_data          (lt24_touch_busy_s1_agent_rp_data),          //          .data
		.sink_startofpacket (lt24_touch_busy_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lt24_touch_busy_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ALT_PLL_c0_clk),                            //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_012_src_ready),                      //       src.ready
		.src_valid          (router_012_src_valid),                      //          .valid
		.src_data           (router_012_src_data),                       //          .data
		.src_channel        (router_012_src_channel),                    //          .channel
		.src_startofpacket  (router_012_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                 //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_013 router_013 (
		.sink_ready         (pic_mem_s1_agent_rp_ready),                                 //      sink.ready
		.sink_valid         (pic_mem_s1_agent_rp_valid),                                 //          .valid
		.sink_data          (pic_mem_s1_agent_rp_data),                                  //          .data
		.sink_startofpacket (pic_mem_s1_agent_rp_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (pic_mem_s1_agent_rp_endofpacket),                           //          .endofpacket
		.clk                (CLK_50_clk_clk),                                            //       clk.clk
		.reset              (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                      //       src.ready
		.src_valid          (router_013_src_valid),                                      //          .valid
		.src_data           (router_013_src_data),                                       //          .data
		.src_channel        (router_013_src_channel),                                    //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                                 //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_002 router_014 (
		.sink_ready         (lt24_buffer_flag_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (lt24_buffer_flag_s1_agent_rp_valid),                 //          .valid
		.sink_data          (lt24_buffer_flag_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (lt24_buffer_flag_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (lt24_buffer_flag_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (CLK_50_clk_clk),                                     //       clk.clk
		.reset              (LT24_buffer_flag_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                               //       src.ready
		.src_valid          (router_014_src_valid),                               //          .valid
		.src_data           (router_014_src_data),                                //          .data
		.src_channel        (router_014_src_channel),                             //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                          //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_013 router_015 (
		.sink_ready         (background_mem_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (background_mem_s1_agent_rp_valid),                          //          .valid
		.sink_data          (background_mem_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (background_mem_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (background_mem_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (CLK_50_clk_clk),                                            //       clk.clk
		.reset              (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                      //       src.ready
		.src_valid          (router_015_src_valid),                                      //          .valid
		.src_data           (router_015_src_data),                                       //          .data
		.src_channel        (router_015_src_channel),                                    //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                                 //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_002 router_016 (
		.sink_ready         (signal_out_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (signal_out_s1_agent_rp_valid),                 //          .valid
		.sink_data          (signal_out_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (signal_out_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (signal_out_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (ALT_PLL_c0_clk),                               //       clk.clk
		.reset              (signal_out_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                         //       src.ready
		.src_valid          (router_016_src_valid),                         //          .valid
		.src_data           (router_016_src_data),                          //          .data
		.src_channel        (router_016_src_channel),                       //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                    //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_002 router_017 (
		.sink_ready         (lt24_lcd_rstn_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (lt24_lcd_rstn_s1_agent_rp_valid),         //          .valid
		.sink_data          (lt24_lcd_rstn_s1_agent_rp_data),          //          .data
		.sink_startofpacket (lt24_lcd_rstn_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lt24_lcd_rstn_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ALT_PLL_c0_clk),                          //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_017_src_ready),                    //       src.ready
		.src_valid          (router_017_src_valid),                    //          .valid
		.src_data           (router_017_src_data),                     //          .data
		.src_channel        (router_017_src_channel),                  //          .channel
		.src_startofpacket  (router_017_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)               //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_router_002 router_018 (
		.sink_ready         (lt24_touch_spi_spi_control_port_agent_rp_ready),         //      sink.ready
		.sink_valid         (lt24_touch_spi_spi_control_port_agent_rp_valid),         //          .valid
		.sink_data          (lt24_touch_spi_spi_control_port_agent_rp_data),          //          .data
		.sink_startofpacket (lt24_touch_spi_spi_control_port_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lt24_touch_spi_spi_control_port_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ALT_PLL_c0_clk),                                         //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready          (router_018_src_ready),                                   //       src.ready
		.src_valid          (router_018_src_valid),                                   //          .valid
		.src_data           (router_018_src_data),                                    //          .data
		.src_channel        (router_018_src_channel),                                 //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                              //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (17),
		.VALID_WIDTH               (17),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_data_master_limiter (
		.clk                    (ALT_PLL_c0_clk),                                //       clk.clk
		.reset                  (CPU_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //          .valid
		.cmd_sink_data          (router_src_data),                               //          .data
		.cmd_sink_channel       (router_src_channel),                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.cmd_src_ready          (cpu_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                             //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                             //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                           //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                              //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                     //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                       //          .endofpacket
		.rsp_src_ready          (cpu_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (17),
		.VALID_WIDTH               (17),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_instruction_master_limiter (
		.clk                    (ALT_PLL_c0_clk),                                       //       clk.clk
		.reset                  (CPU_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                 //          .valid
		.cmd_sink_data          (router_001_src_data),                                  //          .data
		.cmd_sink_channel       (router_001_src_channel),                               //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                         //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                           //          .endofpacket
		.cmd_src_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                              //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                          //          .endofpacket
		.rsp_src_ready          (cpu_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (64),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_BURST_TYPE_H          (61),
		.PKT_BURST_TYPE_L          (60),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (54),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (52),
		.OUT_BURSTWRAP_H           (56),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (ALT_PLL_c0_clk),                               //       cr0.clk
		.reset                 (CPU_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (sdram_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (64),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_BURST_TYPE_H          (61),
		.PKT_BURST_TYPE_L          (60),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (54),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (52),
		.OUT_BURSTWRAP_H           (56),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) pic_mem_s1_burst_adapter (
		.clk                   (CLK_50_clk_clk),                                            //       cr0.clk
		.reset                 (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (pic_mem_s1_cmd_width_adapter_src_valid),                    //     sink0.valid
		.sink0_data            (pic_mem_s1_cmd_width_adapter_src_data),                     //          .data
		.sink0_channel         (pic_mem_s1_cmd_width_adapter_src_channel),                  //          .channel
		.sink0_startofpacket   (pic_mem_s1_cmd_width_adapter_src_startofpacket),            //          .startofpacket
		.sink0_endofpacket     (pic_mem_s1_cmd_width_adapter_src_endofpacket),              //          .endofpacket
		.sink0_ready           (pic_mem_s1_cmd_width_adapter_src_ready),                    //          .ready
		.source0_valid         (pic_mem_s1_burst_adapter_source0_valid),                    //   source0.valid
		.source0_data          (pic_mem_s1_burst_adapter_source0_data),                     //          .data
		.source0_channel       (pic_mem_s1_burst_adapter_source0_channel),                  //          .channel
		.source0_startofpacket (pic_mem_s1_burst_adapter_source0_startofpacket),            //          .startofpacket
		.source0_endofpacket   (pic_mem_s1_burst_adapter_source0_endofpacket),              //          .endofpacket
		.source0_ready         (pic_mem_s1_burst_adapter_source0_ready)                     //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (64),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_BURST_TYPE_H          (61),
		.PKT_BURST_TYPE_L          (60),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (54),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (17),
		.OUT_BYTE_CNT_H            (52),
		.OUT_BURSTWRAP_H           (56),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) background_mem_s1_burst_adapter (
		.clk                   (CLK_50_clk_clk),                                            //       cr0.clk
		.reset                 (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (background_mem_s1_cmd_width_adapter_src_valid),             //     sink0.valid
		.sink0_data            (background_mem_s1_cmd_width_adapter_src_data),              //          .data
		.sink0_channel         (background_mem_s1_cmd_width_adapter_src_channel),           //          .channel
		.sink0_startofpacket   (background_mem_s1_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.sink0_endofpacket     (background_mem_s1_cmd_width_adapter_src_endofpacket),       //          .endofpacket
		.sink0_ready           (background_mem_s1_cmd_width_adapter_src_ready),             //          .ready
		.source0_valid         (background_mem_s1_burst_adapter_source0_valid),             //   source0.valid
		.source0_data          (background_mem_s1_burst_adapter_source0_data),              //          .data
		.source0_channel       (background_mem_s1_burst_adapter_source0_channel),           //          .channel
		.source0_startofpacket (background_mem_s1_burst_adapter_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (background_mem_s1_burst_adapter_source0_endofpacket),       //          .endofpacket
		.source0_ready         (background_mem_s1_burst_adapter_source0_ready)              //          .ready
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (ALT_PLL_c0_clk),                                //        clk.clk
		.reset               (CPU_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready          (cpu_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (cpu_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (cpu_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (cpu_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                          //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                          //           .valid
		.src0_data           (cmd_demux_src0_data),                           //           .data
		.src0_channel        (cmd_demux_src0_channel),                        //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                  //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                    //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                          //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                          //           .valid
		.src1_data           (cmd_demux_src1_data),                           //           .data
		.src1_channel        (cmd_demux_src1_channel),                        //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                  //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                    //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                          //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                          //           .valid
		.src2_data           (cmd_demux_src2_data),                           //           .data
		.src2_channel        (cmd_demux_src2_channel),                        //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                  //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                    //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                          //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                          //           .valid
		.src3_data           (cmd_demux_src3_data),                           //           .data
		.src3_channel        (cmd_demux_src3_channel),                        //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                  //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                    //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                          //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                          //           .valid
		.src4_data           (cmd_demux_src4_data),                           //           .data
		.src4_channel        (cmd_demux_src4_channel),                        //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                  //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                    //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                          //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                          //           .valid
		.src5_data           (cmd_demux_src5_data),                           //           .data
		.src5_channel        (cmd_demux_src5_channel),                        //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                  //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                    //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                          //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                          //           .valid
		.src6_data           (cmd_demux_src6_data),                           //           .data
		.src6_channel        (cmd_demux_src6_channel),                        //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                  //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                    //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                          //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                          //           .valid
		.src7_data           (cmd_demux_src7_data),                           //           .data
		.src7_channel        (cmd_demux_src7_channel),                        //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                  //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                    //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                          //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                          //           .valid
		.src8_data           (cmd_demux_src8_data),                           //           .data
		.src8_channel        (cmd_demux_src8_channel),                        //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                  //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                    //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                          //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                          //           .valid
		.src9_data           (cmd_demux_src9_data),                           //           .data
		.src9_channel        (cmd_demux_src9_channel),                        //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                  //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                    //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                         //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                         //           .valid
		.src10_data          (cmd_demux_src10_data),                          //           .data
		.src10_channel       (cmd_demux_src10_channel),                       //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                 //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                   //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                         //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                         //           .valid
		.src11_data          (cmd_demux_src11_data),                          //           .data
		.src11_channel       (cmd_demux_src11_channel),                       //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                 //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                   //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                         //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                         //           .valid
		.src12_data          (cmd_demux_src12_data),                          //           .data
		.src12_channel       (cmd_demux_src12_channel),                       //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                 //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                   //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                         //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                         //           .valid
		.src13_data          (cmd_demux_src13_data),                          //           .data
		.src13_channel       (cmd_demux_src13_channel),                       //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                 //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                   //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                         //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                         //           .valid
		.src14_data          (cmd_demux_src14_data),                          //           .data
		.src14_channel       (cmd_demux_src14_channel),                       //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                 //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                   //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                         //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                         //           .valid
		.src15_data          (cmd_demux_src15_data),                          //           .data
		.src15_channel       (cmd_demux_src15_channel),                       //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                 //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                   //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                         //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                         //           .valid
		.src16_data          (cmd_demux_src16_data),                          //           .data
		.src16_channel       (cmd_demux_src16_channel),                       //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                 //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket)                    //           .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (ALT_PLL_c0_clk),                                       //        clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (cpu_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                             //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                             //           .valid
		.src0_data          (cmd_demux_001_src0_data),                              //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                           //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                     //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                       //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                             //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                             //           .valid
		.src1_data          (cmd_demux_001_src1_data),                              //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                           //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                     //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                       //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                             //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                             //           .valid
		.src2_data          (cmd_demux_001_src2_data),                              //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                           //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                     //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                        //           .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (ALT_PLL_c0_clk),                        //       clk.clk
		.reset               (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_src_valid),                     //          .valid
		.src_data            (cmd_mux_src_data),                      //          .data
		.src_channel         (cmd_mux_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                //          .channel
		.sink0_data          (cmd_demux_src0_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)             //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (ALT_PLL_c2_clk),                                  //       clk.clk
		.reset               (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                           //          .valid
		.src_data            (cmd_mux_001_src_data),                            //          .data
		.src_channel         (cmd_mux_001_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_out_ready),                               //     sink0.ready
		.sink0_valid         (crosser_out_valid),                               //          .valid
		.sink0_channel       (crosser_out_channel),                             //          .channel
		.sink0_data          (crosser_out_data),                                //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                          //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (ALT_PLL_c0_clk),                        //       clk.clk
		.reset               (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                 //          .valid
		.src_data            (cmd_mux_002_src_data),                  //          .data
		.src_channel         (cmd_mux_002_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                //          .channel
		.sink0_data          (cmd_demux_src2_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)             //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (ALT_PLL_c0_clk),                        //       clk.clk
		.reset               (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                 //          .valid
		.src_data            (cmd_mux_003_src_data),                  //          .data
		.src_channel         (cmd_mux_003_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                //          .channel
		.sink0_data          (cmd_demux_src3_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src0_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)         //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux_003 cmd_mux_004 (
		.clk                 (CLK_50_clk_clk),                                            //       clk.clk
		.reset               (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                     //          .valid
		.src_data            (cmd_mux_004_src_data),                                      //          .data
		.src_channel         (cmd_mux_004_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                     //          .valid
		.sink0_channel       (crosser_001_out_channel),                                   //          .channel
		.sink0_data          (crosser_001_out_data),                                      //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                               //          .endofpacket
		.sink1_ready         (crosser_008_out_ready),                                     //     sink1.ready
		.sink1_valid         (crosser_008_out_valid),                                     //          .valid
		.sink1_channel       (crosser_008_out_channel),                                   //          .channel
		.sink1_data          (crosser_008_out_data),                                      //          .data
		.sink1_startofpacket (crosser_008_out_startofpacket),                             //          .startofpacket
		.sink1_endofpacket   (crosser_008_out_endofpacket)                                //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (CLK_50_clk_clk),                                            //       clk.clk
		.reset               (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                     //          .valid
		.src_data            (cmd_mux_005_src_data),                                      //          .data
		.src_channel         (cmd_mux_005_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                     //          .valid
		.sink0_channel       (crosser_002_out_channel),                                   //          .channel
		.sink0_data          (crosser_002_out_data),                                      //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                                //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux_003 cmd_mux_006 (
		.clk                 (ALT_PLL_c0_clk),                        //       clk.clk
		.reset               (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                 //          .valid
		.src_data            (cmd_mux_006_src_data),                  //          .data
		.src_channel         (cmd_mux_006_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                //          .channel
		.sink0_data          (cmd_demux_src6_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src2_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)         //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (ALT_PLL_c2_clk),                                  //       clk.clk
		.reset               (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                           //          .valid
		.src_data            (cmd_mux_007_src_data),                            //          .data
		.src_channel         (cmd_mux_007_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                           //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                           //          .valid
		.sink0_channel       (crosser_003_out_channel),                         //          .channel
		.sink0_data          (crosser_003_out_data),                            //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                      //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (ALT_PLL_c2_clk),                                  //       clk.clk
		.reset               (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                           //          .valid
		.src_data            (cmd_mux_008_src_data),                            //          .data
		.src_channel         (cmd_mux_008_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                           //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                           //          .valid
		.sink0_channel       (crosser_004_out_channel),                         //          .channel
		.sink0_data          (crosser_004_out_data),                            //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)                      //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (ALT_PLL_c0_clk),                        //       clk.clk
		.reset               (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                 //          .valid
		.src_data            (cmd_mux_009_src_data),                  //          .data
		.src_channel         (cmd_mux_009_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                //          .channel
		.sink0_data          (cmd_demux_src9_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)             //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (ALT_PLL_c0_clk),                        //       clk.clk
		.reset               (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                 //          .valid
		.src_data            (cmd_mux_010_src_data),                  //          .data
		.src_channel         (cmd_mux_010_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src10_channel),               //          .channel
		.sink0_data          (cmd_demux_src10_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)            //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (CLK_50_clk_clk),                                            //       clk.clk
		.reset               (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                     //          .valid
		.src_data            (cmd_mux_011_src_data),                                      //          .data
		.src_channel         (cmd_mux_011_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                                     //          .valid
		.sink0_channel       (crosser_005_out_channel),                                   //          .channel
		.sink0_data          (crosser_005_out_data),                                      //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)                                //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (CLK_50_clk_clk),                                     //       clk.clk
		.reset               (LT24_buffer_flag_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                              //          .valid
		.src_data            (cmd_mux_012_src_data),                               //          .data
		.src_channel         (cmd_mux_012_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (crosser_006_out_ready),                              //     sink0.ready
		.sink0_valid         (crosser_006_out_valid),                              //          .valid
		.sink0_channel       (crosser_006_out_channel),                            //          .channel
		.sink0_data          (crosser_006_out_data),                               //          .data
		.sink0_startofpacket (crosser_006_out_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (crosser_006_out_endofpacket)                         //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (CLK_50_clk_clk),                                            //       clk.clk
		.reset               (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                     //          .valid
		.src_data            (cmd_mux_013_src_data),                                      //          .data
		.src_channel         (cmd_mux_013_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_007_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_007_out_valid),                                     //          .valid
		.sink0_channel       (crosser_007_out_channel),                                   //          .channel
		.sink0_data          (crosser_007_out_data),                                      //          .data
		.sink0_startofpacket (crosser_007_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_007_out_endofpacket)                                //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (ALT_PLL_c0_clk),                               //       clk.clk
		.reset               (signal_out_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                        //          .valid
		.src_data            (cmd_mux_014_src_data),                         //          .data
		.src_channel         (cmd_mux_014_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                      //          .channel
		.sink0_data          (cmd_demux_src14_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                   //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (ALT_PLL_c0_clk),                        //       clk.clk
		.reset               (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                 //          .valid
		.src_data            (cmd_mux_015_src_data),                  //          .data
		.src_channel         (cmd_mux_015_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src15_channel),               //          .channel
		.sink0_data          (cmd_demux_src15_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)            //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (ALT_PLL_c0_clk),                        //       clk.clk
		.reset               (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                 //          .valid
		.src_data            (cmd_mux_016_src_data),                  //          .data
		.src_channel         (cmd_mux_016_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src16_channel),               //          .channel
		.sink0_data          (cmd_demux_src16_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)            //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (ALT_PLL_c0_clk),                        //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                  //      sink.ready
		.sink_channel       (router_002_src_channel),                //          .channel
		.sink_data          (router_002_src_data),                   //          .data
		.sink_startofpacket (router_002_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_002_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_src0_data),                   //          .data
		.src0_channel       (rsp_demux_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)             //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (ALT_PLL_c2_clk),                                  //       clk.clk
		.reset              (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                            //      sink.ready
		.sink_channel       (router_003_src_channel),                          //          .channel
		.sink_data          (router_003_src_data),                             //          .data
		.sink_startofpacket (router_003_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_003_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_001_src0_data),                         //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                   //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (ALT_PLL_c0_clk),                        //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                  //      sink.ready
		.sink_channel       (router_004_src_channel),                //          .channel
		.sink_data          (router_004_src_data),                   //          .data
		.sink_startofpacket (router_004_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_004_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),              //          .valid
		.src0_data          (rsp_demux_002_src0_data),               //          .data
		.src0_channel       (rsp_demux_002_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)         //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (ALT_PLL_c0_clk),                        //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                  //      sink.ready
		.sink_channel       (router_005_src_channel),                //          .channel
		.sink_data          (router_005_src_data),                   //          .data
		.sink_startofpacket (router_005_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_005_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),              //          .valid
		.src0_data          (rsp_demux_003_src0_data),               //          .data
		.src0_channel       (rsp_demux_003_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),              //          .valid
		.src1_data          (rsp_demux_003_src1_data),               //          .data
		.src1_channel       (rsp_demux_003_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)         //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux_003 rsp_demux_004 (
		.clk                (CLK_50_clk_clk),                                            //       clk.clk
		.reset              (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                      //      sink.ready
		.sink_channel       (router_006_src_channel),                                    //          .channel
		.sink_data          (router_006_src_data),                                       //          .data
		.sink_startofpacket (router_006_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_006_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_004_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                             //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (CLK_50_clk_clk),                                            //       clk.clk
		.reset              (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                      //      sink.ready
		.sink_channel       (router_007_src_channel),                                    //          .channel
		.sink_data          (router_007_src_data),                                       //          .data
		.sink_startofpacket (router_007_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_007_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                             //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux_003 rsp_demux_006 (
		.clk                (ALT_PLL_c0_clk),                               //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.sink_ready         (sdram_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_006_src0_data),                      //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_006_src1_data),                      //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux_001 rsp_demux_007 (
		.clk                (ALT_PLL_c2_clk),                                  //       clk.clk
		.reset              (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                            //      sink.ready
		.sink_channel       (router_009_src_channel),                          //          .channel
		.sink_data          (router_009_src_data),                             //          .data
		.sink_startofpacket (router_009_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_009_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_007_src0_data),                         //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                   //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux_001 rsp_demux_008 (
		.clk                (ALT_PLL_c2_clk),                                  //       clk.clk
		.reset              (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                            //      sink.ready
		.sink_channel       (router_010_src_channel),                          //          .channel
		.sink_data          (router_010_src_data),                             //          .data
		.sink_startofpacket (router_010_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_010_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_008_src0_data),                         //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                   //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (ALT_PLL_c0_clk),                        //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                  //      sink.ready
		.sink_channel       (router_011_src_channel),                //          .channel
		.sink_data          (router_011_src_data),                   //          .data
		.sink_startofpacket (router_011_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_011_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),              //          .valid
		.src0_data          (rsp_demux_009_src0_data),               //          .data
		.src0_channel       (rsp_demux_009_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)         //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (ALT_PLL_c0_clk),                        //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                  //      sink.ready
		.sink_channel       (router_012_src_channel),                //          .channel
		.sink_data          (router_012_src_data),                   //          .data
		.sink_startofpacket (router_012_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_012_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),              //          .valid
		.src0_data          (rsp_demux_010_src0_data),               //          .data
		.src0_channel       (rsp_demux_010_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)         //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (CLK_50_clk_clk),                                            //       clk.clk
		.reset              (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (pic_mem_s1_rsp_width_adapter_src_ready),                    //      sink.ready
		.sink_channel       (pic_mem_s1_rsp_width_adapter_src_channel),                  //          .channel
		.sink_data          (pic_mem_s1_rsp_width_adapter_src_data),                     //          .data
		.sink_startofpacket (pic_mem_s1_rsp_width_adapter_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (pic_mem_s1_rsp_width_adapter_src_endofpacket),              //          .endofpacket
		.sink_valid         (pic_mem_s1_rsp_width_adapter_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_011_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                             //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (CLK_50_clk_clk),                                     //       clk.clk
		.reset              (LT24_buffer_flag_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                               //      sink.ready
		.sink_channel       (router_014_src_channel),                             //          .channel
		.sink_data          (router_014_src_data),                                //          .data
		.sink_startofpacket (router_014_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_014_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_012_src0_data),                            //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                      //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (CLK_50_clk_clk),                                            //       clk.clk
		.reset              (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (background_mem_s1_rsp_width_adapter_src_ready),             //      sink.ready
		.sink_channel       (background_mem_s1_rsp_width_adapter_src_channel),           //          .channel
		.sink_data          (background_mem_s1_rsp_width_adapter_src_data),              //          .data
		.sink_startofpacket (background_mem_s1_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink_endofpacket   (background_mem_s1_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink_valid         (background_mem_s1_rsp_width_adapter_src_valid),             //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_013_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                             //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (ALT_PLL_c0_clk),                               //       clk.clk
		.reset              (signal_out_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                         //      sink.ready
		.sink_channel       (router_016_src_channel),                       //          .channel
		.sink_data          (router_016_src_data),                          //          .data
		.sink_startofpacket (router_016_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_016_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_014_src0_data),                      //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (ALT_PLL_c0_clk),                        //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                  //      sink.ready
		.sink_channel       (router_017_src_channel),                //          .channel
		.sink_data          (router_017_src_data),                   //          .data
		.sink_startofpacket (router_017_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_017_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),              //          .valid
		.src0_data          (rsp_demux_015_src0_data),               //          .data
		.src0_channel       (rsp_demux_015_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)         //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (ALT_PLL_c0_clk),                        //       clk.clk
		.reset              (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                  //      sink.ready
		.sink_channel       (router_018_src_channel),                //          .channel
		.sink_data          (router_018_src_data),                   //          .data
		.sink_startofpacket (router_018_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_018_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),              //          .valid
		.src0_data          (rsp_demux_016_src0_data),               //          .data
		.src0_channel       (rsp_demux_016_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)         //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (ALT_PLL_c0_clk),                        //       clk.clk
		.reset                (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                     //       src.ready
		.src_valid            (rsp_mux_src_valid),                     //          .valid
		.src_data             (rsp_mux_src_data),                      //          .data
		.src_channel          (rsp_mux_src_channel),                   //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                  //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                  //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                //          .channel
		.sink0_data           (rsp_demux_src0_data),                   //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),          //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),            //          .endofpacket
		.sink1_ready          (crosser_009_out_ready),                 //     sink1.ready
		.sink1_valid          (crosser_009_out_valid),                 //          .valid
		.sink1_channel        (crosser_009_out_channel),               //          .channel
		.sink1_data           (crosser_009_out_data),                  //          .data
		.sink1_startofpacket  (crosser_009_out_startofpacket),         //          .startofpacket
		.sink1_endofpacket    (crosser_009_out_endofpacket),           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),              //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),              //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),            //          .channel
		.sink2_data           (rsp_demux_002_src0_data),               //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),      //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),        //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),              //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),              //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),            //          .channel
		.sink3_data           (rsp_demux_003_src0_data),               //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),      //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),        //          .endofpacket
		.sink4_ready          (crosser_010_out_ready),                 //     sink4.ready
		.sink4_valid          (crosser_010_out_valid),                 //          .valid
		.sink4_channel        (crosser_010_out_channel),               //          .channel
		.sink4_data           (crosser_010_out_data),                  //          .data
		.sink4_startofpacket  (crosser_010_out_startofpacket),         //          .startofpacket
		.sink4_endofpacket    (crosser_010_out_endofpacket),           //          .endofpacket
		.sink5_ready          (crosser_012_out_ready),                 //     sink5.ready
		.sink5_valid          (crosser_012_out_valid),                 //          .valid
		.sink5_channel        (crosser_012_out_channel),               //          .channel
		.sink5_data           (crosser_012_out_data),                  //          .data
		.sink5_startofpacket  (crosser_012_out_startofpacket),         //          .startofpacket
		.sink5_endofpacket    (crosser_012_out_endofpacket),           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),              //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),              //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),            //          .channel
		.sink6_data           (rsp_demux_006_src0_data),               //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),      //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),        //          .endofpacket
		.sink7_ready          (crosser_013_out_ready),                 //     sink7.ready
		.sink7_valid          (crosser_013_out_valid),                 //          .valid
		.sink7_channel        (crosser_013_out_channel),               //          .channel
		.sink7_data           (crosser_013_out_data),                  //          .data
		.sink7_startofpacket  (crosser_013_out_startofpacket),         //          .startofpacket
		.sink7_endofpacket    (crosser_013_out_endofpacket),           //          .endofpacket
		.sink8_ready          (crosser_014_out_ready),                 //     sink8.ready
		.sink8_valid          (crosser_014_out_valid),                 //          .valid
		.sink8_channel        (crosser_014_out_channel),               //          .channel
		.sink8_data           (crosser_014_out_data),                  //          .data
		.sink8_startofpacket  (crosser_014_out_startofpacket),         //          .startofpacket
		.sink8_endofpacket    (crosser_014_out_endofpacket),           //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),              //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),              //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),            //          .channel
		.sink9_data           (rsp_demux_009_src0_data),               //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),      //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),        //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),              //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),              //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),            //          .channel
		.sink10_data          (rsp_demux_010_src0_data),               //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),      //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),        //          .endofpacket
		.sink11_ready         (crosser_015_out_ready),                 //    sink11.ready
		.sink11_valid         (crosser_015_out_valid),                 //          .valid
		.sink11_channel       (crosser_015_out_channel),               //          .channel
		.sink11_data          (crosser_015_out_data),                  //          .data
		.sink11_startofpacket (crosser_015_out_startofpacket),         //          .startofpacket
		.sink11_endofpacket   (crosser_015_out_endofpacket),           //          .endofpacket
		.sink12_ready         (crosser_016_out_ready),                 //    sink12.ready
		.sink12_valid         (crosser_016_out_valid),                 //          .valid
		.sink12_channel       (crosser_016_out_channel),               //          .channel
		.sink12_data          (crosser_016_out_data),                  //          .data
		.sink12_startofpacket (crosser_016_out_startofpacket),         //          .startofpacket
		.sink12_endofpacket   (crosser_016_out_endofpacket),           //          .endofpacket
		.sink13_ready         (crosser_017_out_ready),                 //    sink13.ready
		.sink13_valid         (crosser_017_out_valid),                 //          .valid
		.sink13_channel       (crosser_017_out_channel),               //          .channel
		.sink13_data          (crosser_017_out_data),                  //          .data
		.sink13_startofpacket (crosser_017_out_startofpacket),         //          .startofpacket
		.sink13_endofpacket   (crosser_017_out_endofpacket),           //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),              //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),              //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),            //          .channel
		.sink14_data          (rsp_demux_014_src0_data),               //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),      //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),        //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),              //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),              //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),            //          .channel
		.sink15_data          (rsp_demux_015_src0_data),               //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),      //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),        //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),              //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),              //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),            //          .channel
		.sink16_data          (rsp_demux_016_src0_data),               //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),      //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket)         //          .endofpacket
	);

	DE0_LT24_SOPC_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (ALT_PLL_c0_clk),                        //       clk.clk
		.reset               (CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                 //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                 //          .valid
		.src_data            (rsp_mux_001_src_data),                  //          .data
		.src_channel         (rsp_mux_001_src_channel),               //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),           //          .endofpacket
		.sink0_ready         (rsp_demux_003_src1_ready),              //     sink0.ready
		.sink0_valid         (rsp_demux_003_src1_valid),              //          .valid
		.sink0_channel       (rsp_demux_003_src1_channel),            //          .channel
		.sink0_data          (rsp_demux_003_src1_data),               //          .data
		.sink0_startofpacket (rsp_demux_003_src1_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src1_endofpacket),        //          .endofpacket
		.sink1_ready         (crosser_011_out_ready),                 //     sink1.ready
		.sink1_valid         (crosser_011_out_valid),                 //          .valid
		.sink1_channel       (crosser_011_out_channel),               //          .channel
		.sink1_data          (crosser_011_out_data),                  //          .data
		.sink1_startofpacket (crosser_011_out_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (crosser_011_out_endofpacket),           //          .endofpacket
		.sink2_ready         (rsp_demux_006_src1_ready),              //     sink2.ready
		.sink2_valid         (rsp_demux_006_src1_valid),              //          .valid
		.sink2_channel       (rsp_demux_006_src1_channel),            //          .channel
		.sink2_data          (rsp_demux_006_src1_data),               //          .data
		.sink2_startofpacket (rsp_demux_006_src1_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (rsp_demux_006_src1_endofpacket)         //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (44),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (53),
		.IN_PKT_BYTE_CNT_L             (51),
		.IN_PKT_TRANS_COMPRESSED_READ  (45),
		.IN_PKT_TRANS_WRITE            (47),
		.IN_PKT_BURSTWRAP_H            (56),
		.IN_PKT_BURSTWRAP_L            (54),
		.IN_PKT_BURST_SIZE_H           (59),
		.IN_PKT_BURST_SIZE_L           (57),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (50),
		.IN_PKT_BURST_TYPE_H           (61),
		.IN_PKT_BURST_TYPE_L           (60),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (89),
		.OUT_PKT_ADDR_H                (62),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (71),
		.OUT_PKT_BYTE_CNT_L            (69),
		.OUT_PKT_TRANS_COMPRESSED_READ (63),
		.OUT_PKT_BURST_SIZE_H          (77),
		.OUT_PKT_BURST_SIZE_L          (75),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (68),
		.OUT_PKT_BURST_TYPE_H          (79),
		.OUT_PKT_BURST_TYPE_L          (78),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_ST_DATA_W                 (107),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_rsp_width_adapter (
		.clk                  (ALT_PLL_c0_clk),                               //       clk.clk
		.reset                (CPU_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (router_008_src_valid),                         //      sink.valid
		.in_channel           (router_008_src_channel),                       //          .channel
		.in_startofpacket     (router_008_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_008_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_008_src_ready),                         //          .ready
		.in_data              (router_008_src_data),                          //          .data
		.out_endofpacket      (sdram_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (44),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (53),
		.IN_PKT_BYTE_CNT_L             (51),
		.IN_PKT_TRANS_COMPRESSED_READ  (45),
		.IN_PKT_TRANS_WRITE            (47),
		.IN_PKT_BURSTWRAP_H            (56),
		.IN_PKT_BURSTWRAP_L            (54),
		.IN_PKT_BURST_SIZE_H           (59),
		.IN_PKT_BURST_SIZE_L           (57),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (50),
		.IN_PKT_BURST_TYPE_H           (61),
		.IN_PKT_BURST_TYPE_L           (60),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (89),
		.OUT_PKT_ADDR_H                (62),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (71),
		.OUT_PKT_BYTE_CNT_L            (69),
		.OUT_PKT_TRANS_COMPRESSED_READ (63),
		.OUT_PKT_BURST_SIZE_H          (77),
		.OUT_PKT_BURST_SIZE_L          (75),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (68),
		.OUT_PKT_BURST_TYPE_H          (79),
		.OUT_PKT_BURST_TYPE_L          (78),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_ST_DATA_W                 (107),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pic_mem_s1_rsp_width_adapter (
		.clk                  (CLK_50_clk_clk),                                            //       clk.clk
		.reset                (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_013_src_valid),                                      //      sink.valid
		.in_channel           (router_013_src_channel),                                    //          .channel
		.in_startofpacket     (router_013_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_013_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_013_src_ready),                                      //          .ready
		.in_data              (router_013_src_data),                                       //          .data
		.out_endofpacket      (pic_mem_s1_rsp_width_adapter_src_endofpacket),              //       src.endofpacket
		.out_data             (pic_mem_s1_rsp_width_adapter_src_data),                     //          .data
		.out_channel          (pic_mem_s1_rsp_width_adapter_src_channel),                  //          .channel
		.out_valid            (pic_mem_s1_rsp_width_adapter_src_valid),                    //          .valid
		.out_ready            (pic_mem_s1_rsp_width_adapter_src_ready),                    //          .ready
		.out_startofpacket    (pic_mem_s1_rsp_width_adapter_src_startofpacket),            //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (44),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (53),
		.IN_PKT_BYTE_CNT_L             (51),
		.IN_PKT_TRANS_COMPRESSED_READ  (45),
		.IN_PKT_TRANS_WRITE            (47),
		.IN_PKT_BURSTWRAP_H            (56),
		.IN_PKT_BURSTWRAP_L            (54),
		.IN_PKT_BURST_SIZE_H           (59),
		.IN_PKT_BURST_SIZE_L           (57),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (50),
		.IN_PKT_BURST_TYPE_H           (61),
		.IN_PKT_BURST_TYPE_L           (60),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (89),
		.OUT_PKT_ADDR_H                (62),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (71),
		.OUT_PKT_BYTE_CNT_L            (69),
		.OUT_PKT_TRANS_COMPRESSED_READ (63),
		.OUT_PKT_BURST_SIZE_H          (77),
		.OUT_PKT_BURST_SIZE_L          (75),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (68),
		.OUT_PKT_BURST_TYPE_H          (79),
		.OUT_PKT_BURST_TYPE_L          (78),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_ST_DATA_W                 (107),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) background_mem_s1_rsp_width_adapter (
		.clk                  (CLK_50_clk_clk),                                            //       clk.clk
		.reset                (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_015_src_valid),                                      //      sink.valid
		.in_channel           (router_015_src_channel),                                    //          .channel
		.in_startofpacket     (router_015_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_015_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_015_src_ready),                                      //          .ready
		.in_data              (router_015_src_data),                                       //          .data
		.out_endofpacket      (background_mem_s1_rsp_width_adapter_src_endofpacket),       //       src.endofpacket
		.out_data             (background_mem_s1_rsp_width_adapter_src_data),              //          .data
		.out_channel          (background_mem_s1_rsp_width_adapter_src_channel),           //          .channel
		.out_valid            (background_mem_s1_rsp_width_adapter_src_valid),             //          .valid
		.out_ready            (background_mem_s1_rsp_width_adapter_src_ready),             //          .ready
		.out_startofpacket    (background_mem_s1_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (62),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (71),
		.IN_PKT_BYTE_CNT_L             (69),
		.IN_PKT_TRANS_COMPRESSED_READ  (63),
		.IN_PKT_TRANS_WRITE            (65),
		.IN_PKT_BURSTWRAP_H            (74),
		.IN_PKT_BURSTWRAP_L            (72),
		.IN_PKT_BURST_SIZE_H           (77),
		.IN_PKT_BURST_SIZE_L           (75),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (68),
		.IN_PKT_BURST_TYPE_H           (79),
		.IN_PKT_BURST_TYPE_L           (78),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_ST_DATA_W                  (107),
		.OUT_PKT_ADDR_H                (44),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (53),
		.OUT_PKT_BYTE_CNT_L            (51),
		.OUT_PKT_TRANS_COMPRESSED_READ (45),
		.OUT_PKT_BURST_SIZE_H          (59),
		.OUT_PKT_BURST_SIZE_L          (57),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (50),
		.OUT_PKT_BURST_TYPE_H          (61),
		.OUT_PKT_BURST_TYPE_L          (60),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (89),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_cmd_width_adapter (
		.clk                  (ALT_PLL_c0_clk),                               //       clk.clk
		.reset                (CPU_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (cmd_mux_006_src_valid),                        //      sink.valid
		.in_channel           (cmd_mux_006_src_channel),                      //          .channel
		.in_startofpacket     (cmd_mux_006_src_startofpacket),                //          .startofpacket
		.in_endofpacket       (cmd_mux_006_src_endofpacket),                  //          .endofpacket
		.in_ready             (cmd_mux_006_src_ready),                        //          .ready
		.in_data              (cmd_mux_006_src_data),                         //          .data
		.out_endofpacket      (sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (62),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (71),
		.IN_PKT_BYTE_CNT_L             (69),
		.IN_PKT_TRANS_COMPRESSED_READ  (63),
		.IN_PKT_TRANS_WRITE            (65),
		.IN_PKT_BURSTWRAP_H            (74),
		.IN_PKT_BURSTWRAP_L            (72),
		.IN_PKT_BURST_SIZE_H           (77),
		.IN_PKT_BURST_SIZE_L           (75),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (68),
		.IN_PKT_BURST_TYPE_H           (79),
		.IN_PKT_BURST_TYPE_L           (78),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_ST_DATA_W                  (107),
		.OUT_PKT_ADDR_H                (44),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (53),
		.OUT_PKT_BYTE_CNT_L            (51),
		.OUT_PKT_TRANS_COMPRESSED_READ (45),
		.OUT_PKT_BURST_SIZE_H          (59),
		.OUT_PKT_BURST_SIZE_L          (57),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (50),
		.OUT_PKT_BURST_TYPE_H          (61),
		.OUT_PKT_BURST_TYPE_L          (60),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (89),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pic_mem_s1_cmd_width_adapter (
		.clk                  (CLK_50_clk_clk),                                            //       clk.clk
		.reset                (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_011_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_011_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_011_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_011_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_011_src_ready),                                     //          .ready
		.in_data              (cmd_mux_011_src_data),                                      //          .data
		.out_endofpacket      (pic_mem_s1_cmd_width_adapter_src_endofpacket),              //       src.endofpacket
		.out_data             (pic_mem_s1_cmd_width_adapter_src_data),                     //          .data
		.out_channel          (pic_mem_s1_cmd_width_adapter_src_channel),                  //          .channel
		.out_valid            (pic_mem_s1_cmd_width_adapter_src_valid),                    //          .valid
		.out_ready            (pic_mem_s1_cmd_width_adapter_src_ready),                    //          .ready
		.out_startofpacket    (pic_mem_s1_cmd_width_adapter_src_startofpacket),            //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (62),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (71),
		.IN_PKT_BYTE_CNT_L             (69),
		.IN_PKT_TRANS_COMPRESSED_READ  (63),
		.IN_PKT_TRANS_WRITE            (65),
		.IN_PKT_BURSTWRAP_H            (74),
		.IN_PKT_BURSTWRAP_L            (72),
		.IN_PKT_BURST_SIZE_H           (77),
		.IN_PKT_BURST_SIZE_L           (75),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (68),
		.IN_PKT_BURST_TYPE_H           (79),
		.IN_PKT_BURST_TYPE_L           (78),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_ST_DATA_W                  (107),
		.OUT_PKT_ADDR_H                (44),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (53),
		.OUT_PKT_BYTE_CNT_L            (51),
		.OUT_PKT_TRANS_COMPRESSED_READ (45),
		.OUT_PKT_BURST_SIZE_H          (59),
		.OUT_PKT_BURST_SIZE_L          (57),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (50),
		.OUT_PKT_BURST_TYPE_H          (61),
		.OUT_PKT_BURST_TYPE_L          (60),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (89),
		.ST_CHANNEL_W                  (17),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) background_mem_s1_cmd_width_adapter (
		.clk                  (CLK_50_clk_clk),                                            //       clk.clk
		.reset                (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_013_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_013_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_013_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_013_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_013_src_ready),                                     //          .ready
		.in_data              (cmd_mux_013_src_data),                                      //          .data
		.out_endofpacket      (background_mem_s1_cmd_width_adapter_src_endofpacket),       //       src.endofpacket
		.out_data             (background_mem_s1_cmd_width_adapter_src_data),              //          .data
		.out_channel          (background_mem_s1_cmd_width_adapter_src_channel),           //          .channel
		.out_valid            (background_mem_s1_cmd_width_adapter_src_valid),             //          .valid
		.out_ready            (background_mem_s1_cmd_width_adapter_src_ready),             //          .ready
		.out_startofpacket    (background_mem_s1_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (ALT_PLL_c0_clk),                                  //        in_clk.clk
		.in_reset          (CPU_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (ALT_PLL_c2_clk),                                  //       out_clk.clk
		.out_reset         (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                            //            in.ready
		.in_valid          (cmd_demux_src1_valid),                            //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                      //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                          //              .channel
		.in_data           (cmd_demux_src1_data),                             //              .data
		.out_ready         (crosser_out_ready),                               //           out.ready
		.out_valid         (crosser_out_valid),                               //              .valid
		.out_startofpacket (crosser_out_startofpacket),                       //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                         //              .endofpacket
		.out_channel       (crosser_out_channel),                             //              .channel
		.out_data          (crosser_out_data),                                //              .data
		.in_empty          (1'b0),                                            //   (terminated)
		.in_error          (1'b0),                                            //   (terminated)
		.out_empty         (),                                                //   (terminated)
		.out_error         ()                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (ALT_PLL_c0_clk),                                            //        in_clk.clk
		.in_reset          (CPU_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (CLK_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                                      //            in.ready
		.in_valid          (cmd_demux_src4_valid),                                      //              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                              //              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                                //              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                                    //              .channel
		.in_data           (cmd_demux_src4_data),                                       //              .data
		.out_ready         (crosser_001_out_ready),                                     //           out.ready
		.out_valid         (crosser_001_out_valid),                                     //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                   //              .channel
		.out_data          (crosser_001_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (ALT_PLL_c0_clk),                                            //        in_clk.clk
		.in_reset          (CPU_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (CLK_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                                      //            in.ready
		.in_valid          (cmd_demux_src5_valid),                                      //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                              //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                                //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                                    //              .channel
		.in_data           (cmd_demux_src5_data),                                       //              .data
		.out_ready         (crosser_002_out_ready),                                     //           out.ready
		.out_valid         (crosser_002_out_valid),                                     //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                   //              .channel
		.out_data          (crosser_002_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (ALT_PLL_c0_clk),                                  //        in_clk.clk
		.in_reset          (CPU_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (ALT_PLL_c2_clk),                                  //       out_clk.clk
		.out_reset         (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src7_ready),                            //            in.ready
		.in_valid          (cmd_demux_src7_valid),                            //              .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),                      //              .endofpacket
		.in_channel        (cmd_demux_src7_channel),                          //              .channel
		.in_data           (cmd_demux_src7_data),                             //              .data
		.out_ready         (crosser_003_out_ready),                           //           out.ready
		.out_valid         (crosser_003_out_valid),                           //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                   //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                     //              .endofpacket
		.out_channel       (crosser_003_out_channel),                         //              .channel
		.out_data          (crosser_003_out_data),                            //              .data
		.in_empty          (1'b0),                                            //   (terminated)
		.in_error          (1'b0),                                            //   (terminated)
		.out_empty         (),                                                //   (terminated)
		.out_error         ()                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (ALT_PLL_c0_clk),                                  //        in_clk.clk
		.in_reset          (CPU_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (ALT_PLL_c2_clk),                                  //       out_clk.clk
		.out_reset         (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src8_ready),                            //            in.ready
		.in_valid          (cmd_demux_src8_valid),                            //              .valid
		.in_startofpacket  (cmd_demux_src8_startofpacket),                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src8_endofpacket),                      //              .endofpacket
		.in_channel        (cmd_demux_src8_channel),                          //              .channel
		.in_data           (cmd_demux_src8_data),                             //              .data
		.out_ready         (crosser_004_out_ready),                           //           out.ready
		.out_valid         (crosser_004_out_valid),                           //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                   //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                     //              .endofpacket
		.out_channel       (crosser_004_out_channel),                         //              .channel
		.out_data          (crosser_004_out_data),                            //              .data
		.in_empty          (1'b0),                                            //   (terminated)
		.in_error          (1'b0),                                            //   (terminated)
		.out_empty         (),                                                //   (terminated)
		.out_error         ()                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (ALT_PLL_c0_clk),                                            //        in_clk.clk
		.in_reset          (CPU_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (CLK_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src11_ready),                                     //            in.ready
		.in_valid          (cmd_demux_src11_valid),                                     //              .valid
		.in_startofpacket  (cmd_demux_src11_startofpacket),                             //              .startofpacket
		.in_endofpacket    (cmd_demux_src11_endofpacket),                               //              .endofpacket
		.in_channel        (cmd_demux_src11_channel),                                   //              .channel
		.in_data           (cmd_demux_src11_data),                                      //              .data
		.out_ready         (crosser_005_out_ready),                                     //           out.ready
		.out_valid         (crosser_005_out_valid),                                     //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                   //              .channel
		.out_data          (crosser_005_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (ALT_PLL_c0_clk),                                     //        in_clk.clk
		.in_reset          (CPU_reset_reset_bridge_in_reset_reset),              //  in_clk_reset.reset
		.out_clk           (CLK_50_clk_clk),                                     //       out_clk.clk
		.out_reset         (LT24_buffer_flag_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src12_ready),                              //            in.ready
		.in_valid          (cmd_demux_src12_valid),                              //              .valid
		.in_startofpacket  (cmd_demux_src12_startofpacket),                      //              .startofpacket
		.in_endofpacket    (cmd_demux_src12_endofpacket),                        //              .endofpacket
		.in_channel        (cmd_demux_src12_channel),                            //              .channel
		.in_data           (cmd_demux_src12_data),                               //              .data
		.out_ready         (crosser_006_out_ready),                              //           out.ready
		.out_valid         (crosser_006_out_valid),                              //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_006_out_channel),                            //              .channel
		.out_data          (crosser_006_out_data),                               //              .data
		.in_empty          (1'b0),                                               //   (terminated)
		.in_error          (1'b0),                                               //   (terminated)
		.out_empty         (),                                                   //   (terminated)
		.out_error         ()                                                    //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (ALT_PLL_c0_clk),                                            //        in_clk.clk
		.in_reset          (CPU_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (CLK_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src13_ready),                                     //            in.ready
		.in_valid          (cmd_demux_src13_valid),                                     //              .valid
		.in_startofpacket  (cmd_demux_src13_startofpacket),                             //              .startofpacket
		.in_endofpacket    (cmd_demux_src13_endofpacket),                               //              .endofpacket
		.in_channel        (cmd_demux_src13_channel),                                   //              .channel
		.in_data           (cmd_demux_src13_data),                                      //              .data
		.out_ready         (crosser_007_out_ready),                                     //           out.ready
		.out_valid         (crosser_007_out_valid),                                     //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                   //              .channel
		.out_data          (crosser_007_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (ALT_PLL_c0_clk),                                            //        in_clk.clk
		.in_reset          (CPU_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (CLK_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                                  //            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                                //              .channel
		.in_data           (cmd_demux_001_src1_data),                                   //              .data
		.out_ready         (crosser_008_out_ready),                                     //           out.ready
		.out_valid         (crosser_008_out_valid),                                     //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                   //              .channel
		.out_data          (crosser_008_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (ALT_PLL_c2_clk),                                  //        in_clk.clk
		.in_reset          (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALT_PLL_c0_clk),                                  //       out_clk.clk
		.out_reset         (CPU_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                        //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                        //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                  //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                      //              .channel
		.in_data           (rsp_demux_001_src0_data),                         //              .data
		.out_ready         (crosser_009_out_ready),                           //           out.ready
		.out_valid         (crosser_009_out_valid),                           //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                   //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                     //              .endofpacket
		.out_channel       (crosser_009_out_channel),                         //              .channel
		.out_data          (crosser_009_out_data),                            //              .data
		.in_empty          (1'b0),                                            //   (terminated)
		.in_error          (1'b0),                                            //   (terminated)
		.out_empty         (),                                                //   (terminated)
		.out_error         ()                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (CLK_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALT_PLL_c0_clk),                                            //       out_clk.clk
		.out_reset         (CPU_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                                //              .channel
		.in_data           (rsp_demux_004_src0_data),                                   //              .data
		.out_ready         (crosser_010_out_ready),                                     //           out.ready
		.out_valid         (crosser_010_out_valid),                                     //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_010_out_channel),                                   //              .channel
		.out_data          (crosser_010_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (CLK_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALT_PLL_c0_clk),                                            //       out_clk.clk
		.out_reset         (CPU_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src1_ready),                                  //            in.ready
		.in_valid          (rsp_demux_004_src1_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_004_src1_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src1_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_004_src1_channel),                                //              .channel
		.in_data           (rsp_demux_004_src1_data),                                   //              .data
		.out_ready         (crosser_011_out_ready),                                     //           out.ready
		.out_valid         (crosser_011_out_valid),                                     //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_011_out_channel),                                   //              .channel
		.out_data          (crosser_011_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (CLK_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALT_PLL_c0_clk),                                            //       out_clk.clk
		.out_reset         (CPU_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                                //              .channel
		.in_data           (rsp_demux_005_src0_data),                                   //              .data
		.out_ready         (crosser_012_out_ready),                                     //           out.ready
		.out_valid         (crosser_012_out_valid),                                     //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_012_out_channel),                                   //              .channel
		.out_data          (crosser_012_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (ALT_PLL_c2_clk),                                  //        in_clk.clk
		.in_reset          (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALT_PLL_c0_clk),                                  //       out_clk.clk
		.out_reset         (CPU_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                        //            in.ready
		.in_valid          (rsp_demux_007_src0_valid),                        //              .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),                //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                  //              .endofpacket
		.in_channel        (rsp_demux_007_src0_channel),                      //              .channel
		.in_data           (rsp_demux_007_src0_data),                         //              .data
		.out_ready         (crosser_013_out_ready),                           //           out.ready
		.out_valid         (crosser_013_out_valid),                           //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                   //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                     //              .endofpacket
		.out_channel       (crosser_013_out_channel),                         //              .channel
		.out_data          (crosser_013_out_data),                            //              .data
		.in_empty          (1'b0),                                            //   (terminated)
		.in_error          (1'b0),                                            //   (terminated)
		.out_empty         (),                                                //   (terminated)
		.out_error         ()                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (ALT_PLL_c2_clk),                                  //        in_clk.clk
		.in_reset          (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALT_PLL_c0_clk),                                  //       out_clk.clk
		.out_reset         (CPU_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                        //            in.ready
		.in_valid          (rsp_demux_008_src0_valid),                        //              .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),                //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),                  //              .endofpacket
		.in_channel        (rsp_demux_008_src0_channel),                      //              .channel
		.in_data           (rsp_demux_008_src0_data),                         //              .data
		.out_ready         (crosser_014_out_ready),                           //           out.ready
		.out_valid         (crosser_014_out_valid),                           //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                   //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                     //              .endofpacket
		.out_channel       (crosser_014_out_channel),                         //              .channel
		.out_data          (crosser_014_out_data),                            //              .data
		.in_empty          (1'b0),                                            //   (terminated)
		.in_error          (1'b0),                                            //   (terminated)
		.out_empty         (),                                                //   (terminated)
		.out_error         ()                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (CLK_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALT_PLL_c0_clk),                                            //       out_clk.clk
		.out_reset         (CPU_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (rsp_demux_011_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_011_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_011_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_011_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_011_src0_channel),                                //              .channel
		.in_data           (rsp_demux_011_src0_data),                                   //              .data
		.out_ready         (crosser_015_out_ready),                                     //           out.ready
		.out_valid         (crosser_015_out_valid),                                     //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_015_out_channel),                                   //              .channel
		.out_data          (crosser_015_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (CLK_50_clk_clk),                                     //        in_clk.clk
		.in_reset          (LT24_buffer_flag_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALT_PLL_c0_clk),                                     //       out_clk.clk
		.out_reset         (CPU_reset_reset_bridge_in_reset_reset),              // out_clk_reset.reset
		.in_ready          (rsp_demux_012_src0_ready),                           //            in.ready
		.in_valid          (rsp_demux_012_src0_valid),                           //              .valid
		.in_startofpacket  (rsp_demux_012_src0_startofpacket),                   //              .startofpacket
		.in_endofpacket    (rsp_demux_012_src0_endofpacket),                     //              .endofpacket
		.in_channel        (rsp_demux_012_src0_channel),                         //              .channel
		.in_data           (rsp_demux_012_src0_data),                            //              .data
		.out_ready         (crosser_016_out_ready),                              //           out.ready
		.out_valid         (crosser_016_out_valid),                              //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_016_out_channel),                            //              .channel
		.out_data          (crosser_016_out_data),                               //              .data
		.in_empty          (1'b0),                                               //   (terminated)
		.in_error          (1'b0),                                               //   (terminated)
		.out_empty         (),                                                   //   (terminated)
		.out_error         ()                                                    //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (17),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (CLK_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALT_PLL_c0_clk),                                            //       out_clk.clk
		.out_reset         (CPU_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (rsp_demux_013_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_013_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_013_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_013_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_013_src0_channel),                                //              .channel
		.in_data           (rsp_demux_013_src0_data),                                   //              .data
		.out_ready         (crosser_017_out_ready),                                     //           out.ready
		.out_valid         (crosser_017_out_valid),                                     //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_017_out_channel),                                   //              .channel
		.out_data          (crosser_017_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (ALT_PLL_c0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (CPU_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (ALT_PLL_c2_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (LED_CTRL_reset_sink_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (led_ctrl_avalon_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (led_ctrl_avalon_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (led_ctrl_avalon_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                   //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (ALT_PLL_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (CPU_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (lt24_ctrl_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (lt24_ctrl_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (lt24_ctrl_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                    //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (ALT_PLL_c0_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (CPU_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpu_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cpu_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cpu_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (CLK_50_clk_clk),                                                       // in_clk_0.clk
		.in_rst_0_reset (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                                    //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                                    //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                                     //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (CLK_50_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (alt_pll_pll_slave_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (alt_pll_pll_slave_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (alt_pll_pll_slave_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                          //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter_006 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (ALT_PLL_c0_clk),                        // in_clk_0.clk
		.in_rst_0_reset (CPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)      //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (ALT_PLL_c2_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (timer_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (timer_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (ALT_PLL_c2_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (LED_CTRL_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (key_s1_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (key_s1_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (key_s1_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (ALT_PLL_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (CPU_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (lt24_touch_penirq_n_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (lt24_touch_penirq_n_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (lt24_touch_penirq_n_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                  //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (ALT_PLL_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (CPU_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (lt24_touch_busy_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (lt24_touch_busy_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (lt24_touch_busy_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)              //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter_006 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (CLK_50_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pic_mem_s1_agent_rdata_fifo_out_data),                      //     in_0.data
		.in_0_valid     (pic_mem_s1_agent_rdata_fifo_out_valid),                     //         .valid
		.in_0_ready     (pic_mem_s1_agent_rdata_fifo_out_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                          //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (CLK_50_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (LT24_buffer_flag_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (lt24_buffer_flag_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (lt24_buffer_flag_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (lt24_buffer_flag_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                   //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter_006 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (CLK_50_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (ALT_PLL_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (background_mem_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (background_mem_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (background_mem_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                          //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (ALT_PLL_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (signal_out_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (signal_out_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (signal_out_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (signal_out_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)             //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (ALT_PLL_c0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (CPU_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (lt24_lcd_rstn_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (lt24_lcd_rstn_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (lt24_lcd_rstn_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)            //         .error
	);

	DE0_LT24_SOPC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (ALT_PLL_c0_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (CPU_reset_reset_bridge_in_reset_reset),                      // in_rst_0.reset
		.in_0_data      (lt24_touch_spi_spi_control_port_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (lt24_touch_spi_spi_control_port_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (lt24_touch_spi_spi_control_port_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                           //         .error
	);

endmodule
